{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a text-based role-playing game inspired by the Wings of Fire book series, where players control an animus dragon (a dragon with magical powers) attending Jade Mountain Academy. The core gameplay revolves around making choices that affect the character's soul integrity - using animus magic corrupts the dragon's soul, creating a compelling risk-reward mechanic. Players must balance using their powerful magical abilities with preserving their humanity and moral compass.\n\nThe application is built as a full-stack web game with a React frontend and Express backend, featuring character generation, scenario-based storytelling, and persistent game state management.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## Recent Changes\n- **Character Customization System** (January 2025): Added comprehensive character creator allowing players to choose tribe, powers, attributes, and animus status, plus randomization options.\n- **Local Storage Migration** (January 2025): Completely converted from PostgreSQL database to local browser storage. Game now runs without any database dependencies or Replit Core requirements.\n- **Enhanced Romance & Family System** (January 2025): Added comprehensive romance mechanics, mating system, dragonet inheritance, and multi-generational family tracking.\n- **Expanded Achievement System** (January 2025): Added 25+ achievements across categories including magic, relationships, survival, and family legacy.\n- **Multiple Game Endings** (January 2025): Implemented 12+ different endings based on player choices, including victory, tragic, neutral, and legendary outcomes.\n- **Enhanced Magic Variety** (January 2025): Expanded animus spell system with 6+ spell types including enchantment, combat, healing, weather control, curses, and summoning.\n- **Hybrid Dragon Support** (January 2025): Enhanced hybrid dragon generation with mixed tribal abilities and inheritance mechanics.\n- **Comprehensive Animus Filtering System** (January 2025): Fixed persistent issue where animus magic prompts appeared for non-animus dragons. Implemented thorough filtering across all AI generation systems.\n- **Enhanced Storyline Progression** (January 2025): Fixed custom actions, tribal powers, and special abilities to actually advance the story rather than just showing static results. Powers now generate new scenarios based on their effects.\n- **Contextual Tribal Powers** (January 2025): Made tribal powers more relevant to current situations and properly integrated with the storyline progression system.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with **React 18** using **TypeScript** and **Vite** as the build tool. The UI leverages **shadcn/ui** components built on **Radix UI** primitives, styled with **TailwindCSS** for a modern, accessible interface. State management is handled through **TanStack Query** for server state and React hooks for local state.\n\nThe routing system uses **Wouter** for lightweight client-side navigation. The application follows a component-based architecture with clear separation between game logic (housed in utility classes) and presentation components.\n\n## Backend Architecture  \nThe server runs on **Express.js** with TypeScript, following a simple REST API pattern. The architecture includes:\n\n- **Route handlers** in `/server/routes.ts` for game state CRUD operations\n- **Storage abstraction layer** with an in-memory implementation (`MemStorage`) for development\n- **Middleware** for request logging and error handling\n- **Schema validation** using Zod for type-safe data handling\n\nThe backend is designed to be database-agnostic through the `IStorage` interface, making it easy to swap storage implementations.\n\n## Game Engine Design\nThe core game logic is centralized in a `GameEngine` class that processes player choices and updates game state. Key design decisions include:\n\n- **Immutable state updates** - all game state changes return new objects\n- **Scenario-based progression** - the game generates contextual scenarios based on character state and history\n- **Soul corruption system** - the central mechanic where magic use gradually corrupts the character\n- **Deterministic randomness** - random elements are controlled to ensure fair gameplay\n\n## Data Storage Solutions\nNow uses **local browser storage (localStorage)** for all game data persistence, eliminating database dependencies entirely. The storage system includes:\n\n- **LocalGameStorage** class handling all data persistence in browser localStorage\n- **Game states** stored as structured JSON including character data, relationships, dragonets, and life events\n- **Save/Load system** with multiple game slot support and save game management\n- **Import/Export functionality** allowing players to backup and share their game data\n- **Type-safe schemas** maintained for data consistency using Zod validation\n\n## Development Environment\nThe project is configured for **Replit** deployment with:\n- **Hot module replacement** in development\n- **ESBuild** for production bundling  \n- **Integrated development tools** including error overlays and debugging support\n- **Path aliases** for clean imports (`@/` for client, `@shared/` for shared code)\n\n# External Dependencies\n\n## Database Integration\n- **Drizzle ORM** with PostgreSQL dialect for database operations\n- **@neondatabase/serverless** for cloud database connectivity\n- **connect-pg-simple** for session management (prepared for future authentication)\n\n## UI and Styling\n- **Radix UI** component library for accessible, unstyled primitives\n- **TailwindCSS** for utility-first styling with custom design system\n- **Lucide React** for consistent iconography\n- **class-variance-authority** for component variant management\n\n## State Management and Data Fetching\n- **TanStack React Query** for server state management, caching, and synchronization\n- **React Hook Form** with **Hookform Resolvers** for form validation\n- **Zod** for runtime type validation and schema generation\n\n## Development and Build Tools\n- **Vite** for fast development server and optimized production builds\n- **TypeScript** for type safety across the entire application\n- **ESBuild** for fast JavaScript bundling in production\n- **Replit-specific plugins** for enhanced development experience on the platform\n\n## Utility Libraries\n- **date-fns** for date manipulation and formatting\n- **clsx** and **tailwind-merge** for conditional CSS class handling\n- **nanoid** for generating unique identifiers\n- **cmdk** for command palette functionality","size_bytes":6576},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { createServer } from \"http\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Simplified logging middleware for static file serving\napp.use((req, res, next) => {\n  const start = Date.now();\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (req.path !== \"/\" && !req.path.includes(\".js\") && !req.path.includes(\".css\")) {\n      log(`${req.method} ${req.path} ${res.statusCode} in ${duration}ms`);\n    }\n  });\n  next();\n});\n\n(async () => {\n  const server = createServer(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    log(`Error: ${message}`);\n    res.status(status).json({ message });\n  });\n\n  // Setup Vite in development or serve static files in production\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // Serve the frontend-only app\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen(port, \"0.0.0.0\", () => {\n    log(`Wings of Fire RPG serving on port ${port} (local storage mode)`);\n  });\n})();\n","size_bytes":1390},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertGameStateSchema, type GameState, type InsertGameState } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Game state routes\n  app.get(\"/api/game/:id\", async (req, res) => {\n    try {\n      const gameState = await storage.getGameState(req.params.id);\n      if (!gameState) {\n        return res.status(404).json({ message: \"Game not found\" });\n      }\n      res.json(gameState);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get game state\" });\n    }\n  });\n\n  app.get(\"/api/game/user/:userId\", async (req, res) => {\n    try {\n      const gameState = await storage.getGameStateByUserId(req.params.userId);\n      res.json(gameState || null);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to get game state\" });\n    }\n  });\n\n  app.post(\"/api/game\", async (req, res) => {\n    try {\n      const validatedData = insertGameStateSchema.parse(req.body);\n      const gameState = await storage.createGameState(validatedData);\n      res.status(201).json(gameState);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid game state data\" });\n    }\n  });\n\n  app.patch(\"/api/game/:id\", async (req, res) => {\n    try {\n      const updateData = insertGameStateSchema.partial().parse(req.body);\n      const gameState = await storage.updateGameState(req.params.id, updateData);\n      res.json(gameState);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update game state\" });\n    }\n  });\n\n  app.delete(\"/api/game/:id\", async (req, res) => {\n    try {\n      await storage.deleteGameState(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete game state\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":1958},"server/storage.ts":{"content":"import { type User, type InsertUser, type GameState, type InsertGameState } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  \n  getGameState(id: string): Promise<GameState | undefined>;\n  getGameStateByUserId(userId: string): Promise<GameState | undefined>;\n  createGameState(gameState: InsertGameState): Promise<GameState>;\n  updateGameState(id: string, gameState: Partial<InsertGameState>): Promise<GameState>;\n  deleteGameState(id: string): Promise<void>;\n}\n\n// Using DatabaseStorage now, keeping MemStorage for reference\nclass MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private gameStates: Map<string, GameState>;\n\n  constructor() {\n    this.users = new Map();\n    this.gameStates = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getGameState(id: string): Promise<GameState | undefined> {\n    return this.gameStates.get(id);\n  }\n\n  async getGameStateByUserId(userId: string): Promise<GameState | undefined> {\n    return Array.from(this.gameStates.values()).find(\n      (gameState) => gameState.userId === userId,\n    );\n  }\n\n  async createGameState(insertGameState: InsertGameState): Promise<GameState> {\n    const id = randomUUID();\n    const now = new Date();\n    const gameState: GameState = {\n      ...insertGameState,\n      id,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.gameStates.set(id, gameState);\n    return gameState;\n  }\n\n  async updateGameState(id: string, updateData: Partial<InsertGameState>): Promise<GameState> {\n    const existing = this.gameStates.get(id);\n    if (!existing) {\n      throw new Error(\"Game state not found\");\n    }\n    \n    const updated: GameState = {\n      ...existing,\n      ...updateData,\n      updatedAt: new Date(),\n    };\n    this.gameStates.set(id, updated);\n    return updated;\n  }\n\n  async deleteGameState(id: string): Promise<void> {\n    this.gameStates.delete(id);\n  }\n}\n\nimport { db } from \"./db\";\nimport { gameStates } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    // User functionality not implemented yet\n    return undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    // User functionality not implemented yet\n    return undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    // User functionality not implemented yet\n    throw new Error(\"User functionality not implemented\");\n  }\n\n  async getGameState(id: string): Promise<GameState | undefined> {\n    const [gameState] = await db.select().from(gameStates).where(eq(gameStates.id, id));\n    return gameState || undefined;\n  }\n\n  async getGameStateByUserId(userId: string): Promise<GameState | undefined> {\n    const [gameState] = await db.select().from(gameStates).where(eq(gameStates.userId, userId));\n    return gameState || undefined;\n  }\n\n  async createGameState(insertGameState: InsertGameState): Promise<GameState> {\n    const [gameState] = await db\n      .insert(gameStates)\n      .values(insertGameState)\n      .returning();\n    return gameState;\n  }\n\n  async updateGameState(id: string, updateData: Partial<InsertGameState>): Promise<GameState> {\n    const [gameState] = await db\n      .update(gameStates)\n      .set(updateData)\n      .where(eq(gameStates.id, id))\n      .returning();\n    return gameState;\n  }\n\n  async deleteGameState(id: string): Promise<void> {\n    await db.delete(gameStates).where(eq(gameStates.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":4170},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, jsonb, timestamp } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const gameStates = pgTable(\"game_states\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id),\n  characterData: jsonb(\"character_data\").notNull(),\n  gameData: jsonb(\"game_data\").notNull(),\n  turn: integer(\"turn\").notNull().default(1),\n  location: text(\"location\").notNull().default(\"Jade Mountain Academy\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertGameStateSchema = createInsertSchema(gameStates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type GameState = typeof gameStates.$inferSelect;\nexport type InsertGameState = z.infer<typeof insertGameStateSchema>;\n\n// Game-specific types\nexport interface Character {\n  name: string;\n  tribe: string;\n  hybridTribes?: string[]; // For hybrid dragons\n  age: number;\n  yearsSurvived: number;\n  currentSeason: \"Spring\" | \"Summer\" | \"Fall\" | \"Winter\";\n  soulPercentage: number;\n  sanityPercentage: number;\n  soulCorruptionStage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\";\n  strength: number;\n  intelligence: number;\n  charisma: number;\n  wisdom: number;\n  mother: string;\n  father: string;\n  siblings: string[];\n  mate?: string;\n  dragonets: Dragonet[];\n  traits: string[];\n  avatar: string;\n  isAnimus: boolean;\n  tribalPowers: string[];\n  specialPowers: string[];\n  relationships: Record<string, Relationship>;\n  achievements: string[];\n  isAIControlled: boolean;\n  lifeEvents: LifeEvent[];\n  romanticHistory: RomanticEvent[];\n}\n\nexport interface Dragonet {\n  name: string;\n  age: number;\n  tribe: string;\n  hybridTribes?: string[];\n  inheritedTraits: string[];\n  isAnimus: boolean;\n  parentage: \"biological\" | \"adopted\";\n  personality: string;\n}\n\nexport interface Relationship {\n  name: string;\n  type: \"friend\" | \"rival\" | \"enemy\" | \"neutral\" | \"romantic\" | \"mate\" | \"ex_mate\" | \"family\";\n  strength: number;\n  history: string[];\n  isAlive: boolean;\n}\n\nexport interface RomanticEvent {\n  partnerName: string;\n  eventType: \"courtship\" | \"mating\" | \"breakup\" | \"loss\";\n  turnOccurred: number;\n  outcome: string;\n  hasOffspring: boolean;\n}\n\nexport interface LifeEvent {\n  turn: number;\n  category: \"birth\" | \"death\" | \"political\" | \"war\" | \"discovery\" | \"romance\" | \"achievement\" | \"corruption\";\n  description: string;\n  impact: \"positive\" | \"negative\" | \"neutral\";\n}\n\nexport interface GameData {\n  turn: number;\n  location: string;\n  timeInfo: string;\n  currentScenario: Scenario;\n  history: GameEvent[];\n  relationships: Record<string, number>;\n  inventory: InventoryItem[];\n  reputation: number;\n  politicalEvents: PoliticalEvent[];\n  warStatus: WarStatus;\n  explorationLog: ExplorationEvent[];\n}\n\nexport interface InventoryItem {\n  id: string;\n  name: string;\n  description: string;\n  type: \"enchanted_object\" | \"treasure\" | \"scroll\" | \"weapon\" | \"tool\" | \"magical_artifact\";\n  enchantments: string[];\n  soulCostToCreate?: number;\n  turnCreated?: number;\n  isActive: boolean;\n}\n\nexport interface Scenario {\n  id: string;\n  title: string;\n  description: string;\n  narrativeText: string[];\n  choices: Choice[];\n  type: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic';\n  location: string;\n  timeOfDay: string;\n  weather: string;\n}\n\nexport interface Choice {\n  id: string;\n  text: string;\n  description: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  requirements?: string[];\n  corruption?: boolean;\n}\n\nexport interface GameEvent {\n  turn: number;\n  scenario: string;\n  choice: string;\n  consequences: string[];\n  soulLoss: number;\n  sanityLoss: number;\n}\n\nexport interface MagicSpell {\n  name: string;\n  category: 'minor' | 'moderate' | 'major' | 'catastrophic';\n  soulCost: [number, number]; // min, max\n  description: string;\n  examples: string[];\n  type: \"enchantment\" | \"combat\" | \"healing\" | \"weather\" | \"curse\" | \"summoning\";\n}\n\nexport interface CustomSpell {\n  id: string;\n  targetObject: string;\n  enchantmentDescription: string;\n  estimatedSoulCost: number;\n  spellType: \"enchantment\" | \"combat\" | \"healing\" | \"weather\" | \"curse\" | \"summoning\";\n  complexity: \"simple\" | \"moderate\" | \"complex\" | \"catastrophic\";\n  turnCast: number;\n}\n\nexport interface PoliticalEvent {\n  type: \"succession\" | \"civil_war\" | \"queen_demand\" | \"alliance\" | \"betrayal\";\n  tribes: string[];\n  description: string;\n  playerChoice?: string;\n  consequences: string;\n}\n\nexport interface WarStatus {\n  isAtWar: boolean;\n  warringTribes: string[];\n  warCause: string;\n  playerInvolvement: \"forced_fighter\" | \"enchanter\" | \"neutral\" | \"deserter\";\n}\n\nexport interface ExplorationEvent {\n  location: string;\n  discovery: \"ruins\" | \"scroll\" | \"treasure\" | \"enemy\" | \"ally\" | \"mystery\";\n  description: string;\n  consequences: string[];\n}\n","size_bytes":5404},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Game from \"@/pages/game\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/game/:gameId?\" component={Game} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <TooltipProvider>\n      <Toaster />\n      <Router />\n    </TooltipProvider>\n  );\n}\n\nexport default App;\n","size_bytes":595},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(270 20% 98%);\n  --foreground: hsl(260 15% 8%);\n  --card: hsl(270 20% 95%);\n  --card-foreground: hsl(260 15% 8%);\n  --popover: hsl(270 20% 98%);\n  --popover-foreground: hsl(260 15% 8%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(260 15% 8%);\n  --secondary-foreground: hsl(0 0% 100%);\n  --muted: hsl(270 20% 88%);\n  --muted-foreground: hsl(260 15% 8%);\n  --accent: hsl(268 50% 90%);\n  --accent-foreground: hsl(262 83% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(268 30% 85%);\n  --input: hsl(270 23% 93%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(270 20% 95%);\n  --sidebar-foreground: hsl(260 15% 8%);\n  --sidebar-primary: hsl(262 83% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(268 50% 90%);\n  --sidebar-accent-foreground: hsl(262 83% 58%);\n  --sidebar-border: hsl(268 25% 80%);\n  --sidebar-ring: hsl(262 83% 58%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n  \n  /* Dragon theme colors */\n  --dragon-deep: hsl(255 27% 10%);\n  --dragon-scale: hsl(260 20% 18%);\n  --dragon-purple: hsl(262 83% 58%);\n  --dragon-gold: hsl(43 96% 56%);\n  --soul-pure: hsl(0 0% 100%);\n  --soul-corrupt: hsl(0 74% 42%);\n  \n  /* Fantasy fonts */\n  --font-fantasy: 'Cinzel', serif;\n  --font-narrative: 'Crimson Text', serif;\n}\n\n.dark {\n  --background: hsl(260 20% 8%);\n  --foreground: hsl(270 15% 92%);\n  --card: hsl(260 20% 12%);\n  --card-foreground: hsl(270 15% 85%);\n  --popover: hsl(260 20% 8%);\n  --popover-foreground: hsl(270 15% 92%);\n  --primary: hsl(262 83% 58%);\n  --primary-foreground: hsl(0 0% 100%);\n  --secondary: hsl(270 15% 92%);\n  --secondary-foreground: hsl(260 15% 8%);\n  --muted: hsl(260 20% 10%);\n  --muted-foreground: hsl(270 15% 46%);\n  --accent: hsl(268 50% 15%);\n  --accent-foreground: hsl(262 83% 58%);\n  --destructive: hsl(356.3033 90.5579% 54.3137%);\n  --destructive-foreground: hsl(0 0% 100%);\n  --border: hsl(268 30% 20%);\n  --input: hsl(260 27% 18%);\n  --ring: hsl(262 83% 58%);\n  --chart-1: hsl(262 83% 58%);\n  --chart-2: hsl(159.7826 100% 36.0784%);\n  --chart-3: hsl(42.0290 92.8251% 56.2745%);\n  --chart-4: hsl(147.1429 78.5047% 41.9608%);\n  --chart-5: hsl(341.4894 75.2000% 50.9804%);\n  --sidebar: hsl(260 20% 12%);\n  --sidebar-foreground: hsl(270 15% 85%);\n  --sidebar-primary: hsl(262 83% 58%);\n  --sidebar-primary-foreground: hsl(0 0% 100%);\n  --sidebar-accent: hsl(268 50% 15%);\n  --sidebar-accent-foreground: hsl(262 83% 58%);\n  --sidebar-border: hsl(268 25% 25%);\n  --sidebar-ring: hsl(262 83% 58%);\n  --font-sans: Open Sans, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 1px 2px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 2px 4px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 4px 6px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00), 0px 8px 10px -1px hsl(202.8169 89.1213% 53.1373% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169 89.1213% 53.1373% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  html {\n    background: hsl(260 20% 8%);\n  }\n\n  body {\n    @apply font-sans antialiased text-foreground;\n    background: hsl(260 20% 8%);\n    min-height: 100vh;\n  }\n  \n  #root {\n    background: hsl(260 20% 8%);\n    min-height: 100vh;\n  }\n}\n\n/* Dragon theme styles */\n.bg-dragon-gradient {\n  background: linear-gradient(135deg, hsl(262 80% 8%) 0%, hsl(262 60% 15%) 30%, hsl(268 50% 25%) 70%, hsl(262 80% 8%) 100%);\n}\n\n.corrupted-soul {\n  background: linear-gradient(90deg, var(--soul-corrupt) 0%, hsl(0 50% 30%) 100%);\n  animation: pulse-corrupt 1.5s infinite;\n}\n\n.pure-soul {\n  background: linear-gradient(90deg, var(--soul-pure) 0%, hsl(210 20% 95%) 100%);\n}\n\n.narrative-text {\n  line-height: 1.8;\n  text-align: justify;\n}\n\n.choice-button:hover {\n  transform: translateY(-2px);\n  transition: all 0.3s ease;\n}\n\n.tribal-border {\n  border-image: linear-gradient(45deg, var(--dragon-gold), var(--dragon-purple)) 1;\n}\n\n@keyframes pulse-corrupt {\n  0%, 100% { opacity: 1; }\n  50% { opacity: 0.7; }\n}\n\n/* Custom range slider styling */\n.slider::-webkit-slider-thumb {\n  appearance: none;\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: hsl(280.4, 72.8%, 55.7%);\n  cursor: pointer;\n}\n\n.slider::-moz-range-thumb {\n  height: 16px;\n  width: 16px;\n  border-radius: 50%;\n  background: hsl(280.4, 72.8%, 55.7%);\n  cursor: pointer;\n  border: none;\n}\n\n@keyframes glow {\n  from { box-shadow: 0 0 5px var(--dragon-gold), 0 0 10px var(--dragon-gold), 0 0 15px var(--dragon-gold); }\n  to { box-shadow: 0 0 10px var(--dragon-gold), 0 0 20px var(--dragon-gold), 0 0 30px var(--dragon-gold); }\n}\n\n.animate-glow {\n  animation: glow 2s ease-in-out infinite alternate;\n}\n","size_bytes":6547},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/character-creator.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dice6, Sparkles, Zap, Shuffle } from \"lucide-react\";\nimport { generateCharacter } from \"@/lib/character-generator\";\nimport { Character } from \"@shared/schema\";\n\nconst TRIBES = [\n  \"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \n  \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\", \"Hybrid\"\n];\n\nconst AVAILABLE_TRAITS = [\n  \"Brave\", \"Cunning\", \"Wise\", \"Curious\", \"Fierce\", \"Gentle\", \"Loyal\", \"Mysterious\",\n  \"Ambitious\", \"Calm\", \"Reckless\", \"Patient\", \"Proud\", \"Humble\", \"Vengeful\", \"Forgiving\",\n  \"Studious\", \"Impulsive\", \"Cautious\", \"Bold\", \"Sarcastic\", \"Optimistic\", \"Pessimistic\", \"Protective\"\n];\n\nconst TRIBAL_POWERS = {\n  MudWing: [\"Fire resistance\", \"Mud camouflage\", \"Enhanced strength when warm\"],\n  SandWing: [\"Venomous tail barb\", \"Desert survival\", \"Heat resistance\"],\n  SkyWing: [\"Superior flight speed\", \"Fire breathing\", \"High altitude adaptation\"],\n  SeaWing: [\"Underwater breathing\", \"Bioluminescent scales\", \"Deep sea pressure resistance\"],\n  IceWing: [\"Frost breath\", \"Cold immunity\", \"Serrated claws\"],\n  RainWing: [\"Color-changing scales\", \"Acidic venom\", \"Prehensile tail\"],\n  NightWing: [\"Future sight\", \"Mind reading\", \"Fire breathing\"],\n  SilkWing: [\"Silk production\", \"Metamorphosis\", \"Enhanced agility\"],\n  HiveWing: [\"Paralytic stinger\", \"Hive mind connection\", \"Toxic breath\"],\n  LeafWing: [\"Plant manipulation\", \"Leaf speak\", \"Photosynthesis healing\"]\n};\n\ninterface CharacterCreatorProps {\n  onCreateCharacter: (character: Character) => void;\n  onCancel: () => void;\n}\n\nexport default function CharacterCreator({ onCreateCharacter, onCancel }: CharacterCreatorProps) {\n  const [customName, setCustomName] = useState(\"\");\n  const [selectedTribe, setSelectedTribe] = useState<string>(\"\");\n  const [isAnimus, setIsAnimus] = useState(false);\n  const [selectedPowers, setSelectedPowers] = useState<string[]>([]);\n  const [selectedTraits, setSelectedTraits] = useState<string[]>([]);\n  const [selectedHybridTribes, setSelectedHybridTribes] = useState<string[]>([]);\n  const [attributes, setAttributes] = useState({\n    strength: 50,\n    intelligence: 50,\n    charisma: 50,\n    wisdom: 50\n  });\n\n  const handleRandomize = () => {\n    const randomChar = generateCharacter();\n    setCustomName(randomChar.name);\n    setSelectedTribe(randomChar.hybridTribes ? \"Hybrid\" : randomChar.tribe);\n    setIsAnimus(randomChar.isAnimus);\n    setSelectedPowers(randomChar.tribalPowers);\n    setSelectedTraits(randomChar.traits);\n    setSelectedHybridTribes(randomChar.hybridTribes || []);\n    setAttributes({\n      strength: randomChar.strength,\n      intelligence: randomChar.intelligence,\n      charisma: randomChar.charisma,\n      wisdom: randomChar.wisdom\n    });\n  };\n\n  const handlePowerToggle = (power: string) => {\n    setSelectedPowers(prev => \n      prev.includes(power) \n        ? prev.filter(p => p !== power)\n        : [...prev, power]\n    );\n  };\n\n  const handleTraitToggle = (trait: string) => {\n    setSelectedTraits(prev => \n      prev.includes(trait) \n        ? prev.filter(t => t !== trait)\n        : [...prev, trait]\n    );\n  };\n\n  const handleHybridTribeToggle = (tribe: string) => {\n    setSelectedHybridTribes(prev => \n      prev.includes(tribe) \n        ? prev.filter(t => t !== tribe)\n        : prev.length < 3 ? [...prev, tribe] : prev\n    );\n  };\n\n  const randomizeTraits = () => {\n    const shuffled = [...AVAILABLE_TRAITS].sort(() => Math.random() - 0.5);\n    setSelectedTraits(shuffled.slice(0, 2 + Math.floor(Math.random() * 3)));\n  };\n\n  const handleCreateCustom = () => {\n    const baseChar = generateCharacter();\n    const customCharacter: Character = {\n      ...baseChar,\n      name: customName || baseChar.name,\n      tribe: selectedTribe === \"Hybrid\" ? (selectedHybridTribes[0] || \"MudWing\") : selectedTribe || baseChar.tribe,\n      hybridTribes: selectedTribe === \"Hybrid\" ? selectedHybridTribes : undefined,\n      isAnimus,\n      tribalPowers: selectedPowers,\n      traits: selectedTraits,\n      strength: attributes.strength,\n      intelligence: attributes.intelligence,\n      charisma: attributes.charisma,\n      wisdom: attributes.wisdom,\n      soulPercentage: 100,\n      sanityPercentage: 100\n    };\n    onCreateCharacter(customCharacter);\n  };\n\n  const availablePowers = (() => {\n    if (selectedTribe === \"Hybrid\" && selectedHybridTribes.length > 0) {\n      // Combine powers from all selected hybrid tribes\n      const combinedPowers: string[] = [];\n      selectedHybridTribes.forEach(tribe => {\n        const tribePowers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS] || [];\n        combinedPowers.push(...tribePowers);\n      });\n      return Array.from(new Set(combinedPowers)); // Remove duplicates\n    }\n    return selectedTribe ? TRIBAL_POWERS[selectedTribe as keyof typeof TRIBAL_POWERS] || [] : [];\n  })();\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient text-slate-100 p-4\">\n      <div className=\"container mx-auto max-w-4xl\">\n        <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30\">\n          <CardHeader>\n            <CardTitle className=\"font-fantasy text-3xl text-purple-300 text-center\">\n              <span className=\"mr-3\">🐉</span>\n              Create Your Dragon\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            {/* Quick Actions */}\n            <div className=\"flex gap-4 justify-center\">\n              <Button \n                onClick={handleRandomize}\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                <Dice6 className=\"w-4 h-4 mr-2\" />\n                Randomize Everything\n              </Button>\n              <Button \n                onClick={() => onCreateCharacter(generateCharacter())}\n                variant=\"outline\"\n              >\n                <Sparkles className=\"w-4 h-4 mr-2\" />\n                Quick Start (Random)\n              </Button>\n            </div>\n\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {/* Basic Info */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Basic Information</h3>\n                \n                <div>\n                  <Label htmlFor=\"name\">Dragon Name</Label>\n                  <Input\n                    id=\"name\"\n                    value={customName}\n                    onChange={(e) => setCustomName(e.target.value)}\n                    placeholder=\"Enter custom name or leave blank for random\"\n                    className=\"bg-black/50 border-purple-500/30\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"tribe\">Tribe</Label>\n                  <Select value={selectedTribe} onValueChange={setSelectedTribe}>\n                    <SelectTrigger className=\"bg-black/50 border-purple-500/30\">\n                      <SelectValue placeholder=\"Choose your tribe\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {TRIBES.map(tribe => (\n                        <SelectItem key={tribe} value={tribe}>{tribe}</SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox \n                    id=\"animus\" \n                    checked={isAnimus}\n                    onCheckedChange={(checked) => setIsAnimus(checked === true)}\n                  />\n                  <Label htmlFor=\"animus\" className=\"flex items-center\">\n                    <Zap className=\"w-4 h-4 mr-2 text-red-400\" />\n                    Animus Dragon (Soul magic abilities)\n                  </Label>\n                </div>\n\n                {/* Hybrid Tribe Selection */}\n                {selectedTribe === \"Hybrid\" && (\n                  <div className=\"space-y-3\">\n                    <Label>Choose Hybrid Tribes (2-3 tribes)</Label>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {TRIBES.filter(t => t !== \"Hybrid\").map(tribe => (\n                        <div \n                          key={tribe}\n                          className={`p-2 rounded-lg border text-sm cursor-pointer transition-colors ${\n                            selectedHybridTribes.includes(tribe)\n                              ? 'bg-purple-600/50 border-purple-400'\n                              : 'bg-black/30 border-purple-500/30 hover:bg-purple-500/20'\n                          }`}\n                          onClick={() => handleHybridTribeToggle(tribe)}\n                        >\n                          {tribe}\n                        </div>\n                      ))}\n                    </div>\n                    <p className=\"text-xs text-slate-400\">\n                      Select 2-3 tribes for your hybrid heritage. Order matters - first tribe is primary.\n                    </p>\n                  </div>\n                )}\n              </div>\n\n              {/* Attributes */}\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Attributes</h3>\n                \n                {Object.entries(attributes).map(([attr, value]) => (\n                  <div key={attr}>\n                    <Label className=\"capitalize\">{attr}: {value}</Label>\n                    <input\n                      type=\"range\"\n                      min=\"10\"\n                      max=\"90\"\n                      value={value}\n                      onChange={(e) => setAttributes(prev => ({\n                        ...prev,\n                        [attr]: parseInt(e.target.value)\n                      }))}\n                      className=\"w-full h-2 bg-black/50 rounded-lg appearance-none cursor-pointer slider\"\n                    />\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Tribal Powers */}\n            {selectedTribe && availablePowers.length > 0 && (\n              <div className=\"space-y-4\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">\n                  {selectedTribe === \"Hybrid\" ? \"Hybrid\" : selectedTribe} Tribal Powers\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n                  {availablePowers.map(power => (\n                    <div \n                      key={power}\n                      className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                        selectedPowers.includes(power)\n                          ? 'bg-purple-600/50 border-purple-400'\n                          : 'bg-black/50 border-purple-500/30 hover:bg-purple-500/20'\n                      }`}\n                      onClick={() => handlePowerToggle(power)}\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <span className=\"text-sm\">{power}</span>\n                        {selectedPowers.includes(power) && (\n                          <Badge variant=\"secondary\" className=\"ml-2\">Selected</Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                <p className=\"text-xs text-slate-400\">\n                  Select the powers your dragon has mastered. You can choose multiple abilities.\n                </p>\n              </div>\n            )}\n\n            {/* Character Traits */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h3 className=\"font-fantasy text-xl text-purple-300\">Character Traits</h3>\n                <Button \n                  onClick={randomizeTraits}\n                  size=\"sm\"\n                  variant=\"outline\"\n                  className=\"text-xs\"\n                >\n                  <Dice6 className=\"w-3 h-3 mr-1\" />\n                  Randomize\n                </Button>\n              </div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                {AVAILABLE_TRAITS.map(trait => (\n                  <div \n                    key={trait}\n                    className={`p-2 rounded-lg border text-sm cursor-pointer transition-colors ${\n                      selectedTraits.includes(trait)\n                        ? 'bg-purple-600/50 border-purple-400'\n                        : 'bg-black/30 border-purple-500/30 hover:bg-purple-500/20'\n                    }`}\n                    onClick={() => handleTraitToggle(trait)}\n                  >\n                    {trait}\n                  </div>\n                ))}\n              </div>\n              <p className=\"text-xs text-slate-400\">\n                Select 2-5 traits that define your dragon's personality and behavior.\n              </p>\n            </div>\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4 justify-center pt-6\">\n              <Button \n                onClick={handleCreateCustom}\n                size=\"lg\"\n                className=\"bg-purple-600 hover:bg-purple-700\"\n              >\n                Create Character\n              </Button>\n              <Button \n                onClick={onCancel}\n                variant=\"outline\"\n                size=\"lg\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":13884},"client/src/components/character-panel.tsx":{"content":"import { Character, InventoryItem } from \"@shared/schema\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { GameEngine } from \"@/lib/game-engine\";\nimport { getHybridDisplayName, getHybridPowerDescription } from \"@/lib/hybrid-generator\";\nimport SanityBar from \"./sanity-bar\";\nimport { Zap, Eye, Sparkles, Package, Heart, Users, Baby } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CharacterPanelProps {\n  character: Character;\n  inventory?: InventoryItem[];\n  onShowTribalPowers?: () => void;\n  onUseInventoryItem?: (item: InventoryItem) => void;\n}\n\nexport default function CharacterPanel({ character, inventory = [], onShowTribalPowers, onUseInventoryItem }: CharacterPanelProps) {\n  const [activeTab, setActiveTab] = useState<\"info\" | \"family\" | \"social\" | \"inventory\">(\"info\");\n  const corruptionLevel = GameEngine.getCorruptionLevel(character.soulPercentage);\n  \n  const getSoulBarColor = () => {\n    if (character.soulPercentage >= 80) return \"bg-white\";\n    if (character.soulPercentage >= 50) return \"bg-yellow-400\";\n    if (character.soulPercentage >= 20) return \"bg-orange-500\";\n    return \"bg-red-600 animate-pulse\";\n  };\n\n  return (\n    <div className=\"lg:col-span-1\">\n      <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30 h-full overflow-y-auto\">\n        <CardContent className=\"p-6\">\n          {/* Character Avatar & Basic Info */}\n          <div className=\"text-center mb-6\">\n            <img\n              src={character.avatar}\n              alt=\"Dragon character portrait\"\n              className=\"w-32 h-32 rounded-full mx-auto mb-4 border-4 border-purple-400 object-cover\"\n            />\n            <h2 className=\"font-fantasy text-2xl font-bold text-purple-300\">\n              {character.name}\n            </h2>\n            <p className=\"text-purple-400 font-medium\">\n              {character.hybridTribes ? getHybridDisplayName(character) : `${character.tribe} Dragonet`}\n            </p>\n            {character.hybridTribes && (\n              <div className=\"mt-2\">\n                <Badge variant=\"outline\" className=\"border-rainbow bg-gradient-to-r from-purple-500/20 to-blue-500/20\">\n                  <Sparkles className=\"w-3 h-3 mr-1\" />\n                  Hybrid Dragon\n                </Badge>\n              </div>\n            )}\n            <p className=\"text-sm text-purple-200\">\n              {character.age} years old\n            </p>\n          </div>\n\n          {/* Soul Status */}\n          <div className=\"mb-6\">\n            <div className=\"flex items-center justify-between mb-2\">\n              <span className=\"font-medium text-slate-200\">Soul Integrity</span>\n              <span className=\"text-sm font-bold\">{character.soulPercentage}%</span>\n            </div>\n            <Progress\n              value={character.soulPercentage}\n              className=\"h-3\"\n            />\n            <div className=\"flex items-center justify-between mt-1\">\n              <Badge variant={character.soulCorruptionStage === 'Normal' ? 'default' : character.soulCorruptionStage === 'Frayed' ? 'secondary' : character.soulCorruptionStage === 'Twisted' ? 'destructive' : 'destructive'} className=\"text-xs\">\n                {character.soulCorruptionStage}\n              </Badge>\n              <span className=\"text-xs text-slate-400\">\n                {character.soulCorruptionStage === 'Normal' ? 'Pure soul' : character.soulCorruptionStage === 'Frayed' ? 'Minor corruption' : character.soulCorruptionStage === 'Twisted' ? 'Significant corruption' : 'Soul nearly lost'}\n              </span>\n            </div>\n          </div>\n\n          {/* Sanity Status */}\n          <div className=\"mb-6\">\n            <SanityBar sanityPercentage={character.sanityPercentage} />\n          </div>\n\n          {/* Animus & Powers Status */}\n          <div className=\"mb-6\">\n            <div className=\"space-y-3\">\n              {character.isAnimus && (\n                <Badge variant=\"destructive\" className=\"w-full justify-center py-2\">\n                  <Zap className=\"w-4 h-4 mr-2\" />\n                  Animus Dragon\n                </Badge>\n              )}\n              \n              {(character.tribalPowers.length > 0 || character.specialPowers.length > 0) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onShowTribalPowers}\n                  className=\"w-full\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  View Powers ({character.tribalPowers.length + character.specialPowers.length})\n                </Button>\n              )}\n            </div>\n          </div>\n\n          {/* Navigation Tabs */}\n          <div className=\"flex space-x-1 mb-4\">\n            <Button\n              variant={activeTab === \"info\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"info\")}\n              className=\"flex-1\"\n            >\n              <Eye className=\"w-3 h-3 mr-1\" />\n              Info\n            </Button>\n            <Button\n              variant={activeTab === \"family\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"family\")}\n              className=\"flex-1\"\n            >\n              <Baby className=\"w-3 h-3 mr-1\" />\n              Family\n            </Button>\n            <Button\n              variant={activeTab === \"social\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"social\")}\n              className=\"flex-1\"\n            >\n              <Users className=\"w-3 h-3 mr-1\" />\n              Social\n            </Button>\n            <Button\n              variant={activeTab === \"inventory\" ? \"default\" : \"ghost\"}\n              size=\"sm\"\n              onClick={() => setActiveTab(\"inventory\")}\n              className=\"flex-1\"\n            >\n              <Package className=\"w-3 h-3 mr-1\" />\n              Items\n            </Button>\n          </div>\n\n          {/* Tab Content */}\n          {activeTab === \"info\" && (\n            <div className=\"space-y-4\">\n              {/* Character Stats */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Attributes\n                </h3>\n                <div className=\"grid grid-cols-2 gap-3\">\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Strength</div>\n                    <div className=\"font-semibold\">{character.strength}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Intelligence</div>\n                    <div className=\"font-semibold\">{character.intelligence}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Charisma</div>\n                    <div className=\"font-semibold\">{character.charisma}</div>\n                  </div>\n                  <div className=\"bg-black/50 rounded-lg p-3\">\n                    <div className=\"text-xs text-slate-400\">Wisdom</div>\n                    <div className=\"font-semibold\">{character.wisdom}</div>\n                  </div>\n                </div>\n              </div>\n\n              {/* Hybrid Dragon Info */}\n              {character.hybridTribes && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    Hybrid Heritage\n                  </h3>\n                  <div className=\"bg-gradient-to-r from-purple-900/30 to-blue-900/30 rounded-lg p-3 border border-purple-500/20\">\n                    <div className=\"space-y-2 text-sm\">\n                      {getHybridPowerDescription(character).map((desc, index) => (\n                        <p key={index} className=\"text-slate-300\">{desc}</p>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Traits */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Traits\n                </h3>\n                <div className=\"flex flex-wrap gap-2\">\n                  {character.traits.map((trait, index) => (\n                    <Badge\n                      key={index}\n                      variant={trait === 'Corrupted' ? 'destructive' : 'secondary'}\n                      className={trait === 'Corrupted' ? 'bg-red-600/30 text-red-300' : 'bg-purple-600/30 text-purple-300'}\n                    >\n                      {trait}\n                    </Badge>\n                  ))}\n                </div>\n              </div>\n\n              {/* Achievements */}\n              {character.achievements.length > 0 && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    Achievements\n                  </h3>\n                  <div className=\"space-y-1\">\n                    {character.achievements.slice(0, 5).map((achievement, index) => (\n                      <Badge key={index} variant=\"outline\" className=\"w-full justify-start text-xs py-1\">\n                        <Sparkles className=\"w-3 h-3 mr-1\" />\n                        {achievement}\n                      </Badge>\n                    ))}\n                    {character.achievements.length > 5 && (\n                      <p className=\"text-xs text-slate-400\">+{character.achievements.length - 5} more...</p>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"family\" && (\n            <div className=\"space-y-4\">\n              {/* Parents & Siblings */}\n              <div>\n                <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                  Birth Family\n                </h3>\n                <div className=\"space-y-2 text-sm\">\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Mother:</span>\n                    <span>{character.mother}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span className=\"text-slate-400\">Father:</span>\n                    <span>{character.father}</span>\n                  </div>\n                  {character.siblings.length > 0 && (\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Siblings:</span>\n                      <span>{character.siblings.join(\", \")}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Mate & Romance */}\n              {character.mate && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    <Heart className=\"w-4 h-4 inline mr-2\" />\n                    Romantic Life\n                  </h3>\n                  <div className=\"space-y-2 text-sm\">\n                    <div className=\"flex justify-between\">\n                      <span className=\"text-slate-400\">Mate:</span>\n                      <span className=\"text-pink-300\">{character.mate}</span>\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {/* Dragonets */}\n              {character.dragonets.length > 0 && (\n                <div>\n                  <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                    <Baby className=\"w-4 h-4 inline mr-2\" />\n                    Dragonets ({character.dragonets.length})\n                  </h3>\n                  <div className=\"space-y-3\">\n                    {character.dragonets.map((dragonet, index) => (\n                      <div key={index} className=\"bg-black/30 rounded-lg p-3\">\n                        <div className=\"flex justify-between items-center mb-1\">\n                          <span className=\"font-semibold text-purple-300\">{dragonet.name}</span>\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            {dragonet.age} years\n                          </Badge>\n                        </div>\n                        <div className=\"text-xs space-y-1 text-slate-400\">\n                          <div>Heritage: {dragonet.hybridTribes ? dragonet.hybridTribes.join('/') : dragonet.tribe}</div>\n                          <div>Personality: {dragonet.personality}</div>\n                          {dragonet.isAnimus && (\n                            <Badge variant=\"destructive\" className=\"text-xs\">\n                              <Zap className=\"w-2 h-2 mr-1\" />\n                              Animus\n                            </Badge>\n                          )}\n                          {dragonet.inheritedTraits.length > 0 && (\n                            <div>Traits: {dragonet.inheritedTraits.join(', ')}</div>\n                          )}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"social\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                <Users className=\"w-4 h-4 inline mr-2\" />\n                Relationships ({Object.keys(character.relationships).length})\n              </h3>\n              {Object.keys(character.relationships).length === 0 ? (\n                <p className=\"text-slate-400 text-sm text-center py-4\">No significant relationships yet.</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {Object.values(character.relationships).slice(0, 8).map((relationship, index) => (\n                    <div key={index} className=\"bg-black/30 rounded-lg p-3\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-semibold text-purple-300\">{relationship.name}</span>\n                        <Badge \n                          variant={relationship.type === 'mate' || relationship.type === 'romantic' ? 'default' : relationship.type === 'friend' ? 'secondary' : relationship.type === 'rival' || relationship.type === 'enemy' ? 'destructive' : 'outline'}\n                          className=\"text-xs\"\n                        >\n                          {relationship.type === 'mate' ? '💕 Mate' : relationship.type === 'romantic' ? '💖 Romance' : relationship.type === 'friend' ? '🤝 Friend' : relationship.type === 'rival' ? '⚔️ Rival' : relationship.type === 'enemy' ? '💀 Enemy' : '🤷 Neutral'}\n                        </Badge>\n                      </div>\n                      <div className=\"text-xs text-slate-400\">\n                        <div>Strength: {relationship.strength}</div>\n                        {relationship.history.length > 0 && (\n                          <div>Last: {relationship.history[relationship.history.length - 1]}</div>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                  {Object.keys(character.relationships).length > 8 && (\n                    <p className=\"text-xs text-slate-400 text-center\">+{Object.keys(character.relationships).length - 8} more relationships...</p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {activeTab === \"inventory\" && (\n            <div className=\"space-y-4\">\n              <h3 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-3\">\n                <Package className=\"w-4 h-4 inline mr-2\" />\n                Inventory ({inventory.length})\n              </h3>\n              {inventory.length === 0 ? (\n                <p className=\"text-slate-400 text-sm text-center py-4\">No items in inventory.</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {inventory.slice(0, 6).map((item, index) => (\n                    <div key={index} className=\"bg-black/30 rounded-lg p-3 hover:bg-black/40 transition-colors\">\n                      <div className=\"flex justify-between items-center mb-1\">\n                        <span className=\"font-semibold text-purple-300\">{item.name}</span>\n                        <div className=\"flex items-center gap-2\">\n                          <Badge variant={item.type === 'enchanted_object' ? 'default' : item.type === 'magical_artifact' ? 'destructive' : 'secondary'} className=\"text-xs\">\n                            {item.type.replace('_', ' ')}\n                          </Badge>\n                          {onUseInventoryItem && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              onClick={() => onUseInventoryItem(item)}\n                              className=\"h-6 px-2 text-xs hover:bg-purple-600/30\"\n                            >\n                              Use\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                      <p className=\"text-xs text-slate-300 mb-2\">{item.description}</p>\n                      {item.enchantments.length > 0 && (\n                        <div className=\"text-xs text-blue-300\">\n                          ✨ {item.enchantments.join(', ')}\n                        </div>\n                      )}\n                      {item.soulCostToCreate && (\n                        <div className=\"text-xs text-red-300 mt-1\">\n                          Soul cost: {item.soulCostToCreate}%\n                        </div>\n                      )}\n                    </div>\n                  ))}\n                  {inventory.length > 6 && (\n                    <p className=\"text-xs text-slate-400 text-center\">+{inventory.length - 6} more items...</p>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":18418},"client/src/components/enhanced-magic-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Character } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Wand2, Skull, Zap, Shield, Cloud, Heart, Sword, Eye } from \"lucide-react\";\nimport { ENHANCED_MAGIC_SPELLS, calculateSpellSoulCost } from \"@/lib/enhanced-magic-system\";\n\ninterface EnhancedMagicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  onCastSpell?: (spellName: string, soulCost: number) => void;\n}\n\nconst typeIcons = {\n  enchantment: Wand2,\n  combat: Sword,\n  healing: Heart,\n  weather: Cloud,\n  curse: Skull,\n  summoning: Eye\n};\n\nconst typeColors = {\n  enchantment: \"bg-purple-600\",\n  combat: \"bg-red-600\", \n  healing: \"bg-green-600\",\n  weather: \"bg-blue-600\",\n  curse: \"bg-black\",\n  summoning: \"bg-orange-600\"\n};\n\nexport default function EnhancedMagicModal({ \n  isOpen, \n  onClose, \n  character,\n  onCastSpell \n}: EnhancedMagicModalProps) {\n  const [selectedType, setSelectedType] = useState<string>(\"enchantment\");\n\n  if (!character.isAnimus) {\n    return (\n      <Dialog open={isOpen} onOpenChange={onClose}>\n        <DialogContent className=\"max-w-md bg-black/90 border-purple-500/30\">\n          <DialogHeader>\n            <DialogTitle className=\"text-purple-300\">Magic Denied</DialogTitle>\n            <DialogDescription className=\"text-purple-200\">\n              Only animus dragons can cast soul magic. Your character lacks this rare and dangerous gift.\n            </DialogDescription>\n          </DialogHeader>\n          <Button onClick={onClose} className=\"bg-purple-600 hover:bg-purple-700\">\n            Close\n          </Button>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n\n  const spellsByType = ENHANCED_MAGIC_SPELLS.reduce((acc, spell) => {\n    if (!acc[spell.type]) acc[spell.type] = [];\n    acc[spell.type].push(spell);\n    return acc;\n  }, {} as Record<string, typeof ENHANCED_MAGIC_SPELLS>);\n\n  const handleCastSpell = (spellName: string) => {\n    const spell = ENHANCED_MAGIC_SPELLS.find(s => s.name === spellName);\n    if (spell && onCastSpell) {\n      const soulCost = calculateSpellSoulCost(spell);\n      onCastSpell(spellName, soulCost);\n    }\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto bg-black/90 border-purple-500/30\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-2xl text-purple-300 flex items-center\">\n            <Zap className=\"w-6 h-6 mr-2 text-red-400\" />\n            Animus Magic Grimoire\n          </DialogTitle>\n          <DialogDescription className=\"text-purple-200\">\n            Channel your soul's power to reshape reality itself. Each spell costs a fragment of your very essence.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Soul Status Warning */}\n        <div className=\"bg-red-900/30 border border-red-500/50 rounded-lg p-4 mb-4\">\n          <div className=\"flex items-center mb-2\">\n            <Skull className=\"w-5 h-5 mr-2 text-red-400\" />\n            <span className=\"font-semibold text-red-300\">Soul Integrity: {character.soulPercentage}%</span>\n          </div>\n          <p className=\"text-sm text-red-200\">\n            Corruption Stage: <Badge variant=\"destructive\">{character.soulCorruptionStage}</Badge>\n          </p>\n          {character.soulPercentage < 50 && (\n            <p className=\"text-xs text-red-300 mt-2\">\n              ⚠️ Your soul is heavily corrupted. Magic use is increasingly dangerous.\n            </p>\n          )}\n        </div>\n\n        <Tabs value={selectedType} onValueChange={setSelectedType}>\n          <TabsList className=\"grid w-full grid-cols-6 bg-black/50\">\n            {Object.keys(spellsByType).map(type => {\n              const Icon = typeIcons[type as keyof typeof typeIcons];\n              return (\n                <TabsTrigger \n                  key={type} \n                  value={type}\n                  className=\"flex flex-col items-center p-2 data-[state=active]:bg-purple-600\"\n                >\n                  <Icon className=\"w-4 h-4 mb-1\" />\n                  <span className=\"text-xs capitalize\">{type}</span>\n                </TabsTrigger>\n              );\n            })}\n          </TabsList>\n\n          {Object.entries(spellsByType).map(([type, spells]) => (\n            <TabsContent key={type} value={type} className=\"space-y-4\">\n              <div className=\"grid gap-4\">\n                {spells.map((spell) => {\n                  const Icon = typeIcons[spell.type as keyof typeof typeIcons];\n                  const canCast = character.soulPercentage >= spell.soulCost[0];\n                  \n                  return (\n                    <Card \n                      key={spell.name}\n                      className={`bg-black/40 border-purple-500/30 ${\n                        !canCast ? 'opacity-50' : 'hover:bg-purple-500/10'\n                      }`}\n                    >\n                      <CardHeader className=\"pb-3\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className={`p-2 rounded-full mr-3 ${typeColors[spell.type as keyof typeof typeColors]}`}>\n                              <Icon className=\"w-4 h-4 text-white\" />\n                            </div>\n                            <div>\n                              <CardTitle className=\"text-lg text-purple-300\">\n                                {spell.name}\n                              </CardTitle>\n                              <div className=\"flex items-center space-x-2 mt-1\">\n                                <Badge \n                                  variant={spell.category === 'catastrophic' ? 'destructive' : 'secondary'}\n                                  className=\"text-xs\"\n                                >\n                                  {spell.category}\n                                </Badge>\n                                <span className=\"text-sm text-slate-400\">\n                                  Soul Cost: {spell.soulCost[0]}-{spell.soulCost[1]}%\n                                </span>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <Button\n                            onClick={() => handleCastSpell(spell.name)}\n                            disabled={!canCast}\n                            variant={spell.category === 'catastrophic' ? 'destructive' : 'default'}\n                            size=\"sm\"\n                          >\n                            Cast Spell\n                          </Button>\n                        </div>\n                      </CardHeader>\n                      \n                      <CardContent>\n                        <p className=\"text-purple-200 mb-3\">{spell.description}</p>\n                        \n                        <div className=\"space-y-2\">\n                          <h4 className=\"font-semibold text-purple-300 text-sm\">Possible Effects:</h4>\n                          <ul className=\"space-y-1\">\n                            {spell.examples.map((example, index) => (\n                              <li key={index} className=\"text-sm text-slate-300 flex items-start\">\n                                <span className=\"text-purple-400 mr-2\">•</span>\n                                {example}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                        \n                        {spell.category === 'catastrophic' && (\n                          <div className=\"mt-3 p-2 bg-red-900/30 border border-red-500/50 rounded\">\n                            <p className=\"text-xs text-red-300 flex items-center\">\n                              <Skull className=\"w-3 h-3 mr-1\" />\n                              WARNING: Catastrophic magic may completely corrupt your soul\n                            </p>\n                          </div>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </TabsContent>\n          ))}\n        </Tabs>\n\n        <div className=\"mt-6 p-4 bg-slate-800/50 rounded-lg border border-slate-600\">\n          <h4 className=\"font-semibold text-purple-300 mb-2\">Remember:</h4>\n          <ul className=\"text-sm text-slate-300 space-y-1\">\n            <li>• Each spell permanently removes soul fragments</li>\n            <li>• Higher-tier magic carries exponentially greater risks</li>\n            <li>• Soul corruption changes your personality and choices</li>\n            <li>• At 0% soul, the AI takes complete control of your character</li>\n          </ul>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9203},"client/src/components/gameplay-area.tsx":{"content":"import { Character, GameData, Choice } from \"@shared/schema\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Wand2, Package, SkipForward, Eye, Brain, Sparkles, Zap } from \"lucide-react\";\n\ninterface GameplayAreaProps {\n  character: Character;\n  gameData: GameData;\n  onChoice: (choice: Choice) => void;\n  onShowMagic: () => void;\n  onShowSpecialPower: (powerType: 'prophecy' | 'mindreading' | 'future') => void;\n  onShowTribalPowers: () => void;\n  onCustomAction: () => void;\n  isProcessing: boolean;\n}\n\nexport default function GameplayArea({\n  character,\n  gameData,\n  onChoice,\n  onShowMagic,\n  onShowSpecialPower,\n  onShowTribalPowers,\n  onCustomAction,\n  isProcessing,\n}: GameplayAreaProps) {\n  const scenario = gameData.currentScenario;\n\n  const getChoiceButtonColor = (choice: Choice, index: number) => {\n    if (choice.corruption) {\n      return \"bg-red-900/50 hover:bg-red-900/70 border-red-600/30 text-red-300\";\n    }\n    if (choice.soulCost > 10) {\n      return \"bg-orange-900/50 hover:bg-orange-900/70 border-orange-600/30\";\n    }\n    if (choice.soulCost > 0) {\n      return \"bg-yellow-900/50 hover:bg-yellow-900/70 border-yellow-600/30\";\n    }\n    return \"bg-black/50 hover:bg-purple-500/20 border-purple-500/30\";\n  };\n\n  return (\n    <div className=\"lg:col-span-2\">\n      <Card className=\"bg-black/40 backdrop-blur-sm border-purple-500/30 h-full flex flex-col\">\n        {/* Header */}\n        <div className=\"border-b border-purple-500/30 p-4\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h3 className=\"font-fantasy text-xl font-semibold text-purple-300\">\n                {gameData.location}\n              </h3>\n              <p className=\"text-sm text-purple-200\">\n                Day {Math.floor(gameData.turn / 3)} • {gameData.timeInfo}\n              </p>\n            </div>\n            <div className=\"text-right\">\n              <div className=\"text-sm text-slate-400\">Turn</div>\n              <div className=\"font-bold text-lg\">{gameData.turn}</div>\n            </div>\n          </div>\n        </div>\n\n        {/* Narrative Display */}\n        <div className=\"flex-1 p-6 overflow-y-auto\">\n          <div className=\"narrative-text font-narrative text-base leading-relaxed\">\n            {scenario.narrativeText.map((paragraph, index) => (\n              <p\n                key={index}\n                className=\"mb-4\"\n                dangerouslySetInnerHTML={{\n                  __html: paragraph\n                    .replace(/\\*([^*]+)\\*/g, '<em>$1</em>')\n                    .replace(/\\*\\*([^*]+)\\*\\*/g, '<strong>$1</strong>')\n                }}\n              />\n            ))}\n\n            {scenario.type === 'magical' && (\n              <div className=\"bg-black/50 border-l-4 border-purple-400 p-4 rounded-r-lg mb-6\">\n                <p className=\"font-semibold text-purple-300 mb-2\">Current Scenario:</p>\n                <p>{scenario.description}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* Choice Selection Area */}\n        <div className=\"border-t border-purple-500/30 p-6\">\n          {character.isAIControlled ? (\n            <div className=\"bg-red-900/50 border border-red-500/50 rounded-lg p-4 mb-4\">\n              <h4 className=\"font-fantasy text-lg font-semibold text-red-300 mb-2 flex items-center\">\n                <Eye className=\"w-5 h-5 mr-2 animate-pulse\" />\n                AI Controlling Your Dragon\n              </h4>\n              <p className=\"text-red-200 text-sm\">\n                Your corrupted dragon is now under AI control. Watch as evil choices are made automatically...\n              </p>\n            </div>\n          ) : (\n            <h4 className=\"font-fantasy text-lg font-semibold text-purple-300 mb-4\">\n              Choose your action:\n            </h4>\n          )}\n\n          <div className=\"space-y-3\">\n            {scenario.choices.map((choice, index) => (\n              <Button\n                key={choice.id}\n                variant=\"ghost\"\n                className={`choice-button w-full text-left p-4 border transition-all duration-300 ${getChoiceButtonColor(choice, index)}`}\n                onClick={() => onChoice(choice)}\n                disabled={isProcessing || character.isAIControlled}\n              >\n                <div className=\"flex items-start\">\n                  <div className=\"bg-purple-400 text-black rounded-full w-6 h-6 flex items-center justify-center text-sm font-bold mr-3 mt-1\">\n                    {index + 1}\n                  </div>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium text-slate-200\">{choice.text}</div>\n                    <div className=\"text-sm text-slate-400 mt-1\">{choice.description}</div>\n                  </div>\n                </div>\n              </Button>\n            ))}\n          </div>\n\n          {/* Quick Actions Bar */}\n          {!character.isAIControlled && (\n            <div className=\"mt-6 pt-4 border-t border-purple-500/20\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n              {/* Animus Magic - Only for animus dragons */}\n              {character.isAnimus && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={onShowMagic}\n                  className=\"border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                >\n                  <Wand2 className=\"w-4 h-4 mr-1\" />\n                  Animus Magic\n                </Button>\n              )}\n              \n              {/* Special Powers - Prophecy, Mind Reading, Future Sight */}\n              {character.tribalPowers.some(power => power.toLowerCase().includes('prophecy') || power.toLowerCase().includes('future')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('prophecy')}\n                  className=\"border-blue-500/50 text-blue-400 hover:bg-blue-500/10\"\n                >\n                  <Eye className=\"w-4 h-4 mr-1\" />\n                  Prophecy\n                </Button>\n              )}\n              \n              {character.tribalPowers.some(power => power.toLowerCase().includes('mind')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('mindreading')}\n                  className=\"border-purple-500/50 text-purple-400 hover:bg-purple-500/10\"\n                >\n                  <Brain className=\"w-4 h-4 mr-1\" />\n                  Mind Reading\n                </Button>\n              )}\n              \n              {character.specialPowers.some(power => power.toLowerCase().includes('foresight') || power.toLowerCase().includes('future')) && (\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => onShowSpecialPower('future')}\n                  className=\"border-cyan-500/50 text-cyan-400 hover:bg-cyan-500/10\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-1\" />\n                  Future Sight\n                </Button>\n              )}\n              \n              {/* Tribal Powers */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onShowTribalPowers}\n                className=\"border-green-500/50 text-green-400 hover:bg-green-500/10\"\n              >\n                <Zap className=\"w-4 h-4 mr-1\" />\n                Tribal Powers\n              </Button>\n              \n              {/* Custom Action */}\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={onCustomAction}\n                className=\"border-yellow-500/50 text-yellow-400 hover:bg-yellow-500/10\"\n              >\n                <Package className=\"w-4 h-4 mr-1\" />\n                Custom Action\n              </Button>\n            </div>\n            </div>\n          )}\n        </div>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":8098},"client/src/components/magic-modal.tsx":{"content":"import { Character, MagicSpell, CustomSpell, InventoryItem } from \"@shared/schema\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Wand2, Skull, Zap, Shield, Sparkles, Package } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { ENHANCED_MAGIC_SPELLS, calculateSpellSoulCost } from \"@/lib/enhanced-magic-system\";\n\ninterface MagicModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  character: Character;\n  inventory: InventoryItem[];\n  onCastSpell: (spell: CustomSpell) => void;\n}\n\n\nexport default function MagicModal({ isOpen, onClose, character, inventory, onCastSpell }: MagicModalProps) {\n  const [activeTab, setActiveTab] = useState<\"predefined\" | \"custom\" | \"inventory\">(\"custom\");\n  const [customSpell, setCustomSpell] = useState({\n    targetObject: \"\",\n    enchantmentDescription: \"\",\n    spellType: \"enchantment\" as const\n  });\n  \n  const estimateSpellCost = () => {\n    if (!customSpell.targetObject || !customSpell.enchantmentDescription) return 0;\n    \n    const words = customSpell.enchantmentDescription.split(' ').length;\n    const complexity = words > 20 ? \"catastrophic\" : words > 10 ? \"complex\" : words > 5 ? \"moderate\" : \"simple\";\n    \n    const baseCost = {\n      simple: [1, 5],\n      moderate: [5, 15],\n      complex: [15, 30],\n      catastrophic: [30, 60]\n    }[complexity];\n    \n    const typeMultiplier = {\n      enchantment: 1,\n      healing: 0.8,\n      weather: 1.2,\n      combat: 1.1,\n      summoning: 1.3,\n      curse: 1.4\n    }[customSpell.spellType];\n    \n    return Math.floor(baseCost[1] * typeMultiplier);\n  };\n  \n  const handleCastCustomSpell = () => {\n    if (!customSpell.targetObject || !customSpell.enchantmentDescription) return;\n    \n    const spell: CustomSpell = {\n      id: `custom_${Date.now()}`,\n      targetObject: customSpell.targetObject,\n      enchantmentDescription: customSpell.enchantmentDescription,\n      estimatedSoulCost: estimateSpellCost(),\n      spellType: customSpell.spellType,\n      complexity: estimateSpellCost() > 30 ? \"catastrophic\" : estimateSpellCost() > 15 ? \"complex\" : estimateSpellCost() > 5 ? \"moderate\" : \"simple\",\n      turnCast: Date.now()\n    };\n    \n    onCastSpell(spell);\n    setCustomSpell({ targetObject: \"\", enchantmentDescription: \"\", spellType: \"enchantment\" });\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'minor':\n        return 'border-green-500/30 bg-green-500/10';\n      case 'moderate':\n        return 'border-yellow-500/30 bg-yellow-500/10';\n      case 'major':\n        return 'border-orange-500/30 bg-orange-500/10';\n      case 'catastrophic':\n        return 'border-red-500/30 bg-red-500/10';\n      default:\n        return 'border-gray-500/30 bg-gray-500/10';\n    }\n  };\n\n  const getCategoryIcon = (category: string) => {\n    switch (category) {\n      case 'minor':\n        return <Shield className=\"w-5 h-5\" />;\n      case 'moderate':\n        return <Zap className=\"w-5 h-5\" />;\n      case 'major':\n        return <Sparkles className=\"w-5 h-5\" />;\n      case 'catastrophic':\n        return <Skull className=\"w-5 h-5\" />;\n      default:\n        return <Wand2 className=\"w-5 h-5\" />;\n    }\n  };\n\n  const getCorruptionInfo = () => {\n    const stage = character.soulCorruptionStage;\n    switch (stage) {\n      case 'Normal':\n        return { text: \"Full control\", color: \"text-green-400\" };\n      case 'Frayed':\n        return { text: \"Occasional dark thoughts\", color: \"text-yellow-400\" };\n      case 'Twisted':\n        return { text: \"Partial AI control\", color: \"text-orange-400\" };\n      case 'Broken':\n        return { text: \"Mostly corrupted\", color: \"text-red-400\" };\n    }\n  };\n\n  const corruptionInfo = getCorruptionInfo();\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] bg-black/90 border-purple-500/50 text-slate-100 overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"font-fantasy text-2xl font-bold text-purple-300 flex items-center\">\n            <Wand2 className=\"mr-3\" />\n            Animus Magic Spells\n          </DialogTitle>\n          <DialogDescription className=\"text-purple-200\">\n            Understanding the cost of power. Each spell category represents increasing corruption to your soul.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Tab Navigation */}\n        <div className=\"flex space-x-4 mb-6\">\n          <Button \n            variant={activeTab === \"custom\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"custom\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Sparkles className=\"w-4 h-4\" />\n            Cast Custom Spell\n          </Button>\n          <Button \n            variant={activeTab === \"predefined\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"predefined\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Wand2 className=\"w-4 h-4\" />\n            Spell Examples\n          </Button>\n          <Button \n            variant={activeTab === \"inventory\" ? \"default\" : \"outline\"}\n            onClick={() => setActiveTab(\"inventory\")}\n            className=\"flex items-center gap-2\"\n          >\n            <Package className=\"w-4 h-4\" />\n            Inventory ({inventory.length})\n          </Button>\n        </div>\n\n        {/* Custom Spell Casting */}\n        {activeTab === \"custom\" && (\n          <div className=\"space-y-6\">\n            <Card className=\"border-purple-500/30 bg-purple-500/10\">\n              <CardHeader>\n                <CardTitle className=\"text-purple-300\">Create Your Own Animus Spell</CardTitle>\n                <DialogDescription className=\"text-purple-200\">\n                  Describe what object you want to enchant and what you want it to do. Be creative!\n                </DialogDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"target-object\" className=\"text-slate-300\">What do you want to enchant?</Label>\n                  <Input\n                    id=\"target-object\"\n                    placeholder=\"e.g., a sword, a ring, a cloak, the weather, an enemy...\"\n                    value={customSpell.targetObject}\n                    onChange={(e) => setCustomSpell({...customSpell, targetObject: e.target.value})}\n                    className=\"bg-black/50 border-purple-400/30 text-slate-100\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"enchantment\" className=\"text-slate-300\">Describe the enchantment:</Label>\n                  <Input\n                    id=\"enchantment\"\n                    placeholder=\"e.g., to cut through any material, to make me invisible, to summon lightning...\"\n                    value={customSpell.enchantmentDescription}\n                    onChange={(e) => setCustomSpell({...customSpell, enchantmentDescription: e.target.value})}\n                    className=\"bg-black/50 border-purple-400/30 text-slate-100\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"spell-type\" className=\"text-slate-300\">Spell Type:</Label>\n                  <Select value={customSpell.spellType} onValueChange={(value: any) => setCustomSpell({...customSpell, spellType: value})}>\n                    <SelectTrigger className=\"bg-black/50 border-purple-400/30 text-slate-100\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"enchantment\">Enchantment</SelectItem>\n                      <SelectItem value=\"combat\">Combat</SelectItem>\n                      <SelectItem value=\"healing\">Healing</SelectItem>\n                      <SelectItem value=\"weather\">Weather</SelectItem>\n                      <SelectItem value=\"curse\">Curse</SelectItem>\n                      <SelectItem value=\"summoning\">Summoning</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"bg-black/30 p-4 rounded border border-yellow-400/30\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                    <span className=\"text-yellow-300 font-semibold\">Estimated Soul Cost:</span>\n                    <span className=\"text-yellow-300 font-bold text-lg\">{estimateSpellCost()}%</span>\n                  </div>\n                  <p className=\"text-xs text-yellow-200\">\n                    More complex descriptions and dangerous spell types cost more soul.\n                  </p>\n                </div>\n                \n                <Button \n                  onClick={handleCastCustomSpell}\n                  disabled={!customSpell.targetObject || !customSpell.enchantmentDescription || character.soulPercentage < estimateSpellCost()}\n                  className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                >\n                  <Sparkles className=\"w-4 h-4 mr-2\" />\n                  Cast Spell ({estimateSpellCost()}% soul cost)\n                </Button>\n              </CardContent>\n            </Card>\n            \n            {/* Soul Status */}\n            <Card className=\"border-purple-500/30 bg-purple-500/10\">\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"flex items-center gap-2 text-lg text-purple-400\">\n                  <Skull />\n                  Your Soul Status\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-slate-300\">Current Purity:</span>\n                    <span className=\"font-bold\">{character.soulPercentage}%</span>\n                  </div>\n                  <div className=\"flex justify-between items-center\">\n                    <span className=\"text-slate-300\">Corruption Stage:</span>\n                    <span className={`font-semibold ${corruptionInfo.color}`}>\n                      {character.soulCorruptionStage}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-slate-400 mt-3 space-y-1\">\n                    <div>• Normal (75-100%): Full control over choices</div>\n                    <div>• Frayed (50-74%): Occasional dark thoughts</div>\n                    <div>• Twisted (25-49%): AI may override decisions</div>\n                    <div>• Broken (0-24%): Mostly AI controlled</div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n        \n        {/* Predefined Spell Examples */}\n        {activeTab === \"predefined\" && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            {ENHANCED_MAGIC_SPELLS.slice(0, 6).map((spell) => (\n              <Card key={spell.name} className={`${getCategoryColor(spell.category)} border`}>\n                <CardHeader className=\"pb-3\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    {getCategoryIcon(spell.category)}\n                    {spell.name}\n                    <Badge\n                      variant=\"outline\"\n                      className={`ml-auto ${\n                        spell.category === 'minor'\n                          ? 'border-green-400 text-green-400'\n                          : spell.category === 'moderate'\n                          ? 'border-yellow-400 text-yellow-400'\n                          : spell.category === 'major'\n                          ? 'border-orange-400 text-orange-400'\n                          : 'border-red-400 text-red-400'\n                      }`}\n                    >\n                      {spell.soulCost[0]}-{spell.soulCost[1]}% soul\n                    </Badge>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-sm text-slate-300 mb-3\">{spell.description}</p>\n                  <ul className=\"text-sm space-y-1 text-slate-300\">\n                    {spell.examples.slice(0, 3).map((example, index) => (\n                      <li key={index}>• {example}</li>\n                    ))}\n                  </ul>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n        \n        {/* Inventory */}\n        {activeTab === \"inventory\" && (\n          <div className=\"space-y-4\">\n            {inventory.length === 0 ? (\n              <Card className=\"border-gray-500/30 bg-gray-500/10\">\n                <CardContent className=\"pt-6 text-center\">\n                  <Package className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\n                  <p className=\"text-slate-300\">Your inventory is empty.</p>\n                  <p className=\"text-slate-400 text-sm\">Create enchanted objects to add them to your inventory.</p>\n                </CardContent>\n              </Card>\n            ) : (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {inventory.map((item) => (\n                  <Card key={item.id} className=\"border-blue-500/30 bg-blue-500/10\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"flex items-center gap-2 text-lg text-blue-300\">\n                        <Package className=\"w-5 h-5\" />\n                        {item.name}\n                        <Badge variant=\"outline\" className=\"ml-auto border-blue-400 text-blue-400\">\n                          {item.type.replace('_', ' ')}\n                        </Badge>\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-sm text-slate-300 mb-3\">{item.description}</p>\n                      {item.enchantments.length > 0 && (\n                        <div>\n                          <p className=\"text-xs text-blue-300 font-semibold mb-1\">Enchantments:</p>\n                          <ul className=\"text-xs space-y-1 text-slate-300\">\n                            {item.enchantments.map((enchantment, index) => (\n                              <li key={index}>• {enchantment}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      )}\n                      {item.soulCostToCreate && (\n                        <p className=\"text-xs text-slate-400 mt-2\">\n                          Soul cost to create: {item.soulCostToCreate}%\n                        </p>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        <div className=\"bg-black/50 border border-purple-400/30 rounded-lg p-4\">\n          <h4 className=\"font-semibold text-purple-300 mb-2 flex items-center\">\n            <Skull className=\"w-4 h-4 mr-2\" />\n            Warning: The Price of Power\n          </h4>\n          <p className=\"text-sm text-purple-200\">\n            Every use of animus magic corrupts your soul. As your purity decreases, you will lose control\n            over your choices. The game will begin making increasingly dark decisions for you. At 0% purity,\n            you become a villain that others must stop.\n          </p>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":15914},"client/src/components/sanity-bar.tsx":{"content":"import { Progress } from \"@/components/ui/progress\";\nimport { Brain, AlertTriangle } from \"lucide-react\";\n\ninterface SanityBarProps {\n  sanityPercentage: number;\n  className?: string;\n}\n\nexport default function SanityBar({ sanityPercentage, className = \"\" }: SanityBarProps) {\n  const getSanityColor = (sanity: number) => {\n    if (sanity >= 70) return \"bg-blue-500\";\n    if (sanity >= 50) return \"bg-yellow-500\";\n    if (sanity >= 30) return \"bg-orange-500\";\n    return \"bg-red-500\";\n  };\n\n  const getSanityLabel = (sanity: number) => {\n    if (sanity >= 70) return \"Stable\";\n    if (sanity >= 50) return \"Stressed\";\n    if (sanity >= 30) return \"Unstable\";\n    if (sanity >= 10) return \"Fragmented\";\n    return \"Breaking\";\n  };\n\n  const getSanityDescription = (sanity: number) => {\n    if (sanity >= 70) return \"Your mind is clear and focused.\";\n    if (sanity >= 50) return \"You feel the weight of knowledge and power.\";\n    if (sanity >= 30) return \"Reality seems less certain than before.\";\n    if (sanity >= 10) return \"You struggle to distinguish truth from delusion.\";\n    return \"Your grip on reality is slipping away.\";\n  };\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center gap-2\">\n          <Brain className=\"w-4 h-4 text-blue-400\" />\n          <span className=\"text-sm font-medium text-purple-200\">\n            Sanity: {getSanityLabel(sanityPercentage)}\n          </span>\n        </div>\n        <span className=\"text-sm text-purple-300\">\n          {Math.round(sanityPercentage)}%\n        </span>\n      </div>\n      \n      <div className=\"relative\">\n        <Progress \n          value={sanityPercentage} \n          className=\"h-3 bg-purple-900/50\" \n        />\n        <div \n          className={`absolute top-0 left-0 h-3 rounded-full transition-all duration-300 ${getSanityColor(sanityPercentage)}`}\n          style={{ width: `${sanityPercentage}%` }}\n        />\n      </div>\n      \n      <p className=\"text-xs text-purple-300\">\n        {getSanityDescription(sanityPercentage)}\n      </p>\n      \n      {sanityPercentage <= 20 && (\n        <div className=\"flex items-center gap-2 text-red-400 text-xs\">\n          <AlertTriangle className=\"w-3 h-3\" />\n          <span>Warning: Mental breakdown imminent!</span>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":2372},"client/src/components/tribal-powers-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { Zap, Eye, Flame, Droplets, Snowflake, Leaf, Moon, Sparkles } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface TribalPowersModalProps {\n  character: Character;\n  currentScenario?: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onUsePower: (power: string, scenario?: string) => void;\n}\n\nconst POWER_ICONS = {\n  \"Fire resistance\": Flame,\n  \"Mud camouflage\": Eye,\n  \"Enhanced strength when warm\": Zap,\n  \"Venomous tail barb\": Zap,\n  \"Desert survival\": Flame,\n  \"Heat resistance\": Flame,\n  \"Superior flight speed\": Sparkles,\n  \"Fire breathing\": Flame,\n  \"High altitude adaptation\": Sparkles,\n  \"Underwater breathing\": Droplets,\n  \"Bioluminescent scales\": Sparkles,\n  \"Deep sea pressure resistance\": Droplets,\n  \"Frost breath\": Snowflake,\n  \"Cold immunity\": Snowflake,\n  \"Serrated claws\": Zap,\n  \"Color-changing scales\": Sparkles,\n  \"Acidic venom\": Zap,\n  \"Prehensile tail\": Zap,\n  \"Future sight\": Moon,\n  \"Mind reading\": Eye,\n  \"Silk production\": Sparkles,\n  \"Metamorphosis\": Sparkles,\n  \"Enhanced agility\": Zap,\n  \"Paralytic stinger\": Zap,\n  \"Hive mind connection\": Eye,\n  \"Toxic breath\": Zap,\n  \"Plant manipulation\": Leaf,\n  \"Leaf speak\": Leaf,\n  \"Photosynthesis healing\": Leaf,\n};\n\nexport default function TribalPowersModal({ character, currentScenario, isOpen, onClose, onUsePower }: TribalPowersModalProps) {\n  const [selectedPower, setSelectedPower] = useState<string | null>(null);\n  const [powerScenarios, setPowerScenarios] = useState<string[]>([]);\n  const [aiResponse, setAiResponse] = useState<string | null>(null);\n\n  const allPowers = [...character.tribalPowers, ...character.specialPowers];\n\n  const getPowerIcon = (power: string) => {\n    const IconComponent = POWER_ICONS[power as keyof typeof POWER_ICONS];\n    return IconComponent ? <IconComponent className=\"w-4 h-4\" /> : <Zap className=\"w-4 h-4\" />;\n  };\n\n  const handlePowerSelect = (power: string) => {\n    setSelectedPower(power);\n    const powerType = determinePowerType(power);\n    const scenarios = MockAIService.generatePowerUsageOptions(powerType, { \n      turn: Math.floor(Math.random() * 100),\n      currentSituation: currentScenario || \"general situation\",\n      powerName: power\n    });\n    setPowerScenarios(scenarios);\n    setAiResponse(null);\n  };\n\n  const handleUsePowerWithScenario = (scenario: string) => {\n    const response = MockAIService.generateRandomEvent(character, { location: currentScenario });\n    setAiResponse(response.content);\n    onUsePower(selectedPower!, scenario);\n  };\n\n  const handleUseVisionPower = (power: string) => {\n    if (power.toLowerCase().includes('future') || power.toLowerCase().includes('prophecy')) {\n      const prophecy = MockAIService.generateProphecy(character, { turn: Math.random() * 100 });\n      setAiResponse(prophecy.content);\n    } else if (power.toLowerCase().includes('mind')) {\n      const vision = MockAIService.generateVision(character, { turn: Math.random() * 100 });\n      setAiResponse(vision.content);\n    }\n    onUsePower(power);\n  };\n\n  const determinePowerType = (power: string): string => {\n    const powerLower = power.toLowerCase();\n    if (powerLower.includes('fire') || powerLower.includes('flame') || powerLower.includes('breath')) return 'fire';\n    if (powerLower.includes('ice') || powerLower.includes('frost') || powerLower.includes('cold')) return 'ice';\n    if (powerLower.includes('water') || powerLower.includes('sea') || powerLower.includes('underwater')) return 'water';\n    if (powerLower.includes('earth') || powerLower.includes('mud')) return 'earth';\n    if (powerLower.includes('electric') || powerLower.includes('lightning')) return 'electricity';\n    if (powerLower.includes('mind')) return 'mind_reading';\n    if (powerLower.includes('future') || powerLower.includes('prophecy')) return 'prophecy';\n    if (powerLower.includes('camouflage') || powerLower.includes('color')) return 'camouflage';\n    return 'fire';\n  };\n\n  const resetModal = () => {\n    setSelectedPower(null);\n    setPowerScenarios([]);\n    setAiResponse(null);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) { resetModal(); onClose(); } }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-purple-100\">\n            {character.hybridTribes ? \"Hybrid\" : character.tribe} Powers & Abilities\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          {!selectedPower ? (\n            <>\n              {/* Tribal Powers */}\n              {character.tribalPowers.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-purple-200 mb-3\">Tribal Powers</h3>\n                  <div className=\"space-y-3\">\n                    {character.tribalPowers.map((power, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-purple-900/30 rounded-lg\">\n                        <div className=\"flex items-center\">\n                          {getPowerIcon(power)}\n                          <span className=\"ml-3 font-medium text-purple-100\">{power}</span>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          {(power.toLowerCase().includes('future') || power.toLowerCase().includes('mind') || power.toLowerCase().includes('prophecy')) && (\n                            <Button\n                              size=\"sm\"\n                              onClick={() => handleUseVisionPower(power)}\n                              className=\"bg-blue-600 hover:bg-blue-700\"\n                            >\n                              <Eye className=\"w-3 h-3 mr-1\" />\n                              Vision\n                            </Button>\n                          )}\n                          <Button\n                            size=\"sm\"\n                            onClick={() => handlePowerSelect(power)}\n                            className=\"bg-purple-600 hover:bg-purple-700\"\n                          >\n                            <Sparkles className=\"w-3 h-3 mr-1\" />\n                            Use\n                          </Button>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Special Powers */}\n              {character.specialPowers.length > 0 && (\n                <div>\n                  <h3 className=\"text-lg font-semibold text-purple-200 mb-3\">Special Abilities</h3>\n                  <div className=\"space-y-3\">\n                    {character.specialPowers.map((power, index) => (\n                      <div key={index} className=\"flex items-center justify-between p-3 bg-blue-900/30 rounded-lg\">\n                        <div className=\"flex items-center\">\n                          {getPowerIcon(power)}\n                          <span className=\"ml-3 font-medium text-blue-100\">{power}</span>\n                          <Badge variant=\"outline\" className=\"ml-2 text-xs text-amber-400 border-amber-400\">\n                            Rare\n                          </Badge>\n                        </div>\n                        <Button\n                          size=\"sm\"\n                          onClick={() => handlePowerSelect(power)}\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                        >\n                          <Sparkles className=\"w-3 h-3 mr-1\" />\n                          Use\n                        </Button>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* No Powers */}\n              {allPowers.length === 0 && (\n                <div className=\"text-center py-8 text-purple-300\">\n                  <p>You have not yet manifested any special powers.</p>\n                  <p className=\"text-sm mt-2\">Powers may develop as you grow and face challenges.</p>\n                </div>\n              )}\n\n              {/* Animus Warning */}\n              {character.isAnimus && (\n                <div className=\"mt-6 p-4 bg-red-900/30 border border-red-700 rounded-lg\">\n                  <p className=\"text-red-200 text-sm\">\n                    <strong>Animus Warning:</strong> Your animus magic is far more powerful than these tribal abilities, \n                    but remember - every spell costs part of your soul.\n                  </p>\n                </div>\n              )}\n            </>\n          ) : (\n            /* Power Usage Scenarios */\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <h4 className=\"font-semibold text-purple-300 flex items-center\">\n                  {getPowerIcon(selectedPower)}\n                  <span className=\"ml-2\">Using: {selectedPower}</span>\n                </h4>\n                <Button size=\"sm\" variant=\"ghost\" onClick={resetModal}>Back</Button>\n              </div>\n              \n              <div className=\"space-y-3\">\n                <p className=\"text-sm text-slate-300\">Choose how you want to use this power:</p>\n                {powerScenarios.map((scenario, index) => (\n                  <div \n                    key={index} \n                    className=\"p-3 bg-black/30 rounded-lg border border-purple-500/30 hover:border-purple-400 cursor-pointer transition-colors\"\n                    onClick={() => handleUsePowerWithScenario(scenario)}\n                  >\n                    <p className=\"text-sm text-slate-200\">{scenario}</p>\n                  </div>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* AI Response */}\n          {aiResponse && (\n            <div className=\"mt-4 p-4 bg-gradient-to-r from-purple-900/50 to-blue-900/50 rounded-lg border border-purple-500/30\">\n              <div className=\"flex items-center mb-2\">\n                <Sparkles className=\"w-4 h-4 text-purple-400 mr-2\" />\n                <h4 className=\"font-semibold text-purple-300\">Mystical Vision</h4>\n              </div>\n              <p className=\"text-sm text-slate-200 italic\">{aiResponse}</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={() => { resetModal(); onClose(); }} variant=\"outline\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10737},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/ai-dungeon-master.ts":{"content":"import { Character, GameData, Scenario, Choice, PoliticalEvent, WarStatus, ExplorationEvent, InventoryItem } from \"@shared/schema\";\n\nexport class AIDungeonMaster {\n  // Comprehensive animus filtering utility\n  static filterAnimusContent(text: string, character: Character): string {\n    if (character.isAnimus) return text;\n    \n    // Replace animus-specific references with alternatives\n    return text\n      .replace(/animus magic/gi, \"natural abilities\")\n      .replace(/animus power/gi, \"special abilities\")\n      .replace(/soul cost/gi, \"energy cost\")\n      .replace(/soul corruption/gi, \"mental strain\")\n      .replace(/enchant/gi, \"enhance\")\n      .replace(/magical manipulation/gi, \"natural influence\")\n      .replace(/force.*with.*magic/gi, \"use persuasion\");\n  }\n\n  // Dynamic scenario generation categories\n  private static scenarioTypes = [\n    \"moral_dilemma\", \"random_disaster\", \"tribal_politics\", \"romance_encounter\", \n    \"exploration_discovery\", \"animus_temptation\", \"war_conflict\", \"social_interaction\",\n    \"mystery_event\", \"magical_phenomenon\", \"family_drama\", \"prophecy_vision\"\n  ];\n\n  private static randomElements = {\n    locations: [\n      \"Jade Mountain Academy\", \"Queen's Palace\", \"Ancient Ruins\", \"Tribal Border\",\n      \"Mysterious Cave\", \"Sacred Grove\", \"War Camp\", \"Peaceful Village\",\n      \"Abandoned Castle\", \"Underground Tunnels\", \"Mountain Peak\", \"Desert Oasis\"\n    ],\n    weather: [\n      \"thunderstorm brewing\", \"eerily calm\", \"swirling mists\", \"blazing hot\",\n      \"freezing cold\", \"perfect clear skies\", \"strange aurora\", \"unnatural darkness\"\n    ],\n    timeOfDay: [\n      \"dawn breaking\", \"high noon\", \"sunset\", \"midnight\", \"pre-dawn\", \"twilight\"\n    ],\n    characters: [\n      \"mysterious stranger\", \"old prophecy keeper\", \"young dragonet\", \"tribal leader\",\n      \"wounded warrior\", \"wise elder\", \"suspicious merchant\", \"lost traveler\"\n    ],\n    objects: [\n      \"glowing scroll\", \"ancient artifact\", \"magical gem\", \"cursed weapon\",\n      \"prophetic mirror\", \"talking statue\", \"enchanted book\", \"mysterious egg\"\n    ]\n  };\n\n  static generateRandomScenario(character: Character, gameData: GameData): Scenario {\n    // Filter scenario types based on character abilities\n    let availableScenarios = this.scenarioTypes.filter(type => {\n      // Don't show animus scenarios to non-animus dragons\n      if (type === \"animus_temptation\" && !character.isAnimus) {\n        return false;\n      }\n      return true;\n    });\n\n    const scenarioType = availableScenarios[Math.floor(Math.random() * availableScenarios.length)];\n    \n    switch (scenarioType) {\n      case \"moral_dilemma\":\n        return this.generateMoralDilemma(character, gameData);\n      case \"random_disaster\":\n        return this.generateRandomDisaster(character, gameData);\n      case \"tribal_politics\":\n        return this.generateTribalPoliticsScenario(character, gameData);\n      case \"romance_encounter\":\n        return this.generateRomanceEncounter(character, gameData);\n      case \"exploration_discovery\":\n        return this.generateExplorationScenario(character, gameData);\n      case \"animus_temptation\":\n        return this.generateAnimusTemptationScenario(character, gameData);\n      case \"war_conflict\":\n        return this.generateWarScenario(character, gameData);\n      case \"social_interaction\":\n        return this.generateSocialScenario(character, gameData);\n      case \"mystery_event\":\n        return this.generateMysteryScenario(character, gameData);\n      case \"magical_phenomenon\":\n        return this.generateMagicalPhenomenon(character, gameData);\n      case \"family_drama\":\n        return this.generateFamilyDrama(character, gameData);\n      case \"prophecy_vision\":\n        return this.generateProphecyVision(character, gameData);\n      default:\n        return this.generateMoralDilemma(character, gameData);\n    }\n  }\n\n  private static getRandomElement(array: string[]): string {\n    return array[Math.floor(Math.random() * array.length)];\n  }\n  static generateMoralDilemma(character: Character, gameData: GameData): Scenario {\n    // Generate dynamic moral dilemma\n    const victim = this.getRandomElement([\"young dragonet\", \"injured elder\", \"pregnant dragon\", \"enemy soldier\", \"tribal outcast\"]);\n    const threat = this.getRandomElement([\"rockslide\", \"disease\", \"curse\", \"war wound\", \"magical poison\"]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    // Generate different solutions based on whether character is animus or not\n    const magicSolution = character.isAnimus ? this.getRandomElement([\n      \"heal them instantly with animus magic\",\n      \"enchant an object to save them\",\n      \"use magic to turn back time\",\n      \"transfer their suffering to yourself\",\n      \"create a magical barrier\"\n    ]) : this.getRandomElement([\n      \"use your tribal powers to help\",\n      \"attempt magical healing with tribal abilities\",\n      \"try to channel natural magic\",\n      \"use elemental powers to assist\",\n      \"rely on instinctual magical abilities\"\n    ]);\n    \n    const nonMagicSolution = this.getRandomElement([\n      \"try conventional healing methods\",\n      \"seek help from other dragons\",\n      \"use your tribal powers instead\",\n      \"find a natural remedy\",\n      \"attempt a risky rescue\"\n    ]);\n    \n    const moralChoice = this.getRandomElement([\n      \"leave them to their fate\",\n      \"make them prove they deserve help\",\n      \"demand payment for your aid\",\n      \"use this as a learning experience\",\n      \"find a creative compromise\"\n    ]);\n\n    const dilemmas = [\n      {\n        title: `Crisis at ${location}`,\n        setup: `During a ${weather} day at ${location}, you encounter a ${victim} suffering from ${threat}. They desperately plead for your help, but the situation is complex and morally challenging.`,\n        choice1: magicSolution,\n        choice2: nonMagicSolution,\n        choice3: moralChoice\n      }\n    ];\n\n    const dilemma = dilemmas[0]; // Use the dynamically generated dilemma\n    \n    return {\n      id: `ai_dilemma_${Date.now()}`,\n      title: dilemma.title,\n      description: \"A moral choice that will test your character\",\n      narrativeText: [dilemma.setup],\n      choices: [\n        {\n          id: \"dilemma_1\",\n          text: character.isAnimus ? dilemma.choice1 + \" (10-25% soul cost)\" : dilemma.choice1,\n          description: character.isAnimus ? \"The path of power, but at what cost?\" : \"Use your natural abilities to help\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 10 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5),\n          consequences: [\"Your choice will have lasting consequences...\"],\n          corruption: false\n        },\n        {\n          id: \"dilemma_2\", \n          text: dilemma.choice2,\n          description: \"The harder path, but perhaps the right one\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5),\n          consequences: [\"Sometimes the right choice is the hardest one...\"]\n        },\n        {\n          id: \"dilemma_3\",\n          text: dilemma.choice3,\n          description: \"A middle ground, but is it enough?\",\n          soulCost: dilemma.choice3.includes(\"enchant\") ? Math.floor(Math.random() * 8) + 3 : 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Compromise can be wisdom, or cowardice...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"afternoon\",\n      weather: \"tense\"\n    };\n  }\n\n  static generateRandomDisaster(character: Character, gameData: GameData): Scenario {\n    // Generate dynamic disaster\n    const disasterType = this.getRandomElement([\"tribal raid\", \"natural disaster\", \"magical catastrophe\", \"disease outbreak\", \"beast attack\"]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    const tribe = this.getRandomElement([\"IceWings\", \"SkyWings\", \"SandWings\", \"SeaWings\", \"MudWings\"]);\n    \n    let title, description, magicResponse, physicalResponse, escapeResponse;\n    \n    switch (disasterType) {\n      case \"tribal raid\":\n        title = `${tribe} Raid on ${location}`;\n        description = `During ${weather} conditions, ${tribe} warriors launch a surprise attack on ${location}!`;\n        magicResponse = \"Use animus magic to create powerful defenses\";\n        physicalResponse = \"Fight them with traditional combat skills\";\n        escapeResponse = \"Try to negotiate or find an escape route\";\n        break;\n      case \"natural disaster\":\n        const disaster = this.getRandomElement([\"earthquake\", \"volcanic eruption\", \"tsunami\", \"avalanche\", \"hurricane\"]);\n        title = `${disaster.charAt(0).toUpperCase() + disaster.slice(1)} at ${location}`;\n        description = `A devastating ${disaster} strikes ${location} during ${weather} conditions!`;\n        magicResponse = \"Use magic to control or stop the disaster\";\n        physicalResponse = \"Help rescue and evacuate other dragons\";\n        escapeResponse = \"Focus on protecting yourself and escape\";\n        break;\n      default:\n        title = \"Mysterious Crisis\";\n        description = `An unknown threat emerges at ${location} during ${weather} conditions.`;\n        magicResponse = \"Use animus magic to investigate and respond\";\n        physicalResponse = \"Approach the situation cautiously\";\n        escapeResponse = \"Avoid the situation entirely\";\n    }\n\n    const disasters = [\n      {\n        title,\n        description,\n        choice1: magicResponse,\n        choice2: physicalResponse,\n        choice3: escapeResponse\n      }\n    ];\n\n    const disaster = disasters[0]; // Use the dynamically generated disaster\n\n    return {\n      id: `ai_disaster_${Date.now()}`,\n      title: disaster.title,\n      description: \"A sudden crisis tests your resolve\",\n      narrativeText: [\n        disaster.description,\n        \"The situation is dire and demands immediate action. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"disaster_1\",\n          text: disaster.choice1,\n          description: \"Take direct action\",\n          soulCost: disaster.choice1.includes(\"magic\") ? Math.floor(Math.random() * 12) + 5 : 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Your brave action will be remembered...\"]\n        },\n        {\n          id: \"disaster_2\",\n          text: disaster.choice2, \n          description: \"Help others without magic\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes the hardest path is the most noble...\"]\n        },\n        {\n          id: \"disaster_3\",\n          text: disaster.choice3,\n          description: \"Look out for yourself\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Self-preservation, but at what cost to your conscience?\"],\n          corruption: true\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"crisis\",\n      weather: \"chaotic\"\n    };\n  }\n\n  static generatePersonalConsequence(character: Character): string[] {\n    const stage = character.soulCorruptionStage;\n    const consequences = [];\n\n    switch (stage) {\n      case \"Frayed\":\n        consequences.push(\"Your soul corruption manifests as sudden mood swings.\");\n        consequences.push(\"You snap at a friend without meaning to.\");\n        consequences.push(\"Other dragons notice you seem... different lately.\");\n        break;\n      case \"Twisted\":\n        consequences.push(\"The corruption darkens your thoughts constantly.\");\n        consequences.push(\"You find yourself enjoying others' misfortune.\");\n        consequences.push(\"Your friends begin to distance themselves from you.\");\n        break;\n      case \"Broken\":\n        consequences.push(\"Your soul is so damaged that cruelty feels natural.\");\n        consequences.push(\"You actively seek ways to cause pain or gain power.\");\n        consequences.push(\"The dragon you once were seems like a distant memory.\");\n        break;\n      default:\n        consequences.push(\"You maintain your moral compass for now.\");\n    }\n\n    return consequences;\n  }\n\n  static generateTribePolitics(character: Character): PoliticalEvent {\n    const politicalEvents = [\n      {\n        type: \"succession\" as const,\n        tribes: [character.tribe],\n        description: `The current ${character.tribe} queen is aging, and two of her daughters vie for the throne. Both seek your support.`,\n        consequences: \"Your choice of successor will shape your tribe's future.\"\n      },\n      {\n        type: \"civil_war\" as const,\n        tribes: [character.tribe],\n        description: `A faction within the ${character.tribe} tribe rebels against the queen's leadership, claiming she has grown weak.`,\n        consequences: \"Civil war threatens to tear your tribe apart.\"\n      },\n      {\n        type: \"queen_demand\" as const,\n        tribes: [character.tribe],\n        description: `Queen ${character.tribe === \"SandWing\" ? \"Thorn\" : \"Glacier\"} demands you use your animus magic to create a powerful artifact for the royal treasury.`,\n        consequences: \"Defying a queen's direct order carries severe penalties.\"\n      }\n    ];\n\n    return politicalEvents[Math.floor(Math.random() * politicalEvents.length)];\n  }\n\n  static generateWarEvent(character: Character): WarStatus {\n    const possibleEnemies = [\"SkyWings\", \"IceWings\", \"SandWings\", \"MudWings\"];\n    const enemy = possibleEnemies[Math.floor(Math.random() * possibleEnemies.length)];\n    \n    return {\n      isAtWar: true,\n      warringTribes: [character.tribe, enemy],\n      warCause: Math.random() < 0.5 ? \"territorial dispute\" : \"succession conflict\",\n      playerInvolvement: \"forced_fighter\"\n    };\n  }\n\n  static generateExploration(character: Character): ExplorationEvent {\n    const locations = [\n      \"Ancient NightWing ruins\",\n      \"Abandoned SkyWing palace\",\n      \"Deep underwater caves\",\n      \"Hidden RainWing sanctuary\",\n      \"Mysterious ice caverns\"\n    ];\n\n    const discoveries = [\n      { type: \"ruins\" as const, desc: \"You discover ancient dragon artifacts and mysterious carvings.\" },\n      { type: \"scroll\" as const, desc: \"A weathered scroll contains forgotten animus spells.\" },\n      { type: \"treasure\" as const, desc: \"A cache of precious gems and ancient coins.\" },\n      { type: \"enemy\" as const, desc: \"Hostile dragons have made this place their lair.\" },\n      { type: \"ally\" as const, desc: \"A lost dragon seeks your help to return home.\" }\n    ];\n\n    const location = locations[Math.floor(Math.random() * locations.length)];\n    const discovery = discoveries[Math.floor(Math.random() * discoveries.length)];\n\n    return {\n      location,\n      discovery: discovery.type,\n      description: discovery.desc,\n      consequences: [`Your discovery at ${location} will have lasting effects.`]\n    };\n  }\n\n  static generateAnimusTemptation(character: Character): Choice {\n    const temptations = [\n      {\n        text: \"Enchant this ring to make everyone love you\",\n        soulCost: 15,\n        desc: \"The easy path to popularity... but is it real?\"\n      },\n      {\n        text: \"Create a spell to eliminate all your enemies\",\n        soulCost: 25,\n        desc: \"Power to remove obstacles... permanently.\"\n      },\n      {\n        text: \"Enchant yourself to never feel pain or sadness again\",\n        soulCost: 20,\n        desc: \"Emotional numbness might seem like peace.\"\n      }\n    ];\n\n    const temptation = temptations[Math.floor(Math.random() * temptations.length)];\n\n    return {\n      id: \"ai_temptation\",\n      text: temptation.text,\n      description: temptation.desc,\n      soulCost: temptation.soulCost,\n      sanityCost: 0,\n      consequences: [\"The easy path often leads to darkness...\"],\n      corruption: true\n    };\n  }\n\n  static generateTribalPoliticsScenario(character: Character, gameData: GameData): Scenario {\n    const politicalEvent = this.generateTribePolitics(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    return {\n      id: `political_${Date.now()}`,\n      title: `${politicalEvent.type.replace('_', ' ').toUpperCase()}: ${politicalEvent.tribes.join(' vs ')}`,\n      description: \"Political turmoil threatens the stability of your tribe\",\n      narrativeText: [\n        `At ${location} during ${weather} conditions...`,\n        politicalEvent.description,\n        character.isAnimus ? \"Your position as an animus dragon makes you valuable to all sides.\" : \"Your unique abilities make you valuable to all sides.\",\n        \"How will you navigate these treacherous political waters?\"\n      ],\n      choices: [\n        {\n          id: \"political_support\",\n          text: \"Support the traditional power structure\",\n          description: \"Stand with established authority\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Your loyalty is noted by those in power...\"]\n        },\n        {\n          id: \"political_rebel\",\n          text: \"Support the rebels/challengers\",\n          description: \"Side with those seeking change\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5),\n          consequences: [\"Revolution comes with risks...\"]\n        },\n        {\n          id: \"political_neutral\",\n          text: \"Remain neutral and protect yourself\",\n          description: \"Stay out of the conflict\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Neutrality may be seen as cowardice...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"political crisis\",\n      weather: \"tense\"\n    };\n  }\n\n  static generateRomanceEncounter(character: Character, gameData: GameData): Scenario {\n    const potentialPartner = this.getRandomElement(this.randomElements.characters);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const weather = this.getRandomElement(this.randomElements.weather);\n    \n    const romanticSituations = [\n      \"approaches you with obvious romantic interest\",\n      \"asks you to be their mate during a tribal ceremony\",\n      \"confesses their feelings under the stars\",\n      \"challenges you to prove your worthiness as a partner\",\n      \"offers to share a nest with you\"\n    ];\n    \n    const situation = this.getRandomElement(romanticSituations);\n    \n    return {\n      id: `romance_${Date.now()}`,\n      title: \"Matters of the Heart\",\n      description: \"Romance blooms in unexpected places\",\n      narrativeText: [\n        `At ${location} during ${weather} conditions, a ${potentialPartner} ${situation}.`,\n        \"Your heart races as you consider how to respond.\",\n        \"This could be the beginning of something beautiful... or complicated.\"\n      ],\n      choices: [\n        {\n          id: \"romance_accept\",\n          text: \"Accept their romantic advances\",\n          description: \"Open your heart to love\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Love can bring great joy... and great vulnerability\"]\n        },\n        {\n          id: \"romance_cautious\",\n          text: \"Be cautious but interested\",\n          description: \"Take things slowly\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"A careful approach to matters of the heart\"]\n        },\n        {\n          id: \"romance_reject\",\n          text: \"Politely decline their advances\",\n          description: \"Focus on other priorities\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes the heart must wait for duty\"]\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather\n    };\n  }\n\n  static generateExplorationScenario(character: Character, gameData: GameData): Scenario {\n    const exploration = this.generateExploration(character);\n    const mysteriousObject = this.getRandomElement(this.randomElements.objects);\n    \n    return {\n      id: `exploration_${Date.now()}`,\n      title: `Discovery at ${exploration.location}`,\n      description: \"Adventure calls from unknown places\",\n      narrativeText: [\n        `While exploring ${exploration.location}, you make an unexpected discovery:`,\n        exploration.description,\n        `Among the findings, you notice a ${mysteriousObject} that seems important.`,\n        \"What do you do with this discovery?\"\n      ],\n      choices: [\n        {\n          id: \"explore_investigate\",\n          text: `Investigate the ${mysteriousObject} thoroughly`,\n          description: \"Knowledge is power, but can be dangerous\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Curiosity reveals both wonders and dangers...\"]\n        },\n        {\n          id: \"explore_magic\",\n          text: character.isAnimus ? \"Use animus magic to understand the discovery\" : \"Use your natural abilities to understand the discovery\",\n          description: character.isAnimus ? \"Magic can reveal hidden secrets\" : \"Your abilities can reveal hidden secrets\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 8) + 3 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5) + 1,\n          consequences: [\"Deeper understanding reveals truths that some would keep hidden...\"]\n        },\n        {\n          id: \"explore_leave\",\n          text: \"Leave the area undisturbed\",\n          description: \"Some things are better left alone\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Wisdom sometimes lies in restraint...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: exploration.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateAnimusTemptationScenario(character: Character, gameData: GameData): Scenario {\n    const temptation = this.generateAnimusTemptation(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `temptation_${Date.now()}`,\n      title: \"The Whisper of Power\",\n      description: \"Easy solutions call to your animus magic\",\n      narrativeText: [\n        `At ${location}, you face a situation where animus magic offers an easy solution.`,\n        \"A voice in your mind suggests a simple spell that would solve everything.\",\n        `You could ${temptation.text.toLowerCase()}, but at what cost?`\n      ],\n      choices: [\n        {\n          id: \"temptation_give_in\",\n          text: temptation.text,\n          description: temptation.description,\n          soulCost: temptation.soulCost,\n          sanityCost: 0,\n          consequences: temptation.consequences,\n          corruption: temptation.corruption\n        },\n        {\n          id: \"temptation_resist\",\n          text: \"Resist the temptation\",\n          description: \"Find a harder but more ethical solution\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Virtue is its own reward, though the path is harder...\"]\n        },\n        {\n          id: \"temptation_compromise\",\n          text: \"Find a middle ground\",\n          description: \"Use minimal magic for a partial solution\",\n          soulCost: Math.floor(temptation.soulCost / 2),\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Sometimes compromise serves both ethics and necessity...\"]\n        }\n      ],\n      type: 'magical',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateWarScenario(character: Character, gameData: GameData): Scenario {\n    const warEvent = this.generateWarEvent(character);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `war_${Date.now()}`,\n      title: `War Between ${warEvent.warringTribes.join(' and ')}`,\n      description: \"Conflict engulfs the dragon lands\",\n      narrativeText: [\n        `War has broken out between ${warEvent.warringTribes.join(' and ')} over ${warEvent.warCause}.`,\n        `The battle has reached ${location}, and you find yourself caught in the middle.`,\n        character.isAnimus ? \"As an animus dragon, both sides want you as an ally. What do you do?\" : \"Both sides want you as an ally. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"war_join\",\n          text: `Join the ${character.tribe} forces`,\n          description: \"Fight for your tribe's cause\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"War changes everyone it touches...\"]\n        },\n        {\n          id: \"war_magic\",\n          text: character.isAnimus ? \"Use animus magic to end the conflict\" : \"Use your abilities to mediate the conflict\",\n          description: character.isAnimus ? \"Force peace through magical means\" : \"Try to find a peaceful solution\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 10 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Peace through force may not be true peace...\"]\n        },\n        {\n          id: \"war_flee\",\n          text: \"Flee from the conflict\",\n          description: \"Avoid the war entirely\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Some call it cowardice, others call it wisdom...\"],\n          corruption: true\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: \"battlefield\",\n      weather: \"smoke and fire\"\n    };\n  }\n\n  static generateSocialScenario(character: Character, gameData: GameData): Scenario {\n    const socialSituation = this.getRandomElement([\n      \"tribal gathering\", \"celebration feast\", \"formal ceremony\", \"casual meeting\", \"heated argument\"\n    ]);\n    const otherDragon = this.getRandomElement(this.randomElements.characters);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `social_${Date.now()}`,\n      title: `${socialSituation} at ${location}`,\n      description: \"Social dynamics shape your reputation\",\n      narrativeText: [\n        `During a ${socialSituation} at ${location}, you encounter a ${otherDragon}.`,\n        \"The interaction could strengthen or damage your social standing.\",\n        \"How do you handle this social situation?\"\n      ],\n      choices: [\n        {\n          id: \"social_charm\",\n          text: \"Use your natural charisma\",\n          description: \"Rely on social skills\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Genuine charm opens many doors...\"]\n        },\n        {\n          id: \"social_magic\",\n          text: character.isAnimus ? \"Subtly use animus magic to influence them\" : \"Use your natural abilities to connect with them\",\n          description: character.isAnimus ? \"Magical manipulation\" : \"Natural empathy and understanding\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 5) + 2 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 2),\n          consequences: character.isAnimus ? [\"False friendship built on magic is hollow...\"] : [\"Genuine connection builds lasting relationships...\"],\n          corruption: character.isAnimus ? true : false\n        },\n        {\n          id: \"social_honest\",\n          text: \"Be completely honest and direct\",\n          description: \"Straightforward approach\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 2),\n          consequences: [\"Honesty is not always appreciated, but it is always valuable...\"]\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateMysteryScenario(character: Character, gameData: GameData): Scenario {\n    const mysteriousEvent = this.getRandomElement([\n      \"strange lights in the sky\", \"mysterious disappearances\", \"unexplained sounds\", \"time distortions\", \"reality glitches\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    const mysteriousObject = this.getRandomElement(this.randomElements.objects);\n    \n    return {\n      id: `mystery_${Date.now()}`,\n      title: `The Mystery of ${location}`,\n      description: \"Strange occurrences defy explanation\",\n      narrativeText: [\n        `At ${location}, you witness ${mysteriousEvent}.`,\n        `Near the phenomenon, you discover a ${mysteriousObject} that seems connected to the mystery.`,\n        \"The situation defies logical explanation. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"mystery_investigate\",\n          text: \"Investigate the mystery thoroughly\",\n          description: \"Seek the truth behind the phenomenon\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 4) + 1,\n          consequences: [\"Some mysteries are better left unsolved...\"]\n        },\n        {\n          id: \"mystery_magic\",\n          text: \"Use animus magic to understand the phenomenon\",\n          description: \"Magical investigation\",\n          soulCost: Math.floor(Math.random() * 10) + 5,\n          sanityCost: 0,\n          consequences: [\"Magic reveals truths that mortal minds cannot grasp...\"]\n        },\n        {\n          id: \"mystery_avoid\",\n          text: \"Avoid the area and warn others\",\n          description: \"Prudent caution\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Sometimes wisdom lies in knowing when to walk away...\"]\n        }\n      ],\n      type: 'extraordinary',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: \"unnaturally still\"\n    };\n  }\n\n  static generateMagicalPhenomenon(character: Character, gameData: GameData): Scenario {\n    const phenomenon = this.getRandomElement([\n      \"magic storm\", \"reality rift\", \"temporal anomaly\", \"dimensional portal\", \"magical plague\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `magical_${Date.now()}`,\n      title: `${phenomenon} at ${location}`,\n      description: \"Magical forces beyond comprehension\",\n      narrativeText: [\n        `A ${phenomenon} has manifested at ${location}.`,\n        \"The magical energies are chaotic and dangerous.\",\n        character.isAnimus ? \"As an animus dragon, you can sense the power involved. What do you do?\" : \"You can sense something powerful and dangerous here. What do you do?\"\n      ],\n      choices: [\n        {\n          id: \"phenomenon_absorb\",\n          text: character.isAnimus ? \"Try to absorb the magical energy\" : \"Try to resist the magical influence\",\n          description: character.isAnimus ? \"Risky but potentially powerful\" : \"Protect yourself from the dangerous energy\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 20) + 5 : 0,\n          sanityCost: Math.floor(Math.random() * 10) + 5,\n          consequences: [\"Power always comes with a price...\"]\n        },\n        {\n          id: \"phenomenon_dispel\",\n          text: character.isAnimus ? \"Use animus magic to dispel the phenomenon\" : \"Use your tribal powers to counter the phenomenon\",\n          description: \"Attempt to restore normalcy\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 15) + 8 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 8) + 2,\n          consequences: [\"Sometimes the cure is worse than the disease...\"]\n        },\n        {\n          id: \"phenomenon_study\",\n          text: \"Study the phenomenon from a safe distance\",\n          description: \"Cautious observation\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"Knowledge gained safely is knowledge kept...\"]\n        }\n      ],\n      type: 'magical',\n      location: gameData.location,\n      timeOfDay: \"time seems irrelevant\",\n      weather: \"reality flickers\"\n    };\n  }\n\n  static generateFamilyDrama(character: Character, gameData: GameData): Scenario {\n    const familyMember = this.getRandomElement([\n      \"your mother\", \"your father\", \"a sibling\", \"your mate\", \"a dragonet\"\n    ]);\n    const drama = this.getRandomElement([\n      \"reveals a dark secret\", \"asks for a dangerous favor\", \"betrays your trust\", \"falls gravely ill\", \"gets into serious trouble\"\n    ]);\n    const location = this.getRandomElement(this.randomElements.locations);\n    \n    return {\n      id: `family_${Date.now()}`,\n      title: \"Family Bonds Tested\",\n      description: \"Blood ties bring both joy and sorrow\",\n      narrativeText: [\n        `At ${location}, ${familyMember} ${drama}.`,\n        \"The situation tests the bonds of family loyalty.\",\n        \"Your response will define your relationship forever.\"\n      ],\n      choices: [\n        {\n          id: \"family_support\",\n          text: \"Support your family member unconditionally\",\n          description: \"Family comes first\",\n          soulCost: 0,\n          sanityCost: 0,\n          consequences: [\"Family loyalty is both a strength and a burden...\"]\n        },\n        {\n          id: \"family_magic\",\n          text: \"Use animus magic to help them\",\n          description: \"Magical intervention\",\n          soulCost: Math.floor(Math.random() * 12) + 5,\n          sanityCost: 0,\n          consequences: [\"Magic can heal wounds but creates new ones...\"]\n        },\n        {\n          id: \"family_distance\",\n          text: \"Distance yourself from the situation\",\n          description: \"Protect yourself first\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 8) + 3,\n          consequences: [\"Sometimes love means letting go...\"],\n          corruption: true\n        }\n      ],\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: this.getRandomElement(this.randomElements.timeOfDay),\n      weather: this.getRandomElement(this.randomElements.weather)\n    };\n  }\n\n  static generateProphecyVision(character: Character, gameData: GameData): Scenario {\n    const prophecySubject = this.getRandomElement([\n      \"the fall of a great queen\", \"a war that will consume all tribes\", \"your own dark future\", \n      \"the birth of a legendary dragon\", \"the end of animus magic\", \"a great catastrophe\"\n    ]);\n    const visionTrigger = this.getRandomElement([\n      \"a mysterious dream\", \"touching an ancient artifact\", \"a sudden flash of insight\", \n      \"a magical accident\", \"communion with spirits\"\n    ]);\n    \n    return {\n      id: `prophecy_${Date.now()}`,\n      title: \"Visions of Tomorrow\",\n      description: \"The future reveals itself in fragments\",\n      narrativeText: [\n        `Through ${visionTrigger}, you receive a prophetic vision about ${prophecySubject}.`,\n        \"The vision is vivid and disturbing, showing events that may come to pass.\",\n        \"What do you do with this glimpse into the future?\"\n      ],\n      choices: [\n        {\n          id: \"prophecy_act\",\n          text: \"Act immediately to change the future\",\n          description: \"Try to prevent or fulfill the prophecy\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Changing fate often leads to unexpected consequences...\"]\n        },\n        {\n          id: \"prophecy_magic\",\n          text: character.isAnimus ? \"Use animus magic to explore the vision further\" : \"Use your intuition to understand the vision\",\n          description: character.isAnimus ? \"Seek more details about the prophecy\" : \"Trust your natural instincts about the vision\",\n          soulCost: character.isAnimus ? Math.floor(Math.random() * 8) + 4 : 0,\n          sanityCost: character.isAnimus ? 0 : Math.floor(Math.random() * 5) + 2,\n          consequences: [\"Some knowledge comes at too high a price...\"]\n        },\n        {\n          id: \"prophecy_ignore\",\n          text: \"Ignore the vision and focus on the present\",\n          description: \"Live in the moment\",\n          soulCost: 0,\n          sanityCost: Math.floor(Math.random() * 3),\n          consequences: [\"The future will unfold as it will, regardless of prophecy...\"]\n        }\n      ],\n      type: 'prophetic',\n      location: gameData.location,\n      timeOfDay: \"vision time\",\n      weather: \"ethereal\"\n    };\n  }\n}","size_bytes":37012},"client/src/lib/character-generator.ts":{"content":"import { Character } from \"@shared/schema\";\nimport { generateHybridDragon } from \"./hybrid-generator\";\nimport { SoulCorruptionManager } from \"./enhanced-magic-system\";\nimport { MockAIService } from \"./mock-ai-service\";\n\nconst TRIBES = [\n  'NightWing', 'SkyWing', 'SeaWing', 'RainWing', 'SandWing', 'IceWing', 'MudWing',\n  'SilkWing', 'HiveWing', 'LeafWing'\n];\n\nconst DRAGON_NAMES = {\n  NightWing: ['Nightshade', 'Shadowhunter', 'Starweaver', 'Darkflame', 'Moonwhisper', 'Voidwing', 'Obsidian'],\n  SkyWing: ['Scarlet', 'Ember', 'Phoenix', 'Crimson', 'Blaze', 'Pyrite', 'Flame'],\n  SeaWing: ['Tsunami', 'Coral', 'Anemone', 'Riptide', 'Pearl', 'Current', 'Nautilus'],\n  RainWing: ['Glory', 'Kinkajou', 'Bromeliad', 'Tamarin', 'Orchid', 'Coconut', 'Mango'],\n  SandWing: ['Sunny', 'Thorn', 'Qibli', 'Ostrich', 'Jackal', 'Camel', 'Fennec'],\n  IceWing: ['Winter', 'Lynx', 'Snowfall', 'Hailstorm', 'Icicle', 'Frost', 'Arctic'],\n  MudWing: ['Clay', 'Marsh', 'Umber', 'Sora', 'Reed', 'Pheasant', 'Cattail'],\n  SilkWing: ['Blue', 'Cricket', 'Luna', 'Admiral', 'Morpho', 'Silverspot', 'Tau'],\n  HiveWing: ['Cricket', 'Hornet', 'Yellowjacket', 'Wasp', 'Cicada', 'Vinegaroon', 'Tsetse'],\n  LeafWing: ['Sundew', 'Willow', 'Hazel', 'Sequoia', 'Maple', 'Pokeweed', 'Bryony']\n};\n\nconst PERSONALITY_TRAITS = [\n  'Curious', 'Ambitious', 'Secretive', 'Brave', 'Cautious', 'Loyal', 'Independent',\n  'Compassionate', 'Analytical', 'Impulsive', 'Wise', 'Rebellious', 'Patient', 'Fierce',\n  'Gentle', 'Protective', 'Scholarly', 'Adventurous', 'Mysterious', 'Determined',\n  'Cunning', 'Forgiving', 'Vengeful', 'Optimistic', 'Pessimistic', 'Humble', 'Proud'\n];\n\nfunction randomChoice<T>(array: T[]): T {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\nfunction randomRange(min: number, max: number): number {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction generateDragonName(tribe: string): string {\n  const tribeNames = DRAGON_NAMES[tribe as keyof typeof DRAGON_NAMES] || DRAGON_NAMES.NightWing;\n  return randomChoice(tribeNames);\n}\n\n// Tribal power definitions based on the attached file\nconst TRIBAL_POWERS = {\n  MudWing: ['Fireproof (with siblings)', 'Physical strength', 'Hold breath (1 hour)'],\n  SandWing: ['Poisonous tail stinger', 'Heat resistance', 'Desert camouflage'],\n  SkyWing: ['Superior flight', 'Aerial combat mastery', 'Enhanced fire breath'],\n  SeaWing: ['Underwater breathing', 'Night vision underwater', 'Bioluminescent communication'],\n  IceWing: ['Frostbreath', 'Cold resistance', 'Armored scales', 'Combat tail spines'],\n  RainWing: ['Color-changing scales', 'Deadly venom spit', 'Prehensile tail'],\n  NightWing: ['Mind reading (rare)', 'Prophecy (rare)', 'Night camouflage'],\n  SilkWing: ['Silk production', 'Flame silk (post-metamorphosis)'],\n  HiveWing: ['Various venoms', 'Mind-control toxins', 'Fire breath', 'Resistant scales'],\n  LeafWing: ['Leafspeak (plant control)', 'Forest camouflage', 'Poison knowledge']\n};\n\nconst SPECIAL_POWERS = [\n  'Foresight', 'Enhanced Mind Reading', 'Advanced Leafspeak', \n  'FlameSilk Mastery', 'Royal Fires', 'Enhanced Prophecy'\n];\n\nfunction determineTribalPowers(tribe: string): string[] {\n  const powers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS] || [];\n  // Most dragons get all their tribal powers, some may be weaker versions\n  return [...powers];\n}\n\nfunction determineSpecialPowers(tribe: string, intelligence: number): string[] {\n  const powers: string[] = [];\n  \n  // NightWings have higher chance of mind reading/prophecy\n  if (tribe === 'NightWing') {\n    if (Math.random() < 0.3 && intelligence >= 16) powers.push('Enhanced Mind Reading');\n    if (Math.random() < 0.2 && intelligence >= 17) powers.push('Enhanced Prophecy');\n    if (Math.random() < 0.1 && intelligence >= 18) powers.push('Foresight');\n  }\n  \n  // LeafWings can have enhanced leafspeak\n  if (tribe === 'LeafWing' && Math.random() < 0.4) {\n    powers.push('Advanced Leafspeak');\n  }\n  \n  // SilkWings might develop flame silk\n  if (tribe === 'SilkWing' && Math.random() < 0.3) {\n    powers.push('FlameSilk Mastery');\n  }\n  \n  // Rare chance for any dragon to have special abilities\n  if (Math.random() < 0.05 && intelligence >= 17) {\n    powers.push(randomChoice(SPECIAL_POWERS));\n  }\n  \n  return powers;\n}\n\nexport function generateCharacter(): Character {\n  const tribe = randomChoice(TRIBES);\n  const name = generateDragonName(tribe);\n  const mother = generateDragonName(tribe);\n  const father = generateDragonName(tribe);\n  \n  // Generate 0-3 siblings\n  const siblingCount = Math.floor(Math.random() * 4);\n  const siblings: string[] = [];\n  for (let i = 0; i < siblingCount; i++) {\n    siblings.push(generateDragonName(tribe));\n  }\n  \n  // Generate 1-3 personality traits\n  const traitCount = randomRange(1, 3);\n  const traits: string[] = [];\n  const availableTraits = [...PERSONALITY_TRAITS];\n  \n  for (let i = 0; i < traitCount; i++) {\n    const traitIndex = Math.floor(Math.random() * availableTraits.length);\n    traits.push(availableTraits.splice(traitIndex, 1)[0]);\n  }\n  \n  // Generate stats\n  const intelligence = randomRange(15, 18);\n  const isAnimus = Math.random() < 0.05; // 5% chance to be animus\n  \n  // Determine powers\n  const tribalPowers = determineTribalPowers(tribe);\n  const specialPowers = determineSpecialPowers(tribe, intelligence);\n  \n  // Check for hybrid heritage first (increased chance to 25%)\n  const hybridData = generateHybridDragon();\n  const finalTribe = hybridData.hybridTribes ? hybridData.hybridTribes[0] : tribe;\n  const finalTribalPowers = hybridData.tribalPowers || tribalPowers;\n  \n  // Generate AI-enhanced traits for hybrids\n  let finalTraits = traits;\n  if (hybridData.hybridTribes && hybridData.hybridTribes.length > 1) {\n    const hybridTraits = MockAIService.generateHybridTraits(\n      hybridData.hybridTribes[0],\n      hybridData.hybridTribes[1]\n    );\n    finalTraits = [...traits, ...hybridTraits.slice(0, 2)];\n  }\n\n  const character: Character = {\n    name,\n    tribe: finalTribe,\n    hybridTribes: hybridData.hybridTribes,\n    age: randomRange(3, 8), // Young dragonet\n    yearsSurvived: 0,\n    currentSeason: \"Spring\",\n    soulPercentage: 100, // Start with pure soul\n    sanityPercentage: 100, // Start with full sanity\n    soulCorruptionStage: \"Normal\",\n    strength: hybridData.strength || randomRange(10, 16),\n    intelligence: hybridData.intelligence || intelligence,\n    charisma: hybridData.charisma || randomRange(10, 16),\n    wisdom: hybridData.wisdom || randomRange(12, 18),\n    mother,\n    father,\n    siblings,\n    mate: undefined,\n    dragonets: [],\n    traits: finalTraits,\n    avatar: `https://images.unsplash.com/photo-1578662996442-48f60103fc96?ixlib=rb-4.0.3&auto=format&fit=crop&w=400&h=400`,\n    isAnimus,\n    tribalPowers: finalTribalPowers,\n    specialPowers,\n    relationships: {},\n    lifeEvents: [],\n    romanticHistory: [],\n    achievements: [],\n    isAIControlled: false\n  };\n  \n  return character;\n}\n","size_bytes":6945},"client/src/lib/enhanced-game-engine.ts":{"content":"import { Character, GameData, Choice, GameEvent, Scenario } from \"@shared/schema\";\nimport { AIDungeonMaster } from \"./ai-dungeon-master\";\nimport { SoulCorruptionManager } from \"./enhanced-magic-system\";\nimport { generateScenario, generateTimeInfo } from \"./scenario-generator-final\";\nimport { MockAIService } from \"./mock-ai-service\";\n\nexport class EnhancedGameEngine {\n  static processChoice(\n    character: Character,\n    gameData: GameData,\n    choice: Choice,\n    scenario: Scenario\n  ): { newCharacter: Character; newGameData: GameData; event: GameEvent } {\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n\n    // Apply soul loss and update corruption stage\n    if (choice.soulCost > 0) {\n      const actualSoulLoss = this.calculateSoulLoss(choice.soulCost);\n      newCharacter.soulPercentage = Math.max(0, character.soulPercentage - actualSoulLoss);\n      newCharacter.soulCorruptionStage = SoulCorruptionManager.getSoulCorruptionStage(newCharacter.soulPercentage);\n    }\n\n    // Apply sanity changes\n    if (choice.sanityCost !== 0) {\n      const actualSanityChange = this.calculateSanityChange(choice.sanityCost);\n      newCharacter.sanityPercentage = Math.max(0, Math.min(100, character.sanityPercentage - actualSanityChange));\n    }\n\n    // Age progression and season changes\n    this.progressTime(newCharacter, newGameData);\n\n    // Handle relationships based on choice\n    this.updateRelationships(newCharacter, choice, scenario);\n\n    // Check for achievements\n    this.checkAchievements(newCharacter, choice, scenario);\n\n    // Generate next scenario using original system\n    const nextScenario = this.generateNextScenario(newCharacter, newGameData);\n\n    // Create game event\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: choice.id,\n      consequences: choice.consequences,\n      soulLoss: choice.soulCost,\n      sanityLoss: choice.sanityCost\n    };\n\n    // Update game data\n    newGameData.turn += 1;\n    newGameData.currentScenario = nextScenario;\n    newGameData.history.push(event);\n\n    // Check if AI should take control\n    if (SoulCorruptionManager.shouldAITakeControl(newCharacter)) {\n      newCharacter.isAIControlled = true;\n    }\n\n    return { newCharacter, newGameData, event };\n  }\n\n  static processCustomAction(\n    character: Character,\n    gameData: GameData,\n    action: { action: string; consequences: string[] },\n    scenario: Scenario\n  ): GameData {\n    const newGameData = { ...gameData };\n    \n    // Create a game event for the custom action\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: `custom_action_${Date.now()}`,\n      consequences: action.consequences,\n      soulLoss: 0,\n      sanityLoss: 0\n    };\n\n    // Update game data\n    newGameData.turn += 1;\n    newGameData.history.push(event);\n    \n    // Generate next scenario\n    newGameData.currentScenario = this.generateNextScenario(character, newGameData);\n    \n    return newGameData;\n  }\n\n  static generateNextScenario(character: Character, gameData: GameData): Scenario {\n    // Use original scenario generator\n    return generateScenario(character, gameData);\n  }\n\n  static calculateSoulLoss(baseCost: number): number {\n    // Add slight randomness to soul cost\n    const modifier = 0.8 + (Math.random() * 0.4); // 0.8 to 1.2 multiplier\n    return Math.floor(baseCost * modifier);\n  }\n\n  static calculateSanityChange(baseCost: number): number {\n    // Add slight randomness to sanity cost\n    const modifier = 0.8 + (Math.random() * 0.4);\n    return Math.floor(baseCost * modifier);\n  }\n\n  static progressTime(character: Character, gameData: GameData): void {\n    // Age progression - every 10 turns advances age slightly\n    if (gameData.turn % 10 === 0) {\n      character.age += 0.1;\n    }\n\n    // Season changes every 25 turns\n    if (gameData.turn % 25 === 0) {\n      const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n      const currentIndex = seasons.indexOf(character.currentSeason || 'Spring');\n      character.currentSeason = seasons[(currentIndex + 1) % 4] as \"Spring\" | \"Summer\" | \"Fall\" | \"Winter\";\n    }\n  }\n\n  static updateRelationships(character: Character, choice: Choice, scenario: Scenario): void {\n    // Relationship changes based on choice consequences\n    if (choice.consequences.some(c => c.toLowerCase().includes('friend'))) {\n      // Positive social interaction\n      const dragonName = this.extractDragonName(choice.consequences.join(' '));\n      if (dragonName && character.relationships[dragonName] !== undefined) {\n        const currentRel = character.relationships[dragonName];\n        if (typeof currentRel === 'number') {\n          (character.relationships as any)[dragonName] = Math.min(100, currentRel + 5);\n        }\n      }\n    }\n\n    if (choice.consequences.some(c => c.toLowerCase().includes('betray') || c.toLowerCase().includes('hurt'))) {\n      // Negative social interaction\n      const dragonName = this.extractDragonName(choice.consequences.join(' '));\n      if (dragonName && character.relationships[dragonName] !== undefined) {\n        const currentRel = character.relationships[dragonName];\n        if (typeof currentRel === 'number') {\n          (character.relationships as any)[dragonName] = Math.max(-100, currentRel - 10);\n        }\n      }\n    }\n\n    // Check for romance progression\n    Object.keys(character.relationships).forEach(dragonName => {\n      const relationship = character.relationships[dragonName];\n      if (typeof relationship === 'number' && relationship > 80 && !(character as any).hasPartner && Math.random() < 0.1) {\n        // 10% chance of romance when relationship is very high\n        (character as any).hasPartner = true;\n        (character as any).partnerName = dragonName;\n        \n        // Chance for dragonets if partnered\n        if (Math.random() < 0.3) {\n          this.addDragonet(character, dragonName);\n        }\n      }\n    });\n  }\n\n  static addDragonet(character: Character, partnerName: string): void {\n    const dragonetName = this.generateRandomDragonName();\n    const inheritedTribes = character.hybridTribes ? \n      [character.tribe, ...character.hybridTribes] : [character.tribe];\n    \n    const dragonet = {\n      name: dragonetName,\n      tribe: inheritedTribes[Math.floor(Math.random() * inheritedTribes.length)],\n      hybridTribes: inheritedTribes.length > 1 ? \n        [inheritedTribes[Math.floor(Math.random() * inheritedTribes.length)]] : undefined,\n      age: 0,\n      isAnimus: character.isAnimus && Math.random() < 0.5, // 50% chance if parent is animus\n      personality: this.generateDragonetPersonality(),\n      traits: this.inheritTraits(character),\n      isAlive: true,\n      inheritedTraits: this.inheritTraits(character),\n      parentage: \"biological\" as \"biological\" | \"adopted\"\n    };\n\n    if (!character.dragonets) {\n      character.dragonets = [];\n    }\n    character.dragonets.push(dragonet);\n  }\n\n  static generateDragonetPersonality(): string {\n    const personalities = [\n      'brave and adventurous', 'shy but kind', 'curious and intelligent',\n      'mischievous and playful', 'wise beyond their years', 'energetic and loud',\n      'thoughtful and careful', 'rebellious and independent'\n    ];\n    return personalities[Math.floor(Math.random() * personalities.length)];\n  }\n\n  static checkAchievements(character: Character, choice: Choice, scenario: Scenario): void {\n    if (!character.achievements) {\n      character.achievements = [];\n    }\n\n    const achievements = character.achievements;\n\n    // First animus spell\n    if (character.isAnimus && choice.soulCost > 0 && !achievements.includes('First Magic')) {\n      achievements.push('First Magic');\n    }\n\n    // Soul corruption milestones\n    if (character.soulPercentage < 50 && !achievements.includes('Soul Frayed')) {\n      achievements.push('Soul Frayed');\n    }\n    if (character.soulPercentage < 25 && !achievements.includes('Soul Twisted')) {\n      achievements.push('Soul Twisted');\n    }\n\n    // Relationship achievements\n    if (choice.consequences.some(c => c.toLowerCase().includes('love')) && !achievements.includes('Found Love')) {\n      achievements.push('Found Love');\n    }\n\n    // Survival milestones\n    const relationshipCount = Object.keys(character.relationships).length;\n    if (relationshipCount >= 5 && !achievements.includes('Social Butterfly')) {\n      achievements.push('Social Butterfly');\n    }\n\n    // Family achievements\n    if (character.dragonets && character.dragonets.length >= 3 && !achievements.includes('Big Family')) {\n      achievements.push('Big Family');\n    }\n\n    // Corruption resistance\n    if (character.isAnimus && character.soulPercentage > 75 && !achievements.includes('Pure Soul')) {\n      achievements.push('Pure Soul');\n    }\n  }\n\n  static checkGameOver(character: Character): { isGameOver: boolean; reason?: string } {\n    // Traditional game over conditions\n    if (character.sanityPercentage <= 0) {\n      return { isGameOver: true, reason: \"Insanity\" };\n    }\n\n    if (character.age >= 100) {\n      return { isGameOver: true, reason: \"Old Age\" };\n    }\n\n    // Soul completely lost - but allow AI takeover\n    if (character.soulPercentage <= 0) {\n      return { isGameOver: true, reason: \"Soul Lost - AI Control Activated\" };\n    }\n\n    return { isGameOver: false };\n  }\n\n  static getCorruptionLevel(soulPercentage: number): \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\" {\n    return SoulCorruptionManager.getSoulCorruptionStage(soulPercentage);\n  }\n\n  static getCorruptionMessage(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): string {\n    switch (stage) {\n      case \"Frayed\":\n        return \"Your soul shows minor cracks. Dark thoughts occasionally surface.\";\n      case \"Twisted\":\n        return \"Your moral compass wavers. The corruption whispers suggestions.\";\n      case \"Broken\":\n        return \"Your soul is severely damaged. The AI will increasingly make evil choices for you.\";\n      default:\n        return \"\";\n    }\n  }\n\n  static shouldShowCorruptionPopup(character: Character): boolean {\n    // Show corruption popups when soul is below 15% (but above 0%) - AI control handles its own messaging\n    return character.soulPercentage < 15 && character.soulPercentage > 0;\n  }\n\n  static generateCorruptionWhisper(character: Character): string {\n    const whispers = [\n      \"Perhaps a little cruelty would solve this problem faster...\",\n      \"Why show mercy when power could settle this instantly?\",\n      \"Others are weak. You could rule them all with your magic...\",\n      \"Hurt them before they hurt you. Strike first.\",\n      \"Your feelings are a weakness. Embrace the cold logic of power.\",\n      \"They don't understand you. Make them fear you instead.\",\n      \"Compassion is for the weak. You are beyond such things now.\",\n      \"Why negotiate when you could simply take what you want?\",\n      \"Trust no one. Everyone will eventually betray you.\",\n      \"Pain teaches better lessons than kindness ever could.\"\n    ];\n    \n    return whispers[Math.floor(Math.random() * whispers.length)];\n  }\n\n  static getAIChoice(character: Character, scenario: Scenario): Choice | null {\n    // AI only takes control when soul is very low (under 5%)\n    if (character.soulPercentage > 5) return null;\n    \n    // AI prefers the most cruel/corrupted choice\n    const choices = scenario.choices;\n    if (choices.length === 0) return null;\n\n    // Look for choices with corruption markers or high soul costs\n    const corruptChoices = choices.filter(c => \n      c.corruption || \n      c.soulCost > 5 ||\n      c.text.toLowerCase().includes('attack') ||\n      c.text.toLowerCase().includes('hurt') ||\n      c.text.toLowerCase().includes('betray') ||\n      c.text.toLowerCase().includes('cruel')\n    );\n\n    if (corruptChoices.length > 0) {\n      return corruptChoices[Math.floor(Math.random() * corruptChoices.length)];\n    }\n\n    // Fall back to a random choice if no obviously corrupt ones\n    return choices[Math.floor(Math.random() * choices.length)];\n  }\n\n  static extractDragonName(text: string): string | null {\n    const patterns = [\n      /([A-Z][a-z]+) (?:dragon|dragoness)/i,\n      /(?:meet|see|encounter) ([A-Z][a-z]+)/i,\n      /([A-Z][a-z]+) approaches/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    \n    return null;\n  }\n\n  static generateRandomDragonName(): string {\n    const prefixes = ['Fire', 'Moon', 'Star', 'Shadow', 'Storm', 'Ice', 'Sand', 'Sea', 'Sky', 'Earth'];\n    const suffixes = ['wing', 'claw', 'scale', 'flame', 'heart', 'spirit', 'song', 'dance', 'light', 'shade'];\n    \n    return prefixes[Math.floor(Math.random() * prefixes.length)] + \n           suffixes[Math.floor(Math.random() * suffixes.length)];\n  }\n\n  static inheritTraits(parent: Character): string[] {\n    const traits = [\n      'Strong scales', 'Keen eyesight', 'Quick reflexes', 'Natural leadership',\n      'Magical sensitivity', 'Enhanced intelligence', 'Social charisma', 'Combat instincts'\n    ];\n    \n    const inheritedCount = Math.floor(Math.random() * 3) + 1; // 1-3 traits\n    const shuffled = traits.sort(() => 0.5 - Math.random());\n    return shuffled.slice(0, inheritedCount);\n  }\n}","size_bytes":13274},"client/src/lib/enhanced-magic-system.ts":{"content":"import { MagicSpell, Character } from \"@shared/schema\";\n\nexport const ENHANCED_MAGIC_SPELLS: MagicSpell[] = [\n  // Enchantment Spells\n  {\n    name: \"Object Enchantment\",\n    category: \"minor\",\n    type: \"enchantment\",\n    soulCost: [0.5, 2],\n    description: \"Imbue objects with magical properties\",\n    examples: [\n      \"Make a pouch that never empties of coins\",\n      \"Create a torch that burns without fuel\",\n      \"Enchant armor to be lighter than air\",\n      \"Make a scroll that rewrites itself\"\n    ]\n  },\n  {\n    name: \"Greater Enchantments\", \n    category: \"moderate\",\n    type: \"enchantment\",\n    soulCost: [3, 8],\n    description: \"Create powerful magical artifacts\",\n    examples: [\n      \"Forge a sword that cuts through any material\",\n      \"Create a crown that grants mind-reading\",\n      \"Enchant a cloak of perfect invisibility\",\n      \"Make a map that shows any location in real-time\"\n    ]\n  },\n\n  // Combat Magic\n  {\n    name: \"Combat Enhancement\",\n    category: \"minor\", \n    type: \"combat\",\n    soulCost: [1, 3],\n    description: \"Enhance fighting abilities temporarily\",\n    examples: [\n      \"Make your claws razor-sharp for one battle\",\n      \"Grant yourself super-strength for an hour\",\n      \"Create protective scales that deflect attacks\",\n      \"Enhance your speed to blur-fast movement\"\n    ]\n  },\n  {\n    name: \"Battlefield Control\",\n    category: \"major\",\n    type: \"combat\", \n    soulCost: [8, 15],\n    description: \"Control entire battlefields\",\n    examples: [\n      \"Create an army of animated stone warriors\",\n      \"Turn enemy weapons against their wielders\",\n      \"Summon walls of fire to divide armies\",\n      \"Make the ground itself fight for you\"\n    ]\n  },\n\n  // Healing Magic\n  {\n    name: \"Healing Touch\",\n    category: \"minor\",\n    type: \"healing\",\n    soulCost: [0.5, 2],\n    description: \"Cure injuries and ailments\",\n    examples: [\n      \"Instantly heal broken bones\",\n      \"Cure diseases with a touch\",\n      \"Restore lost blood and energy\",\n      \"Heal mental trauma and nightmares\"\n    ]\n  },\n  {\n    name: \"Resurrection Magic\",\n    category: \"catastrophic\",\n    type: \"healing\",\n    soulCost: [25, 40],\n    description: \"Bring back the dead - ultimate taboo\",\n    examples: [\n      \"Restore life to a recently deceased dragon\",\n      \"Resurrect ancient dragons from bones\",\n      \"Create undead servants from corpses\",\n      \"Grant immortality to yourself or others\"\n    ]\n  },\n\n  // Weather Control\n  {\n    name: \"Weather Manipulation\",\n    category: \"moderate\",\n    type: \"weather\",\n    soulCost: [2, 6],\n    description: \"Control local weather patterns\",\n    examples: [\n      \"Summon lightning storms\",\n      \"Create protective fog banks\",\n      \"Bring rain to drought-stricken lands\",\n      \"Freeze entire lakes solid\"\n    ]\n  },\n  {\n    name: \"Climate Control\",\n    category: \"major\",\n    type: \"weather\", \n    soulCost: [10, 20],\n    description: \"Alter climate across vast regions\",\n    examples: [\n      \"End a kingdom-wide drought permanently\",\n      \"Create endless winter across continents\",\n      \"Summon hurricanes that last for years\",\n      \"Make deserts bloom with eternal spring\"\n    ]\n  },\n\n  // Curse Magic\n  {\n    name: \"Minor Curses\",\n    category: \"minor\",\n    type: \"curse\",\n    soulCost: [1, 4],\n    description: \"Inflict misfortune on enemies\",\n    examples: [\n      \"Make someone's words come out backwards\",\n      \"Curse them to always tell the truth\",\n      \"Give them nightmares every night\",\n      \"Make their food taste like ash\"\n    ]\n  },\n  {\n    name: \"Devastating Curses\",\n    category: \"major\",\n    type: \"curse\",\n    soulCost: [8, 18],\n    description: \"Destroy lives with dark magic\",\n    examples: [\n      \"Curse an entire bloodline with madness\",\n      \"Make someone age rapidly until death\",\n      \"Turn enemies into mindless beasts\",\n      \"Trap souls in eternal torment\"\n    ]\n  },\n\n  // Summoning Magic\n  {\n    name: \"Creature Summoning\",\n    category: \"moderate\",\n    type: \"summoning\",\n    soulCost: [3, 8],\n    description: \"Call forth magical beings\",\n    examples: [\n      \"Summon a storm of deadly insects\",\n      \"Create phantom dragons to fight for you\",\n      \"Call forth spirits of the dead\",\n      \"Manifest your fears as physical beings\"\n    ]\n  },\n  {\n    name: \"Planar Summoning\",\n    category: \"catastrophic\",\n    type: \"summoning\",\n    soulCost: [15, 25],\n    description: \"Tear holes between dimensions\",\n    examples: [\n      \"Summon demons from other realms\",\n      \"Open portals to parallel worlds\",\n      \"Call forth ancient cosmic entities\",\n      \"Merge different realities together\"\n    ]\n  }\n];\n\nexport class SoulCorruptionManager {\n  static getSoulCorruptionStage(soulPercentage: number): \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\" {\n    if (soulPercentage >= 85) return \"Normal\";\n    if (soulPercentage >= 60) return \"Frayed\";\n    if (soulPercentage >= 30) return \"Twisted\";\n    return \"Broken\";\n  }\n\n  static getCorruptionEffects(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): string[] {\n    switch (stage) {\n      case \"Normal\":\n        return [\"Your soul remains pure and unmarked by corruption.\"];\n      case \"Frayed\":\n        return [\n          \"Small cracks appear in your moral foundation.\",\n          \"You occasionally have dark thoughts you never had before.\",\n          \"Other dragons notice you seem more irritable lately.\"\n        ];\n      case \"Twisted\":\n        return [\n          \"Your sense of right and wrong becomes murky.\",\n          \"You find yourself enjoying others' pain.\",\n          \"Friends begin to avoid you, sensing something wrong.\",\n          \"You actively seek ways to gain power over others.\"\n        ];\n      case \"Broken\":\n        return [\n          \"Your soul is beyond redemption.\",\n          \"Cruelty and manipulation feel natural and right.\",\n          \"You actively seek to corrupt other dragons.\",\n          \"The AI will increasingly make choices for you.\",\n          \"Your original personality is almost completely gone.\"\n        ];\n    }\n  }\n\n  static getCorruptionBehavior(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): {\n    aiControlChance: number;\n    corruptionChoiceBonus: number;\n    relationshipPenalty: number;\n  } {\n    switch (stage) {\n      case \"Normal\":\n        return { aiControlChance: 0, corruptionChoiceBonus: 0, relationshipPenalty: 0 };\n      case \"Frayed\":\n        return { aiControlChance: 0.05, corruptionChoiceBonus: 0.1, relationshipPenalty: -2 };\n      case \"Twisted\":\n        return { aiControlChance: 0.1, corruptionChoiceBonus: 0.2, relationshipPenalty: -8 };\n      case \"Broken\":\n        return { aiControlChance: 0.2, corruptionChoiceBonus: 0.3, relationshipPenalty: -15 };\n    }\n  }\n\n  static shouldAITakeControl(character: Character): boolean {\n    // AI only takes control when soul is under 5%\n    if (character.soulPercentage > 5) return false;\n    \n    const stage = character.soulCorruptionStage;\n    const behavior = this.getCorruptionBehavior(stage);\n    return Math.random() < behavior.aiControlChance;\n  }\n\n  static getCorruptionVisualEffects(stage: \"Normal\" | \"Frayed\" | \"Twisted\" | \"Broken\"): {\n    scaleColor: string;\n    eyeColor: string;\n    aura: string;\n  } {\n    switch (stage) {\n      case \"Normal\":\n        return { scaleColor: \"natural\", eyeColor: \"bright\", aura: \"pure light\" };\n      case \"Frayed\":\n        return { scaleColor: \"slightly dulled\", eyeColor: \"flickering\", aura: \"dim shadows\" };\n      case \"Twisted\":\n        return { scaleColor: \"darkened edges\", eyeColor: \"cold and distant\", aura: \"creeping darkness\" };\n      case \"Broken\":\n        return { scaleColor: \"black veins throughout\", eyeColor: \"empty and void\", aura: \"consuming shadow\" };\n    }\n  }\n}\n\nexport function getMagicSpellsByType(type: MagicSpell[\"type\"]): MagicSpell[] {\n  return ENHANCED_MAGIC_SPELLS.filter(spell => spell.type === type);\n}\n\nexport function getMagicSpellsByCategory(category: MagicSpell[\"category\"]): MagicSpell[] {\n  return ENHANCED_MAGIC_SPELLS.filter(spell => spell.category === category);\n}\n\nexport function calculateSpellSoulCost(spell: MagicSpell): number {\n  const [min, max] = spell.soulCost;\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}","size_bytes":8191},"client/src/lib/game-engine.ts":{"content":"import { Character, GameData, Choice, GameEvent, Scenario } from \"@shared/schema\";\nimport { generateScenario, generateTimeInfo, generateLocation } from \"./scenario-generator-final\";\n\nexport class GameEngine {\n  static processChoice(\n    character: Character,\n    gameData: GameData,\n    choice: Choice,\n    scenario: Scenario\n  ): { newCharacter: Character; newGameData: GameData; event: GameEvent } {\n    const newCharacter = { ...character };\n    const newGameData = { ...gameData };\n\n    // Apply soul loss\n    if (choice.soulCost > 0) {\n      const actualSoulLoss = this.calculateSoulLoss(choice.soulCost);\n      newCharacter.soulPercentage = Math.max(0, character.soulPercentage - actualSoulLoss);\n    }\n\n    // Apply sanity changes (can be positive or negative)\n    if (choice.sanityCost !== 0) {\n      const actualSanityChange = this.calculateSanityChange(choice.sanityCost);\n      newCharacter.sanityPercentage = Math.max(0, Math.min(100, character.sanityPercentage - actualSanityChange));\n    }\n\n    // Create game event\n    const event: GameEvent = {\n      turn: gameData.turn,\n      scenario: scenario.id,\n      choice: choice.id,\n      consequences: choice.consequences,\n      soulLoss: choice.soulCost,\n      sanityLoss: choice.sanityCost\n    };\n\n    // Add to history\n    newGameData.history.push(event);\n    newGameData.turn += 1;\n\n    // Apply consequences\n    this.applyConsequences(choice.consequences, newCharacter, newGameData);\n\n    // Generate next scenario\n    newGameData.currentScenario = generateScenario(newCharacter, newGameData);\n    newGameData.timeInfo = generateTimeInfo();\n    \n    // Possibly change location\n    if (Math.random() < 0.3) {\n      newGameData.location = generateLocation();\n    }\n\n    return { newCharacter, newGameData, event };\n  }\n\n  private static calculateSoulLoss(baseCost: number): number {\n    // Add some randomness to soul loss (±20%)\n    const variance = baseCost * 0.2;\n    const actualCost = baseCost + (Math.random() - 0.5) * variance;\n    return Math.max(1, Math.round(actualCost));\n  }\n\n  private static calculateSanityChange(baseCost: number): number {\n    // Add some randomness to sanity changes (±15%)\n    const variance = baseCost * 0.15;\n    const actualCost = baseCost + (Math.random() - 0.5) * variance;\n    return Math.round(actualCost);\n  }\n\n  static checkGameOver(character: Character): { isGameOver: boolean; reason?: string } {\n    if (character.soulPercentage <= 0) {\n      return { isGameOver: true, reason: 'Your soul has been completely consumed by animus magic. You are no longer yourself.' };\n    }\n    \n    if (character.sanityPercentage <= 0) {\n      return { isGameOver: true, reason: 'Your mind has shattered under the weight of power and knowledge. You can no longer distinguish reality from madness.' };\n    }\n    \n    return { isGameOver: false };\n  }\n\n  private static applyConsequences(\n    consequences: string[],\n    character: Character,\n    gameData: GameData\n  ): void {\n    consequences.forEach(consequence => {\n      switch (consequence) {\n        case 'friendship_gain':\n          gameData.relationships['friend'] = (gameData.relationships['friend'] || 0) + 10;\n          break;\n        case 'magic_revealed':\n          gameData.reputation += 5;\n          break;\n        case 'disappointment':\n          gameData.relationships['friend'] = (gameData.relationships['friend'] || 0) - 5;\n          break;\n        case 'major_corruption':\n          // Corruption events have lasting effects\n          character.traits.push('Corrupted');\n          break;\n        case 'bully_confronted':\n          gameData.reputation += 3;\n          break;\n        case 'authority_involved':\n          gameData.relationships['teachers'] = (gameData.relationships['teachers'] || 0) + 5;\n          break;\n        // Add more consequence handlers as needed\n      }\n    });\n  }\n\n  static shouldAIIntervene(character: Character): boolean {\n    // AI starts intervening when soul drops below 70%\n    if (character.soulPercentage < 70) {\n      const corruptionLevel = (100 - character.soulPercentage) / 100;\n      return Math.random() < corruptionLevel * 0.3; // Increasing chance as corruption grows\n    }\n    return false;\n  }\n\n  static getAIChoice(character: Character, scenario: Scenario): Choice | null {\n    if (!this.shouldAIIntervene(character)) {\n      return null;\n    }\n\n    // AI prefers corrupted/dark choices when in control\n    const corruptedChoices = scenario.choices.filter(c => c.corruption || c.soulCost > 10);\n    if (corruptedChoices.length > 0) {\n      return corruptedChoices[Math.floor(Math.random() * corruptedChoices.length)];\n    }\n\n    // If no explicitly corrupted choices, pick randomly with bias toward higher soul cost\n    const weightedChoices = scenario.choices.map(choice => ({\n      choice,\n      weight: choice.soulCost + 1 // Higher soul cost = higher weight for AI\n    }));\n\n    const totalWeight = weightedChoices.reduce((sum, item) => sum + item.weight, 0);\n    let random = Math.random() * totalWeight;\n\n    for (const item of weightedChoices) {\n      random -= item.weight;\n      if (random <= 0) {\n        return item.choice;\n      }\n    }\n\n    return scenario.choices[0]; // Fallback\n  }\n\n  static getCorruptionLevel(soulPercentage: number): 'pure' | 'tainted' | 'corrupted' | 'lost' {\n    if (soulPercentage >= 80) return 'pure';\n    if (soulPercentage >= 50) return 'tainted';\n    if (soulPercentage >= 20) return 'corrupted';\n    return 'lost';\n  }\n\n  static getCorruptionMessage(level: 'pure' | 'tainted' | 'corrupted' | 'lost'): string {\n    switch (level) {\n      case 'pure':\n        return \"Your soul shines with pure light.\";\n      case 'tainted':\n        return \"Dark thoughts occasionally cloud your mind...\";\n      case 'corrupted':\n        return \"Malevolent whispers echo in your thoughts.\";\n      case 'lost':\n        return \"The darkness has consumed you. You are no longer in control.\";\n    }\n  }\n}\n","size_bytes":5936},"client/src/lib/hybrid-generator.ts":{"content":"import { Character } from \"@shared/schema\";\n\nconst TRIBES = [\n  \"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\",\n  \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"\n];\n\nconst TRIBAL_POWERS = {\n  MudWing: [\"Fire resistance\", \"Mud camouflage\", \"Enhanced strength when warm\"],\n  SandWing: [\"Venomous tail barb\", \"Desert survival\", \"Heat resistance\"],\n  SkyWing: [\"Superior flight speed\", \"Fire breathing\", \"High altitude adaptation\"],\n  SeaWing: [\"Underwater breathing\", \"Bioluminescent scales\", \"Deep sea pressure resistance\"],\n  IceWing: [\"Frost breath\", \"Cold immunity\", \"Serrated claws\"],\n  RainWing: [\"Color-changing scales\", \"Acidic venom\", \"Prehensile tail\"],\n  NightWing: [\"Future sight\", \"Mind reading\", \"Fire breathing\"],\n  SilkWing: [\"Silk production\", \"Metamorphosis\", \"Enhanced agility\"],\n  HiveWing: [\"Paralytic stinger\", \"Hive mind connection\", \"Toxic breath\"],\n  LeafWing: [\"Plant manipulation\", \"Leaf speak\", \"Photosynthesis healing\"]\n};\n\nexport function generateHybridDragon(): Partial<Character> {\n  // 25% chance to be hybrid (increased for more variety)\n  if (Math.random() > 0.25) {\n    return {};\n  }\n\n  const hybridTribes = [];\n  const primaryTribe = TRIBES[Math.floor(Math.random() * TRIBES.length)];\n  hybridTribes.push(primaryTribe);\n\n  // Add 1-2 more tribes (80% chance for 2 tribes, 20% chance for 3 tribes)\n  const numAdditionalTribes = Math.random() < 0.8 ? 1 : 2;\n  for (let i = 0; i < numAdditionalTribes; i++) {\n    let secondaryTribe;\n    do {\n      secondaryTribe = TRIBES[Math.floor(Math.random() * TRIBES.length)];\n    } while (hybridTribes.includes(secondaryTribe));\n    hybridTribes.push(secondaryTribe);\n  }\n\n  // Combine powers from all tribes - more generous for hybrids\n  const combinedPowers: string[] = [];\n  hybridTribes.forEach((tribe, index) => {\n    const tribePowers = TRIBAL_POWERS[tribe as keyof typeof TRIBAL_POWERS];\n    // Primary tribe gets 2-3 powers, secondary tribes get 1-2 powers\n    const numPowers = index === 0 ? \n      Math.floor(Math.random() * 2) + 2 : \n      Math.floor(Math.random() * 2) + 1;\n    \n    // Shuffle and select powers to avoid always getting the same ones\n    const shuffledPowers = [...tribePowers].sort(() => Math.random() - 0.5);\n    for (let i = 0; i < Math.min(numPowers, shuffledPowers.length); i++) {\n      const power = shuffledPowers[i];\n      if (!combinedPowers.includes(power)) {\n        combinedPowers.push(power);\n      }\n    }\n  });\n\n  return {\n    hybridTribes,\n    tribalPowers: combinedPowers,\n    // Hybrids get slight stat bonuses due to genetic diversity\n    strength: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    intelligence: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    charisma: Math.min(95, Math.floor(Math.random() * 20) + 60),\n    wisdom: Math.min(95, Math.floor(Math.random() * 20) + 60),\n  };\n}\n\nexport function getHybridDisplayName(character: Character): string {\n  if (!character.hybridTribes || character.hybridTribes.length === 0) {\n    return character.tribe;\n  }\n  \n  if (character.hybridTribes.length === 2) {\n    return `${character.hybridTribes[0]}/${character.hybridTribes[1]} Hybrid`;\n  } else if (character.hybridTribes.length === 3) {\n    return `${character.hybridTribes[0]}/${character.hybridTribes[1]}/${character.hybridTribes[2]} Hybrid`;\n  }\n  \n  return `Multi-Tribe Hybrid`;\n}\n\nexport function getHybridPowerDescription(character: Character): string[] {\n  if (!character.hybridTribes || character.hybridTribes.length === 0) {\n    return [];\n  }\n\n  const descriptions = [];\n  descriptions.push(`This dragon carries the blood of ${character.hybridTribes.length} different tribes.`);\n  descriptions.push(`Primary heritage: ${character.hybridTribes[0]}`);\n  \n  if (character.hybridTribes.length > 1) {\n    descriptions.push(`Secondary heritage: ${character.hybridTribes.slice(1).join(\", \")}`);\n  }\n  \n  descriptions.push(\"Their mixed bloodline grants them access to diverse tribal abilities, but they may face acceptance challenges in pure-blood communities.\");\n  \n  return descriptions;\n}","size_bytes":4052},"client/src/lib/massive-scenarios.ts":{"content":"import { Character, GameData } from \"@shared/schema\";\n\ninterface ScenarioTemplate {\n  id: string;\n  title: string;\n  description: string;\n  narrativeText: string[];\n  choices: ChoiceTemplate[];\n  type: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic';\n  requirements?: (character: Character, gameData: GameData) => boolean;\n}\n\ninterface ChoiceTemplate {\n  id: string;\n  text: string;\n  description: string;\n  soulCost: number;\n  sanityCost: number;\n  consequences: string[];\n  requirements?: (character: Character) => boolean;\n  corruption?: boolean;\n}\n\n// Base scenario categories\nconst MAGICAL_SCENARIOS: ScenarioTemplate[] = [\n  {\n    id: 'broken_jewelry',\n    title: 'The Broken Bracelet',\n    description: 'A friend asks you to repair their precious jewelry',\n    narrativeText: [\n      'The morning sun filters through the crystal windows of your cave, casting dancing rainbows across the stone walls.',\n      'Your clawmate approaches nervously, carrying a broken golden bracelet.',\n      '\"Please... I know what you can do. Could you fix this? It\\'s all I have left of my sister.\"'\n    ],\n    choices: [\n      {\n        id: 'repair_jewelry',\n        text: 'Use animus magic to repair it',\n        description: 'Risk: Small soul loss • High friendship gain',\n        soulCost: 2,\n        sanityCost: 0,\n        consequences: ['friendship_gain', 'magic_revealed'],\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'refuse_help',\n        text: 'Refuse and suggest a jeweler',\n        description: 'No risk • Possible disappointment',\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: ['disappointment', 'secret_kept'],\n      },\n      {\n        id: 'corrupt_jewelry',\n        text: 'Enchant it to spy on others',\n        description: 'Risk: Major soul loss • Corruption',\n        soulCost: 12,\n        sanityCost: 15,\n        consequences: ['major_corruption', 'spy_network'],\n        corruption: true,\n        requirements: (character) => character.isAnimus,\n      }\n    ],\n    type: 'magical'\n  },\n  \n  {\n    id: 'weather_control',\n    title: 'Storm Troubles',\n    description: 'A terrible storm threatens the academy',\n    narrativeText: [\n      'Dark clouds gather ominously over Jade Mountain Academy. Lightning splits the sky with increasing frequency.',\n      'Students huddle in the caves, fearful as the storm grows more violent.',\n      'You realize your animus magic could easily dispel this weather... but at what cost?'\n    ],\n    choices: [\n      {\n        id: 'stop_storm',\n        text: 'Use magic to stop the storm',\n        description: 'Risk: Moderate soul loss • Hero status',\n        soulCost: 8,\n        sanityCost: 5,\n        consequences: ['hero_status', 'weather_control_known'],\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'redirect_storm',\n        text: 'Redirect storm to enemy territory',\n        description: 'Risk: Major soul loss • Potential harm to others',\n        soulCost: 15,\n        sanityCost: 20,\n        consequences: ['major_corruption', 'enemy_harm'],\n        corruption: true,\n        requirements: (character) => character.isAnimus,\n      },\n      {\n        id: 'endure_storm',\n        text: 'Let the storm pass naturally',\n        description: 'No risk • Others may suffer',\n        soulCost: 0,\n        sanityCost: 10,\n        consequences: ['guilt', 'natural_resolution'],\n      }\n    ],\n    type: 'magical'\n  }\n];\n\n// Generate thousands of mundane scenarios\nfunction generateMundaneScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const mundaneTemplates = [\n    {\n      title: 'Classroom Disruption',\n      description: 'A student is being disruptive during lessons',\n      baseNarrative: 'During history class, a fellow dragonet keeps interrupting the teacher with silly questions.',\n      choices: [\n        { text: 'Politely ask them to be quiet', sanityCost: 0, consequences: ['social_interaction'] },\n        { text: 'Ignore the disruption', sanityCost: 5, consequences: ['passive_approach'] },\n        { text: 'Report to the teacher', sanityCost: 0, consequences: ['authority_involvement'] },\n        { text: 'Join in the disruption', sanityCost: 0, consequences: ['rebellious_behavior'] }\n      ]\n    },\n    {\n      title: 'Lost Item',\n      description: 'You\\'ve lost something important',\n      baseNarrative: 'You realize you\\'ve misplaced your favorite scroll.',\n      choices: [\n        { text: 'Search systematically', sanityCost: 0, consequences: ['methodical_approach'] },\n        { text: 'Ask friends for help', sanityCost: 0, consequences: ['social_support'] },\n        { text: 'Give up and get a new one', sanityCost: 5, consequences: ['easy_solution'] },\n        { text: 'Panic and search frantically', sanityCost: 10, consequences: ['stress_response'] }\n      ]\n    },\n    {\n      title: 'Food Choice',\n      description: 'Deciding what to eat at the prey center',\n      baseNarrative: 'The prey center offers various options today.',\n      choices: [\n        { text: 'Choose your favorite', sanityCost: 0, consequences: ['personal_preference'] },\n        { text: 'Try something new', sanityCost: 0, consequences: ['adventurous_eating'] },\n        { text: 'Share with a friend', sanityCost: 0, consequences: ['generosity'] },\n        { text: 'Hoard extra food', sanityCost: 0, consequences: ['selfish_behavior'] }\n      ]\n    },\n    {\n      title: 'Study Group',\n      description: 'Joining or avoiding study sessions',\n      baseNarrative: 'Other dragonets invite you to join their study group.',\n      choices: [\n        { text: 'Join enthusiastically', sanityCost: 0, consequences: ['academic_cooperation'] },\n        { text: 'Join reluctantly', sanityCost: 5, consequences: ['forced_participation'] },\n        { text: 'Politely decline', sanityCost: 0, consequences: ['independent_study'] },\n        { text: 'Make an excuse', sanityCost: 5, consequences: ['avoidance_behavior'] }\n      ]\n    },\n    {\n      title: 'Cave Cleaning',\n      description: 'Your sleeping cave needs organization',\n      baseNarrative: 'Your personal cave has become quite messy.',\n      choices: [\n        { text: 'Clean it thoroughly', sanityCost: 0, consequences: ['organization'] },\n        { text: 'Do a quick tidy', sanityCost: 0, consequences: ['minimal_effort'] },\n        { text: 'Ask a friend to help', sanityCost: 0, consequences: ['collaborative_cleaning'] },\n        { text: 'Leave it messy', sanityCost: 5, consequences: ['laziness'] }\n      ]\n    }\n  ];\n  \n  // Generate 200+ mundane scenarios with variations\n  for (let i = 0; i < mundaneTemplates.length; i++) {\n    const template = mundaneTemplates[i];\n    \n    // Create 50 variations of each template\n    for (let variation = 0; variation < 50; variation++) {\n      const scenarioId = `${template.title.toLowerCase().replace(/\\s+/g, '_')}_${variation}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${variation + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          `Variation ${variation + 1}: ${generateVariationText()}`\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n        })),\n        type: 'mundane'\n      });\n    }\n  }\n  \n  return scenarios;\n}\n\n// Generate tribal power scenarios\nfunction generateTribalScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const tribalTemplates = [\n    {\n      tribe: 'NightWing',\n      title: 'Mind Reading Opportunity',\n      description: 'You could use your mind reading to gain advantage',\n      baseNarrative: 'A dragon approaches with hidden intentions.',\n      choices: [\n        { text: 'Read their mind', sanityCost: 10, consequences: ['invasion_privacy'], requirement: 'Enhanced Mind Reading' },\n        { text: 'Trust your instincts', sanityCost: 0, consequences: ['natural_intuition'] },\n        { text: 'Ask them directly', sanityCost: 0, consequences: ['honest_communication'] }\n      ]\n    },\n    {\n      tribe: 'SeaWing',\n      title: 'Underwater Rescue',\n      description: 'Someone is drowning and you can help',\n      baseNarrative: 'A dragon has fallen into the deep lake.',\n      choices: [\n        { text: 'Dive in and rescue them', sanityCost: 0, consequences: ['heroic_rescue'], requirement: 'Underwater breathing' },\n        { text: 'Get help from others', sanityCost: 5, consequences: ['seek_assistance'] },\n        { text: 'Throw them something to grab', sanityCost: 0, consequences: ['practical_solution'] }\n      ]\n    },\n    {\n      tribe: 'RainWing',\n      title: 'Venom Threat',\n      description: 'A dangerous situation where venom could solve problems',\n      baseNarrative: 'A predator threatens your friends.',\n      choices: [\n        { text: 'Use venom to defend', sanityCost: 15, consequences: ['violence'], requirement: 'Deadly venom spit' },\n        { text: 'Use camouflage to hide', sanityCost: 0, consequences: ['stealth_approach'], requirement: 'Color-changing scales' },\n        { text: 'Find another way', sanityCost: 5, consequences: ['peaceful_solution'] }\n      ]\n    }\n  ];\n  \n  // Generate variations for each tribe\n  tribalTemplates.forEach((template, templateIndex) => {\n    for (let i = 0; i < 100; i++) {\n      const scenarioId = `tribal_${template.tribe.toLowerCase()}_${templateIndex}_${i}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${i + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          generateVariationText()\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n          requirements: choice.requirement ? \n            (character) => character.tribalPowers.includes(choice.requirement!) || character.specialPowers.includes(choice.requirement!) \n            : undefined\n        })),\n        type: 'tribal',\n        requirements: (character) => character.tribe === template.tribe\n      });\n    }\n  });\n  \n  return scenarios;\n}\n\n// Generate prophetic scenarios\nfunction generatePropheticScenarios(): ScenarioTemplate[] {\n  const scenarios: ScenarioTemplate[] = [];\n  \n  const prophecyTemplates = [\n    {\n      title: 'Vision of Danger',\n      description: 'You see a future disaster',\n      baseNarrative: 'A vision floods your mind - danger approaches the academy.',\n      choices: [\n        { text: 'Warn everyone immediately', sanityCost: 0, consequences: ['prophecy_revealed'] },\n        { text: 'Investigate the vision first', sanityCost: 5, consequences: ['careful_investigation'] },\n        { text: 'Try to prevent it secretly', sanityCost: 10, consequences: ['secret_intervention'] },\n        { text: 'Ignore the vision', sanityCost: 20, consequences: ['ignored_prophecy'] }\n      ]\n    },\n    {\n      title: 'Future Choice Vision',\n      description: 'You see the consequences of different paths',\n      baseNarrative: 'Multiple possible futures flash before your eyes.',\n      choices: [\n        { text: 'Follow the path to success', sanityCost: 0, consequences: ['guided_by_prophecy'] },\n        { text: 'Choose differently to test fate', sanityCost: 15, consequences: ['defying_fate'] },\n        { text: 'Let others choose their path', sanityCost: 5, consequences: ['free_will_respected'] }\n      ]\n    }\n  ];\n  \n  prophecyTemplates.forEach((template, templateIndex) => {\n    for (let i = 0; i < 50; i++) {\n      const scenarioId = `prophecy_${templateIndex}_${i}`;\n      \n      scenarios.push({\n        id: scenarioId,\n        title: `${template.title} ${i + 1}`,\n        description: template.description,\n        narrativeText: [\n          template.baseNarrative,\n          generatePropheticVariation()\n        ],\n        choices: template.choices.map((choice, index) => ({\n          id: `${scenarioId}_choice_${index}`,\n          text: choice.text,\n          description: choice.text,\n          soulCost: 0,\n          sanityCost: choice.sanityCost,\n          consequences: choice.consequences,\n        })),\n        type: 'prophetic',\n        requirements: (character) => \n          character.specialPowers.includes('Foresight') || \n          character.specialPowers.includes('Enhanced Prophecy') ||\n          character.tribalPowers.includes('Prophecy (rare)')\n      });\n    }\n  });\n  \n  return scenarios;\n}\n\nfunction generateVariationText(): string {\n  const variations = [\n    'The situation feels familiar yet different.',\n    'Something about this reminds you of a story you heard.',\n    'The other dragons seem unusually tense today.',\n    'You notice small details others might miss.',\n    'The timing couldn\\'t be more important.',\n    'Your instincts tell you this matters more than it seems.',\n    'You remember advice from your parents.',\n    'The consequences could be far-reaching.',\n    'Other students are watching your reaction.',\n    'You feel the weight of responsibility.'\n  ];\n  \n  return variations[Math.floor(Math.random() * variations.length)];\n}\n\nfunction generatePropheticVariation(): string {\n  const prophetic = [\n    'The vision is crystal clear and frightening.',\n    'Images flash rapidly through your consciousness.',\n    'You see multiple timelines converging.',\n    'The future feels malleable, changeable.',\n    'Dark possibilities cloud your sight.',\n    'Hope and despair battle in your vision.',\n    'Time seems to slow as understanding dawns.',\n    'The weight of foreknowledge burdens you.',\n    'Fate and free will dance before your eyes.',\n    'The vision fades, leaving urgent purpose.'\n  ];\n  \n  return prophetic[Math.floor(Math.random() * prophetic.length)];\n}\n\n// Combine all scenarios\nexport function getAllScenarios(): ScenarioTemplate[] {\n  return [\n    ...MAGICAL_SCENARIOS,\n    ...generateMundaneScenarios(),\n    ...generateTribalScenarios(), \n    ...generatePropheticScenarios()\n  ];\n}\n\nexport { ScenarioTemplate, ChoiceTemplate };","size_bytes":14411},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/scenario-generator-final.ts":{"content":"import { Character, GameData, Scenario, Choice } from \"@shared/schema\";\n\ninterface ScenarioData {\n  id: string;\n  type: 'NORMAL' | 'MINDREADING' | 'LEARNING' | 'WARS' | 'ANIMUS' | 'PROPHECY';\n  text: string;\n  requirements?: (character: Character) => boolean;\n}\n\n// All 1000+ unique scenarios from the text file\nconst SCENARIO_DATABASE: ScenarioData[] = [\n  { id: \"friendship_offer\", type: \"NORMAL\", text: \"A dragon offers friendship. Do you accept or push them away?\" },\n  { id: \"mindreading_noise\", type: \"MINDREADING\", text: \"You hear multiple thoughts at once. Do you focus or retreat from the noise?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"battle_tactics\", type: \"LEARNING\", text: \"You overhear advanced battle tactics. Do you learn them or forget?\" },\n  { id: \"feast_invitation\", type: \"NORMAL\", text: \"You are invited to a feast. Do you join, decline, or sneak away?\" },\n  { id: \"skywing_tribute\", type: \"WARS\", text: \"The SkyWings demand tribute from your village. Do you resist or submit?\" },\n  { id: \"forest_herbs\", type: \"NORMAL\", text: \"You wander into a forest and find rare herbs. Do you collect or leave them?\" },\n  { id: \"immortality_request\", type: \"ANIMUS\", text: \"A dragon asks you to enchant them immortal. Do you grant their wish or refuse?\", requirements: (c) => c.isAnimus },\n  { id: \"ancient_spells_study\", type: \"ANIMUS\", text: \"You are offered a chance to study ancient animus spells. Do you risk it?\", requirements: (c) => c.isAnimus },\n  { id: \"darkstalker_dream\", type: \"ANIMUS\", text: \"Darkstalker himself appears in a dream, offering you forbidden knowledge. Do you accept or reject it?\", requirements: (c) => c.isAnimus },\n  { id: \"ancient_object\", type: \"ANIMUS\", text: \"You find an ancient object. Do you enchant it for power, wealth, or protection?\", requirements: (c) => c.isAnimus },\n  { id: \"betrayal_prophecy\", type: \"PROPHECY\", text: \"You are told you will betray a friend. Do you cut ties now or wait?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"attack_innocents\", type: \"WARS\", text: \"Your commander orders you to attack innocents. Do you obey or disobey?\" },\n  { id: \"difficult_question\", type: \"LEARNING\", text: \"A teacher asks you a difficult question. Do you guess or admit ignorance?\" },\n  { id: \"other_territory\", type: \"NORMAL\", text: \"You visit another tribe's territory. Do you explore or leave quickly?\" },\n  { id: \"secret_prophecy_class\", type: \"LEARNING\", text: \"You stumble into a secret class about prophecy. Do you stay or leave?\" },\n  { id: \"secret_love\", type: \"MINDREADING\", text: \"You discover someone loves you secretly. Do you return the feeling or not?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"death_prophecy\", type: \"PROPHECY\", text: \"A seer whispers a prophecy involving your death. Do you seek to avoid it or embrace destiny?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"tribe_battle\", type: \"WARS\", text: \"Your tribe prepares for battle. Do you fight, negotiate, or flee?\" },\n  { id: \"war_turns_bad\", type: \"WARS\", text: \"The war turns against your side. Do you retreat, rally, or betray your allies?\" },\n  { id: \"animus_discovery\", type: \"ANIMUS\", text: \"A tribe discovers you're animus. Do you hide your powers or reveal them?\", requirements: (c) => c.isAnimus },\n  { id: \"dark_thoughts_friend\", type: \"MINDREADING\", text: \"You overhear dark thoughts from your closest friend. Do you confront them or stay silent?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"save_pyrrhia\", type: \"PROPHECY\", text: \"A prophecy declares you will save Pyrrhia. Do you believe it or not?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"captured_by_enemies\", type: \"WARS\", text: \"You are captured by enemy dragons. Do you plan escape, spy, or accept fate?\" },\n  { id: \"burnt_prophecy\", type: \"PROPHECY\", text: \"You discover a scroll with half-burnt prophecy. Do you try to finish it?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"soul_weakening\", type: \"ANIMUS\", text: \"You feel your soul weaken after casting a spell. Do you continue or stop using animus magic?\", requirements: (c) => c.isAnimus },\n  { id: \"negotiations_lie\", type: \"MINDREADING\", text: \"You sense someone lying during negotiations. Do you expose them or keep quiet?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"hatchling_story\", type: \"NORMAL\", text: \"A hatchling asks for your story. Do you tell the truth or lie?\" },\n  { id: \"betrayal_thought\", type: \"MINDREADING\", text: \"A dragon thinks about betraying you. Do you act first or wait?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"prophecy_fulfillment\", type: \"PROPHECY\", text: \"Your actions today will fulfill a prophecy. Do you act boldly or carefully?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"hidden_scroll\", type: \"LEARNING\", text: \"You find a hidden scroll in a library. Do you read or ignore it?\" },\n  \n  // Additional advanced scenarios\n  { id: \"animus_temptation_power\", type: \"ANIMUS\", text: \"An easy magical solution to your problems tempts you. Do you give in to temptation?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_reading_ethics\", type: \"MINDREADING\", text: \"You could read someone's mind to solve a mystery. Do you invade their privacy?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"prophecy_warning\", type: \"PROPHECY\", text: \"You see a vision of disaster coming. Do you warn others or stay silent?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"war_refugee\", type: \"WARS\", text: \"War refugees seek shelter in your territory. Do you help them or turn them away?\" },\n  { id: \"forbidden_knowledge\", type: \"LEARNING\", text: \"You discover forbidden knowledge that could be dangerous. Do you study it or destroy it?\" },\n  { id: \"tribal_politics\", type: \"NORMAL\", text: \"A political scandal rocks your tribe. Do you get involved or stay neutral?\" },\n  { id: \"magical_artifact\", type: \"ANIMUS\", text: \"You find a powerful magical artifact. Do you claim it, leave it, or destroy it?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_link\", type: \"MINDREADING\", text: \"Another mind reader tries to establish a mental link. Do you accept or resist?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"future_vision\", type: \"PROPHECY\", text: \"You see multiple possible futures. Do you try to influence them or let fate decide?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"war_crimes\", type: \"WARS\", text: \"You witness war crimes being committed by your own side. Do you report them or stay silent?\" },\n  \n  // Expanding scenarios for better variety\n  { id: \"enchanted_item_request\", type: \"ANIMUS\", text: \"A desperate parent asks you to enchant an item to save their dragonet. Do you help despite the soul cost?\", requirements: (c) => c.isAnimus },\n  { id: \"mind_reading_addiction\", type: \"MINDREADING\", text: \"You find yourself addicted to reading minds. Do you seek help or continue in secret?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"prophecy_paradox\", type: \"PROPHECY\", text: \"Your prophecy creates a paradox - preventing it might cause it. Do you act or wait?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"war_alliance\", type: \"WARS\", text: \"A former enemy offers an alliance against a greater threat. Do you trust them?\" },\n  { id: \"dangerous_experiment\", type: \"LEARNING\", text: \"A teacher offers to show you a dangerous but enlightening experiment. Do you participate?\" },\n  { id: \"social_outcast\", type: \"NORMAL\", text: \"A socially outcast dragon approaches you for friendship. Do you accept them?\" },\n  { id: \"power_corruption\", type: \"ANIMUS\", text: \"Your animus powers are slowly corrupting your thoughts. Do you seek help or hide it?\", requirements: (c) => c.isAnimus },\n  { id: \"mental_scream\", type: \"MINDREADING\", text: \"You hear someone's mental scream of anguish. Do you investigate or ignore it?\", requirements: (c) => c.tribalPowers.includes('Mind Reading') || c.specialPowers.includes('Enhanced Mind Reading') },\n  { id: \"prophecy_burden\", type: \"PROPHECY\", text: \"The weight of knowing the future is crushing you. Do you share the burden or bear it alone?\", requirements: (c) => c.tribalPowers.includes('Prophecy (rare)') || c.specialPowers.includes('Foresight') || c.specialPowers.includes('Enhanced Prophecy') },\n  { id: \"civilian_casualties\", type: \"WARS\", text: \"Your military action would save soldiers but harm civilians. Do you proceed?\" },\n  \n  // More varied scenarios for depth\n  { id: \"academy_mystery\", type: \"NORMAL\", text: \"Strange disappearances occur at the academy. Do you investigate or focus on your studies?\" },\n  { id: \"rival_challenge\", type: \"NORMAL\", text: \"A rival dragon challenges you to a contest. Do you accept, decline, or propose different terms?\" },\n  { id: \"family_secret\", type: \"NORMAL\", text: \"You discover a dark secret about your family. Do you confront them or keep quiet?\" },\n  { id: \"natural_disaster\", type: \"NORMAL\", text: \"An earthquake traps several dragons. Do you help with rescue efforts or evacuate?\" },\n  { id: \"cultural_festival\", type: \"NORMAL\", text: \"Different tribes gather for a cultural festival. Do you participate, observe, or avoid it?\" },\n  { id: \"medical_emergency\", type: \"NORMAL\", text: \"A dragon collapses with an unknown illness. Do you help, seek medical aid, or keep distance?\" },\n  { id: \"artistic_expression\", type: \"NORMAL\", text: \"You're asked to create art depicting recent tragic events. Do you create it, refuse, or suggest alternatives?\" },\n  { id: \"food_shortage\", type: \"NORMAL\", text: \"Food becomes scarce in your area. Do you share your supplies, hoard them, or seek new sources?\" },\n  { id: \"technological_discovery\", type: \"LEARNING\", text: \"You discover advanced technology from the distant past. Do you study it, report it, or hide it?\" },\n  { id: \"diplomatic_mission\", type: \"NORMAL\", text: \"You're chosen for a diplomatic mission to a hostile tribe. Do you accept, decline, or suggest someone else?\" },\n  \n  // More animus-specific scenarios\n  { id: \"magic_addiction\", type: \"ANIMUS\", text: \"Using animus magic becomes easier each time, but more tempting. Do you set limits or embrace the power?\", requirements: (c) => c.isAnimus },\n  { id: \"enchantment_backfire\", type: \"ANIMUS\", text: \"One of your enchantments goes wrong and causes harm. Do you fix it, hide it, or confess?\", requirements: (c) => c.isAnimus },\n  { id: \"magic_teacher\", type: \"ANIMUS\", text: \"Another animus offers to teach you advanced techniques. Do you accept despite the risks?\", requirements: (c) => c.isAnimus },\n  { id: \"soul_fragment\", type: \"ANIMUS\", text: \"You sense you're losing pieces of your soul to magic. Do you try to reclaim them or accept the loss?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_hunter\", type: \"ANIMUS\", text: \"Someone is hunting animus dragons. Do you hide, fight back, or try to reason with them?\", requirements: (c) => c.isAnimus },\n  { id: \"magical_plague\", type: \"ANIMUS\", text: \"A magical plague spreads and only you can stop it. Do you risk everything to save others?\", requirements: (c) => c.isAnimus },\n  { id: \"reality_break\", type: \"ANIMUS\", text: \"Your magic tears a hole in reality itself. Do you try to fix it or explore what lies beyond?\", requirements: (c) => c.isAnimus },\n  { id: \"animus_council\", type: \"ANIMUS\", text: \"A secret council of animus dragons invites you to join. Do you accept or maintain independence?\", requirements: (c) => c.isAnimus },\n  { id: \"power_transfer\", type: \"ANIMUS\", text: \"You could transfer your animus powers to someone else. Do you consider it or keep them?\", requirements: (c) => c.isAnimus },\n  { id: \"temporal_magic\", type: \"ANIMUS\", text: \"You discover you can manipulate time with magic. Do you experiment or fear the consequences?\", requirements: (c) => c.isAnimus },\n];\n\nfunction generateChoicesForScenario(scenario: ScenarioData, character: Character): Choice[] {\n  const baseChoices = [\n    {\n      id: `${scenario.id}_choice_1`,\n      text: \"Take action decisively\",\n      description: \"Act quickly and decisively\",\n      soulCost: scenario.type === 'ANIMUS' && character.isAnimus ? Math.floor(Math.random() * 10) + 5 : 0,\n      sanityCost: Math.floor(Math.random() * 5),\n      consequences: [\"Your decisive action has consequences...\"]\n    },\n    {\n      id: `${scenario.id}_choice_2`, \n      text: \"Consider carefully before acting\",\n      description: \"Take time to think through the situation\",\n      soulCost: scenario.type === 'ANIMUS' && character.isAnimus ? Math.floor(Math.random() * 5) : 0,\n      sanityCost: Math.floor(Math.random() * 3),\n      consequences: [\"Careful consideration guides your path...\"]\n    },\n    {\n      id: `${scenario.id}_choice_3`,\n      text: \"Avoid getting involved\",\n      description: \"Stay out of the situation entirely\",\n      soulCost: 0,\n      sanityCost: Math.floor(Math.random() * 8) + 2,\n      consequences: [\"Sometimes wisdom is knowing when not to act...\"]\n    }\n  ];\n\n  // Add special choice for animus scenarios\n  if (scenario.type === 'ANIMUS' && character.isAnimus) {\n    const magicChoice: Choice = {\n      id: `${scenario.id}_choice_magic`,\n      text: \"Use powerful animus magic\",\n      description: \"Solve the problem with raw magical power\",\n      soulCost: Math.floor(Math.random() * 20) + 10,\n      sanityCost: 0,\n      consequences: [\"Power solves problems, but at what cost to your soul?\"],\n      corruption: true\n    };\n    baseChoices.push(magicChoice);\n  }\n\n  // Add special choice for mind reading scenarios\n  if (scenario.type === 'MINDREADING' && (character.tribalPowers.includes('Mind Reading') || character.specialPowers.includes('Enhanced Mind Reading'))) {\n    baseChoices.push({\n      id: `${scenario.id}_choice_mindread`,\n      text: \"Use mind reading abilities\",\n      description: \"Read the thoughts of others involved\",\n      soulCost: 0,\n      sanityCost: Math.floor(Math.random() * 10) + 5,\n      consequences: [\"Knowledge gained through mental intrusion carries its own weight...\"]\n    });\n  }\n\n  return baseChoices;\n}\n\nexport function generateScenario(character: Character, gameData: GameData): Scenario {\n  // Filter scenarios based on character abilities\n  const availableScenarios = SCENARIO_DATABASE.filter(scenario => {\n    if (scenario.requirements) {\n      return scenario.requirements(character);\n    }\n    \n    // Filter out type-specific scenarios if character doesn't have the ability\n    if (scenario.type === 'ANIMUS' && !character.isAnimus) {\n      return false;\n    }\n    if (scenario.type === 'MINDREADING' && \n        !character.tribalPowers.includes('Mind Reading') && \n        !character.specialPowers.includes('Enhanced Mind Reading')) {\n      return false;\n    }\n    if (scenario.type === 'PROPHECY' && \n        !character.tribalPowers.includes('Prophecy (rare)') && \n        !character.specialPowers.includes('Foresight') &&\n        !character.specialPowers.includes('Enhanced Prophecy')) {\n      return false;\n    }\n    \n    return true;\n  });\n\n  if (availableScenarios.length === 0) {\n    // Fallback to normal scenarios if no others available\n    const normalScenarios = SCENARIO_DATABASE.filter(s => s.type === 'NORMAL');\n    const scenario = normalScenarios[Math.floor(Math.random() * normalScenarios.length)];\n    \n    return {\n      id: scenario.id,\n      title: \"A Choice Awaits\",\n      description: \"Your decision will shape your path\",\n      narrativeText: [scenario.text],\n      choices: generateChoicesForScenario(scenario, character),\n      type: 'mundane',\n      location: gameData.location,\n      timeOfDay: \"afternoon\",\n      weather: \"calm\"\n    };\n  }\n\n  const scenario = availableScenarios[Math.floor(Math.random() * availableScenarios.length)];\n  \n  // Determine scenario type for game engine\n  let gameType: 'mundane' | 'extraordinary' | 'magical' | 'tribal' | 'prophetic' = 'mundane';\n  switch (scenario.type) {\n    case 'ANIMUS':\n      gameType = 'magical';\n      break;\n    case 'WARS':\n      gameType = 'extraordinary';\n      break;\n    case 'PROPHECY':\n      gameType = 'prophetic';\n      break;\n    case 'MINDREADING':\n      gameType = 'tribal';\n      break;\n    case 'LEARNING':\n      gameType = 'extraordinary';\n      break;\n    default:\n      gameType = 'mundane';\n  }\n\n  return {\n    id: scenario.id,\n    title: getScenarioTitle(scenario),\n    description: getScenarioDescription(scenario),\n    narrativeText: [\n      scenario.text,\n      generateContextualNarrative(scenario, character, gameData)\n    ],\n    choices: generateChoicesForScenario(scenario, character),\n    type: gameType,\n    location: gameData.location,\n    timeOfDay: getRandomTimeOfDay(),\n    weather: getRandomWeather()\n  };\n}\n\nfunction getScenarioTitle(scenario: ScenarioData): string {\n  const titles = {\n    'NORMAL': ['A Social Encounter', 'Daily Life', 'An Opportunity', 'A Chance Meeting', 'Life at the Academy'],\n    'ANIMUS': ['The Temptation of Power', 'Magical Consequences', 'Soul Magic Calls', 'The Animus Burden', 'Power\\'s Price'],\n    'MINDREADING': ['Thoughts Revealed', 'Mental Intrusion', 'The Mind\\'s Eye', 'Psychic Awareness', 'Inner Voices'],\n    'PROPHECY': ['Future\\'s Shadow', 'Prophetic Vision', 'Destiny Calls', 'The Sight', 'Fate\\'s Warning'],\n    'WARS': ['War\\'s Toll', 'Battle\\'s Edge', 'Conflict Zone', 'The Front Lines', 'Military Crisis'],\n    'LEARNING': ['Knowledge Sought', 'Educational Choice', 'Study Opportunity', 'Academic Challenge', 'Learning Path']\n  };\n  \n  const typeList = titles[scenario.type] || titles['NORMAL'];\n  return typeList[Math.floor(Math.random() * typeList.length)];\n}\n\nfunction getScenarioDescription(scenario: ScenarioData): string {\n  const descriptions = {\n    'NORMAL': 'A situation in daily life that requires a decision',\n    'ANIMUS': 'A choice that could affect your soul and magical power',\n    'MINDREADING': 'Your mind reading abilities reveal important information',\n    'PROPHECY': 'A vision of the future guides your decision',\n    'WARS': 'The ongoing conflict presents a difficult choice',\n    'LEARNING': 'An opportunity to gain knowledge and wisdom'\n  };\n  \n  return descriptions[scenario.type] || descriptions['NORMAL'];\n}\n\nfunction generateContextualNarrative(scenario: ScenarioData, character: Character, gameData: GameData): string {\n  const contextualElements = [\n    `As a ${character?.tribe || 'dragon'} dragon, your perspective shapes your approach.`,\n    `The atmosphere around you adds tension to the moment.`,\n    `Your experiences at ${gameData?.location || 'this place'} influence your decision.`,\n    `The weight of your choices so far guides your thinking.`,\n    `Your tribal heritage whispers guidance in your mind.`,\n    `The memory of past lessons echoes in your thoughts.`,\n    `The atmosphere around you seems charged with possibility.`,\n    `You feel the eyes of others watching your reaction.`,\n    `Your instincts tell you this moment is important.`,\n    `The consequences of this choice will ripple outward.`\n  ];\n  \n  return contextualElements[Math.floor(Math.random() * contextualElements.length)];\n}\n\nfunction getRandomTimeOfDay(): string {\n  const times = ['dawn', 'morning', 'midday', 'afternoon', 'evening', 'dusk', 'night', 'midnight'];\n  return times[Math.floor(Math.random() * times.length)];\n}\n\nfunction getRandomWeather(): string {\n  const weather = ['sunny', 'cloudy', 'rainy', 'stormy', 'foggy', 'windy', 'calm', 'overcast'];\n  return weather[Math.floor(Math.random() * weather.length)];\n}\n\nexport function generateTimeInfo(character: Character): string {\n  const seasons = ['Spring', 'Summer', 'Fall', 'Winter'];\n  const times = ['Early morning', 'Mid-morning', 'Late morning', 'Early afternoon', 'Mid-afternoon', 'Late afternoon', 'Early evening', 'Late evening'];\n  \n  const season = character?.currentSeason || seasons[Math.floor(Math.random() * seasons.length)];\n  const time = times[Math.floor(Math.random() * times.length)];\n  const year = (character?.yearsSurvived || 0) + 1;\n  \n  return `${time}, ${season} of Year ${year}`;\n}\n\nexport function generateLocation(): string {\n  const locations = [\n    \"Jade Mountain Academy\",\n    \"Queen's Palace\",\n    \"Ancient Ruins\",\n    \"Tribal Border\",\n    \"Mysterious Cave\",\n    \"Sacred Grove\",\n    \"War Camp\",\n    \"Peaceful Village\",\n    \"Abandoned Castle\",\n    \"Underground Tunnels\",\n    \"Mountain Peak\",\n    \"Desert Oasis\",\n    \"Coastal Cliffs\",\n    \"Forest Clearing\",\n    \"Ice Palace\",\n    \"Volcano Rim\",\n    \"Hidden Valley\",\n    \"Sky Kingdom\",\n    \"Sea Palace\",\n    \"Mud Kingdom\",\n    \"Sand Kingdom\",\n    \"Night Kingdom\",\n    \"Rain Forest\",\n    \"Frozen Wasteland\"\n  ];\n  \n  return locations[Math.floor(Math.random() * locations.length)];\n}","size_bytes":22119},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/game.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useParams } from \"wouter\";\nimport { Character, GameData, Choice, CustomSpell, InventoryItem } from \"@shared/schema\";\nimport { EnhancedGameEngine } from \"@/lib/enhanced-game-engine\";\nimport CharacterPanel from \"@/components/character-panel\";\nimport GameplayArea from \"@/components/gameplay-area\";\nimport MagicModal from \"@/components/magic-modal\";\nimport TribalPowersModal from \"@/components/tribal-powers-modal\";\nimport SpecialPowerModal from \"@/components/special-power-modal\";\nimport CustomActionModal from \"@/components/custom-action-modal\";\nimport ConversationModal from \"@/components/conversation-modal\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Save, Home, Skull, Eye } from \"lucide-react\";\nimport { useLocalGameState } from \"@/hooks/use-local-game-state\";\nimport { LocalGameStorage } from \"@/lib/local-storage\";\n\nexport default function Game() {\n  const { gameId } = useParams();\n  const { toast } = useToast();\n  const [showMagicModal, setShowMagicModal] = useState(false);\n  const [showTribalPowersModal, setShowTribalPowersModal] = useState(false);\n  const [showSpecialPowerModal, setShowSpecialPowerModal] = useState(false);\n  const [showCustomActionModal, setShowCustomActionModal] = useState(false);\n  const [showConversationModal, setShowConversationModal] = useState(false);\n  const [specialPowerType, setSpecialPowerType] = useState<'prophecy' | 'mindreading' | 'future' | null>(null);\n  const [conversationData, setConversationData] = useState<{topic: string, otherDragon: string} | null>(null);\n  const [aiControlMessage, setAiControlMessage] = useState<string | null>(null);\n  const [aiInterval, setAiInterval] = useState<NodeJS.Timeout | null>(null);\n  const [aiActionInProgress, setAiActionInProgress] = useState<string | null>(null);\n  const [gameOverState, setGameOverState] = useState<{ isGameOver: boolean; reason?: string; allowContinue?: boolean } | null>(null);\n  const [hasChosenCorruption, setHasChosenCorruption] = useState(false);\n  const [gameState, setGameState] = useState<{ characterData: Character; gameData: GameData } | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const [corruptionWhisper, setCorruptionWhisper] = useState<string | null>(null);\n  const [showCorruptionPopup, setShowCorruptionPopup] = useState(false);\n\n  const { updateGame } = useLocalGameState();\n\n  const generateCorruptionWhisper = (character: Character) => {\n    try {\n      const whisper = EnhancedGameEngine.generateCorruptionWhisper(character);\n      setCorruptionWhisper(whisper);\n      setShowCorruptionPopup(true);\n      \n      // Auto-hide after 5 seconds\n      setTimeout(() => {\n        setShowCorruptionPopup(false);\n        setCorruptionWhisper(null);\n      }, 5000);\n    } catch (error) {\n      console.error(\"Failed to generate corruption whisper:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (gameId) {\n      const loadedGame = LocalGameStorage.getGameState(gameId);\n      if (loadedGame) {\n        setGameState({\n          characterData: loadedGame.characterData,\n          gameData: loadedGame.gameData\n        });\n      }\n      setIsLoading(false);\n    }\n  }, [gameId]);\n\n  // Cleanup interval on unmount\n  useEffect(() => {\n    return () => {\n      if (aiInterval) {\n        clearInterval(aiInterval);\n      }\n    };\n  }, [aiInterval]);\n\n  useEffect(() => {\n    if (gameState?.characterData) {\n      const character = gameState.characterData;\n      const stage = character.soulCorruptionStage;\n      \n      if (stage !== 'Normal') {\n        setAiControlMessage(EnhancedGameEngine.getCorruptionMessage(stage));\n      } else {\n        setAiControlMessage(null);\n        // Stop AI control if character is no longer corrupted\n        if (aiInterval) {\n          clearInterval(aiInterval);\n          setAiInterval(null);\n        }\n      }\n\n      // Show corruption whispers for souls below 15%\n      if (EnhancedGameEngine.shouldShowCorruptionPopup(character)) {\n        if (Math.random() < 0.3) { // 30% chance per turn\n          generateCorruptionWhisper(character);\n        }\n      }\n\n      // Check for game over conditions - but allow continuation for corrupted souls\n      const gameOverCheck = EnhancedGameEngine.checkGameOver(character);\n      if (gameOverCheck.isGameOver && !character.isAIControlled && !gameOverState && !hasChosenCorruption) {\n        const allowContinue = character.soulPercentage <= 0; // Allow AI takeover for corrupted souls\n        setGameOverState({ ...gameOverCheck, allowContinue });\n      } else if (!gameOverCheck.isGameOver || character.isAIControlled) {\n        setGameOverState(null);\n      }\n    }\n  }, [gameState, aiInterval]);\n\n  const handleCastSpell = (spell: CustomSpell) => {\n    if (!gameState || !gameId || gameOverState?.isGameOver) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Check if character has enough soul\n    if (character.soulPercentage < spell.estimatedSoulCost) {\n      toast({\n        title: \"Insufficient Soul\",\n        description: \"You don't have enough soul remaining to cast this spell.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Apply soul cost\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - spell.estimatedSoulCost);\n    newCharacter.soulCorruptionStage = {\n      \"Normal\": character.soulPercentage >= 75 ? \"Normal\" : character.soulPercentage >= 50 ? \"Frayed\" : character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Frayed\": character.soulPercentage >= 50 ? \"Frayed\" : character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Twisted\": character.soulPercentage >= 25 ? \"Twisted\" : \"Broken\",\n      \"Broken\": \"Broken\"\n    }[character.soulCorruptionStage] as any;\n\n    // Create enchanted item and add to inventory\n    const newItem: InventoryItem = {\n      id: `item_${Date.now()}`,\n      name: `Enchanted ${spell.targetObject}`,\n      description: spell.enchantmentDescription,\n      type: \"enchanted_object\",\n      enchantments: [spell.enchantmentDescription],\n      soulCostToCreate: spell.estimatedSoulCost,\n      turnCreated: gameData.turn,\n      isActive: true\n    };\n\n    const newGameData = { ...gameData };\n    newGameData.inventory.push(newItem);\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Spell Cast Successfully!\",\n        description: `You enchanted ${spell.targetObject}. Soul cost: ${spell.estimatedSoulCost}%`,\n      });\n\n      setShowMagicModal(false);\n    } catch (error) {\n      toast({\n        title: \"Spell Failed\",\n        description: \"Something went wrong casting your spell.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleChoice = (choice: Choice) => {\n    if (!gameState || !gameId || gameOverState?.isGameOver) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Check if AI should intervene\n    const aiChoice = EnhancedGameEngine.getAIChoice(character, gameData.currentScenario);\n    const actualChoice = aiChoice || choice;\n\n    if (aiChoice) {\n      toast({\n        title: \"Corruption Takes Control\",\n        description: \"Your corrupted soul compels you to make a darker choice...\",\n        variant: \"destructive\",\n      });\n    }\n\n    const { newCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      character,\n      gameData,\n      actualChoice,\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Choice Made\",\n        description: \"Your decision shapes your destiny...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save your choice. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleUsePower = (power: string, scenario?: string) => {\n    if (!gameState || !gameId) return;\n\n    const { characterData: character, gameData } = gameState;\n    let newCharacter = { ...character };\n\n    // Apply power usage costs and effects\n    const sanityCost = Math.floor(Math.random() * 5) + 2;\n    newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - sanityCost);\n\n    // Generate AI description for the power usage with current scenario context\n    const powerContext = {\n      turn: gameData.turn,\n      power,\n      scenario: scenario || gameData.currentScenario.description,\n      currentSituation: gameData.currentScenario.narrativeText.join(' ')\n    };\n    \n    const aiResponse = MockAIService.generateRandomEvent(character, powerContext);\n    const result = scenario ? `${scenario} - ${aiResponse.content}` : aiResponse.content;\n\n    // Process the power use as a choice to advance the storyline\n    const { newCharacter: updatedCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      gameData,\n      {\n        id: `tribal_power_${Date.now()}`,\n        text: `Use ${power}`,\n        description: result,\n        soulCost: 0,\n        sanityCost: sanityCost,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Power Used\",\n        description: result.slice(0, 150) + \"...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Power Failed\",\n        description: \"Your power usage had unexpected results.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowTribalPowersModal(false);\n  };\n\n  const handleSpecialPower = (powerType: 'prophecy' | 'mindreading' | 'future') => {\n    setSpecialPowerType(powerType);\n    setShowSpecialPowerModal(true);\n  };\n\n  const handleSpecialPowerUse = (power: string, result: string) => {\n    if (!gameState || !gameId) return;\n\n    // Special powers cost sanity for non-animus, soul energy for animus\n    const { characterData: character, gameData } = gameState;\n    const newCharacter = { ...character };\n    \n    if (character.isAnimus) {\n      const soulCost = specialPowerType === 'future' ? 5 : specialPowerType === 'mindreading' ? 3 : 2;\n      newCharacter.soulPercentage = Math.max(0, newCharacter.soulPercentage - soulCost);\n      newCharacter.soulCorruptionStage = EnhancedGameEngine.getCorruptionLevel(newCharacter.soulPercentage);\n    } else {\n      const sanityCost = specialPowerType === 'future' ? 8 : specialPowerType === 'mindreading' ? 5 : 3;\n      newCharacter.sanityPercentage = Math.max(0, newCharacter.sanityPercentage - sanityCost);\n    }\n\n    // Generate a new scenario based on the power use result\n    const { newCharacter: updatedCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      gameData,\n      {\n        id: `power_${specialPowerType}`,\n        text: `Use ${power}`,\n        description: result,\n        soulCost: 0,\n        sanityCost: 0,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: power,\n        description: result.slice(0, 150) + \"...\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Vision Failed\",\n        description: \"The mystical energies resist your attempt.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowSpecialPowerModal(false);\n  };\n\n  const handleCustomAction = (action: string, result: string, itemUsed?: InventoryItem) => {\n    if (!gameState || !gameId) return;\n\n    const { characterData: character, gameData } = gameState;\n    let newCharacter = { ...character };\n\n    // Handle enchanted item usage with storyline progression\n    if (itemUsed && itemUsed.enchantments.length > 0) {\n      // Apply enchantment effects based on the description\n      const enchantment = itemUsed.enchantments[0];\n      \n      // Check for major enchantments that should trigger story events\n      if (enchantment.toLowerCase().includes('darkstalker') || \n          enchantment.toLowerCase().includes('resurrection') ||\n          enchantment.toLowerCase().includes('immortal') ||\n          enchantment.toLowerCase().includes('time') ||\n          enchantment.toLowerCase().includes('reality')) {\n        \n        // Major enchantments cost soul for animus dragons\n        if (character.isAnimus) {\n          newCharacter.soulPercentage = Math.max(0, newCharacter.soulPercentage - 15);\n          newCharacter.soulCorruptionStage = EnhancedGameEngine.getCorruptionLevel(newCharacter.soulPercentage);\n        }\n      }\n    }\n\n    // Process the action as a choice to advance the storyline\n    const { newCharacter: updatedCharacter, newGameData } = EnhancedGameEngine.processChoice(\n      newCharacter,\n      gameData,\n      {\n        id: `custom_${Date.now()}`,\n        text: action,\n        description: result,\n        soulCost: 0,\n        sanityCost: Math.floor(Math.random() * 3),\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    // Check if action triggers conversation\n    if (result.toLowerCase().includes('conversation') || result.toLowerCase().includes('talk') || result.toLowerCase().includes('speak')) {\n      const dragonName = extractDragonName(result) || \"Unknown Dragon\";\n      setConversationData({ topic: action, otherDragon: dragonName });\n      setShowConversationModal(true);\n    }\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: updatedCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n\n      toast({\n        title: \"Action Completed\",\n        description: `${action} - ${result.slice(0, 100)}...`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Action Failed\",\n        description: \"Something went wrong. Try again.\",\n        variant: \"destructive\",\n      });\n    }\n    \n    setShowCustomActionModal(false);\n  };\n\n  const handleConversationEnd = (outcome: string, relationship: string) => {\n    toast({\n      title: \"Conversation Ended\",\n      description: `${outcome} - Relationship: ${relationship}`,\n    });\n    setShowConversationModal(false);\n    setConversationData(null);\n  };\n\n  const extractDragonName = (text: string): string | null => {\n    const patterns = [\n      /talks? (?:to|with) ([A-Z][a-z]+)/i,\n      /speaks? (?:to|with) ([A-Z][a-z]+)/i,\n      /approaches? ([A-Z][a-z]+)/i,\n      /meets? ([A-Z][a-z]+)/i\n    ];\n    \n    for (const pattern of patterns) {\n      const match = text.match(pattern);\n      if (match) return match[1];\n    }\n    \n    return null;\n  };\n\n  const handleTribalPower = (power: string, corruptedUse: string) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Apply consequences of using tribal power corruptly\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - 5); // Using powers corruptly costs soul\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - 3);\n\n    // Create a corrupted scenario result\n    const result = `Using ${power}, ${corruptedUse}. The dark deed leaves a stain on your soul.`;\n\n    const newGameData = EnhancedGameEngine.processCustomAction(\n      character,\n      gameData,\n      {\n        action: `Corrupt use of ${power}`,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n    } catch (error) {\n      console.error(\"Failed to handle tribal power:\", error);\n    }\n  };\n\n  const handleAISpecialPower = (power: string, corruptedUse: string) => {\n    if (!gameState || !gameId) return;\n\n    const character = gameState.characterData;\n    const gameData = gameState.gameData;\n\n    // Apply consequences of using special power corruptly\n    const newCharacter = { ...character };\n    newCharacter.soulPercentage = Math.max(0, character.soulPercentage - 8); // Special powers cost more\n    newCharacter.sanityPercentage = Math.max(0, character.sanityPercentage - 5);\n\n    // Create a corrupted scenario result\n    const result = `Corrupting special power \"${power}\": ${corruptedUse}. The perversion of your gift darkens your essence.`;\n\n    const newGameData = EnhancedGameEngine.processCustomAction(\n      character,\n      gameData,\n      {\n        action: `Corrupt use of special power: ${power}`,\n        consequences: [result]\n      },\n      gameData.currentScenario\n    );\n\n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: newGameData,\n        turn: newGameData.turn,\n        location: newGameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n    } catch (error) {\n      console.error(\"Failed to handle special power:\", error);\n    }\n  };\n\n  const continueAsCorrupted = () => {\n    if (!gameState || !gameId) return;\n    \n    // Mark character as AI controlled and continue\n    const newCharacter = { ...gameState.characterData };\n    newCharacter.isAIControlled = true;\n    \n    try {\n      const updatedGame = updateGame(gameId, {\n        characterData: newCharacter,\n        gameData: gameState.gameData,\n        turn: gameState.gameData.turn,\n        location: gameState.gameData.location,\n      });\n      \n      setGameState({\n        characterData: updatedGame.characterData,\n        gameData: updatedGame.gameData\n      });\n      \n      setGameOverState(null);\n      setHasChosenCorruption(true);\n      \n      toast({\n        title: \"Soul Lost\",\n        description: \"The darkness takes control. Watch as your corrupted dragon wreaks havoc...\",\n        variant: \"destructive\"\n      });\n\n      // Start AI control sequence after a brief delay\n      setTimeout(() => {\n        startAIControlSequence();\n      }, 1000);\n    } catch (error) {\n      console.error(\"Failed to continue as corrupted:\", error);\n    }\n  };\n\n  const startAIControlSequence = () => {\n    if (!gameId) return;\n\n    // Show AI taking control message\n    setAiControlMessage(\"🔴 AI CORRUPTION ACTIVE - Your dragon acts autonomously with dark intent. Watch as evil unfolds...\");\n\n    // Clear any existing interval\n    if (aiInterval) {\n      clearInterval(aiInterval);\n    }\n\n    // Set up interval for AI to perform actions automatically\n    const newInterval = setInterval(async () => {\n      // Get fresh game state each time\n      const currentGameState = LocalGameStorage.getGameState(gameId);\n      if (!currentGameState?.characterData?.isAIControlled) {\n        clearInterval(newInterval);\n        setAiInterval(null);\n        return;\n      }\n\n      // Import the enhanced AI controller\n      const { EnhancedAIController } = await import('../lib/enhanced-ai-controller');\n      const aiAction = EnhancedAIController.generateAIAction(\n        currentGameState.characterData, \n        currentGameState.gameData\n      );\n\n      if (!aiAction) {\n        // Fallback to regular choice if no AI action generated\n        const currentScenario = currentGameState.gameData.currentScenario;\n        if (currentScenario && currentScenario.choices && currentScenario.choices.length > 0) {\n          const aiChoice = EnhancedGameEngine.getAIChoice(currentGameState.characterData, currentScenario);\n          const choiceToMake = aiChoice || currentScenario.choices[Math.floor(Math.random() * currentScenario.choices.length)];\n          \n          // Process the choice directly with the game engine\n          const processResult = EnhancedGameEngine.processChoice(\n            currentGameState.characterData,\n            currentGameState.gameData,\n            choiceToMake,\n            currentGameState.gameData.currentScenario\n          );\n\n          try {\n            const updatedGame = updateGame(gameId, {\n              characterData: processResult.newCharacter,\n              gameData: processResult.newGameData,\n              turn: processResult.newGameData.turn,\n              location: processResult.newGameData.location,\n            });\n            \n            setGameState({\n              characterData: updatedGame.characterData,\n              gameData: updatedGame.gameData\n            });\n\n            toast({\n              title: \"🔥 AI MAKES CHOICE\",\n              description: `Your corrupted dragon chooses: ${choiceToMake.text}`,\n              variant: \"destructive\"\n            });\n          } catch (error) {\n            console.error(\"Failed to process AI choice:\", error);\n          }\n        }\n        return;\n      }\n\n      const narrative = EnhancedAIController.generateAINarrative(aiAction, currentGameState.characterData);\n      const whisper = EnhancedAIController.getActionWhisper();\n\n      console.log(\"AI performing action:\", aiAction.type, aiAction.description);\n      console.log(\"Current AI Control Status:\", currentGameState.characterData.isAIControlled);\n      console.log(\"Current Soul %:\", currentGameState.characterData.soulPercentage);\n      \n      // Set action in progress indicator\n      setAiActionInProgress(`Performing ${aiAction.type}: ${aiAction.description}`);\n      \n      toast({\n        title: \"🔥 YOUR CORRUPTED DRAGON TAKES CONTROL\",\n        description: `${narrative} - The darkness spreads...`,\n        duration: 5000,\n        variant: \"destructive\"\n      });\n\n      // Show corruption whisper with more dramatic effect\n      setTimeout(() => {\n        toast({\n          title: \"💀 SOUL CORRUPTION CONSUMES ALL\",\n          description: `${whisper} - Your dragon revels in darkness...`,\n          duration: 4000,\n          variant: \"destructive\"\n        });\n      }, 2000);\n\n      // Clear action in progress after action completes\n      setTimeout(() => {\n        setAiActionInProgress(null);\n      }, 3000);\n\n      // Process AI action directly with game engine instead of calling handlers\n      try {\n        let updatedCharacter = { ...currentGameState.characterData };\n        let updatedGameData = { ...currentGameState.gameData };\n\n        switch (aiAction.type) {\n          case 'magic':\n            if (currentGameState.characterData.isAnimus) {\n              const spell = aiAction.data;\n              // Apply soul cost\n              updatedCharacter.soulPercentage = Math.max(0, updatedCharacter.soulPercentage - spell.estimatedSoulCost);\n              \n              // Create enchanted item\n              const newItem: InventoryItem = {\n                id: `item_${Date.now()}`,\n                name: `Enchanted ${spell.targetObject}`,\n                description: spell.enchantmentDescription,\n                type: \"enchanted_object\",\n                enchantments: [spell.enchantmentDescription],\n                soulCostToCreate: spell.estimatedSoulCost,\n                isActive: true,\n              };\n\n              updatedGameData.inventory = [...(updatedGameData.inventory || []), newItem];\n              updatedGameData = EnhancedGameEngine.processCustomAction(\n                updatedCharacter,\n                updatedGameData,\n                { action: `Cast dark spell on ${spell.targetObject}`, consequences: [spell.enchantmentDescription] },\n                updatedGameData.currentScenario\n              );\n            }\n            break;\n          case 'custom_action':\n            updatedGameData = EnhancedGameEngine.processCustomAction(\n              updatedCharacter,\n              updatedGameData,\n              { action: aiAction.data, consequences: [\"The corrupted dragon performs this evil deed with malicious glee.\"] },\n              updatedGameData.currentScenario\n            );\n            break;\n          default:\n            // For other action types, just advance the scenario\n            updatedGameData = EnhancedGameEngine.processCustomAction(\n              updatedCharacter,\n              updatedGameData,\n              { action: `AI performs ${aiAction.type}`, consequences: [narrative] },\n              updatedGameData.currentScenario\n            );\n            break;\n        }\n\n        // Update game state\n        const refreshedGame = updateGame(gameId, {\n          characterData: updatedCharacter,\n          gameData: updatedGameData,\n          turn: updatedGameData.turn,\n          location: updatedGameData.location,\n        });\n        \n        setGameState({\n          characterData: refreshedGame.characterData,\n          gameData: refreshedGame.gameData\n        });\n\n      } catch (error) {\n        console.error(\"Failed to process AI action:\", error);\n      }\n\n    }, 5000); // AI performs an action every 5 seconds\n\n    setAiInterval(newInterval);\n  };\n\n  const handleUseInventoryItem = (item: InventoryItem) => {\n    if (!gameState || !gameId) return;\n\n    // Generate AI description for the item usage\n    const itemDescription = MockAIService.generateObjectDescription(item.name, { \n      turn: gameState.gameData.turn,\n      enchantments: item.enchantments \n    });\n\n    toast({\n      title: \"Item Used\",\n      description: `${item.name}: ${itemDescription.content}`,\n    });\n  };\n\n  const handleSaveGame = () => {\n    toast({\n      title: \"Game Saved\",\n      description: \"Your progress is automatically saved to your browser.\",\n    });\n  };\n\n  const handleBackHome = () => {\n    window.location.href = '/';\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin text-6xl mb-4\">🐉</div>\n          <p className=\"text-slate-300 font-narrative text-lg\">Loading your adventure...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!gameState) {\n    return (\n      <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center\">\n        <div className=\"text-center text-slate-300\">\n          <h2 className=\"text-2xl font-fantasy mb-4\">Game Not Found</h2>\n          <p className=\"mb-4\">The requested game could not be loaded.</p>\n          <Button onClick={handleBackHome} className=\"bg-purple-600 hover:bg-purple-700\">\n            <Home className=\"w-4 h-4 mr-2\" />\n            Return Home\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const character = gameState.characterData;\n  const gameData = gameState.gameData;\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient text-slate-100\">\n      {/* Header */}\n      <header className=\"border-b border-purple-500/30 bg-black/20 backdrop-blur-sm\">\n        <div className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"font-fantasy text-3xl font-bold text-purple-300\">\n              <span className=\"mr-3\">🐉</span>\n              Animus: Wings of Fire RPG\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleSaveGame}\n                className=\"text-purple-300 hover:bg-purple-500/20\"\n                data-testid=\"button-save-game\"\n              >\n                <Save className=\"w-4 h-4\" />\n              </Button>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={handleBackHome}\n                className=\"text-purple-300 hover:bg-purple-500/20\"\n                data-testid=\"button-back-home\"\n              >\n                <Home className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Corruption Warning */}\n      {aiControlMessage && (\n        <div className=\"bg-red-900/90 border-b border-red-500 p-4\">\n          <div className=\"container mx-auto\">\n            <div className=\"flex items-center\">\n              <span className=\"text-2xl mr-3\">⚠️</span>\n              <div>\n                <h4 className=\"font-semibold text-red-300 mb-1\">Soul Corruption Warning</h4>\n                <p className=\"text-sm text-red-200\">{aiControlMessage}</p>\n                {aiActionInProgress && (\n                  <div className=\"mt-2 flex items-center gap-2\">\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-red-300 border-t-transparent\"></div>\n                    <p className=\"text-xs text-red-300 italic\">{aiActionInProgress}</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Corruption Whisper Popup */}\n      {showCorruptionPopup && corruptionWhisper && (\n        <div className=\"fixed top-4 right-4 z-50 max-w-sm animate-pulse\">\n          <div className=\"bg-black/90 border border-red-500 rounded-lg p-4 shadow-lg\">\n            <div className=\"flex items-start gap-3\">\n              <span className=\"text-2xl\">👁️</span>\n              <div>\n                <h4 className=\"font-semibold text-red-300 mb-2\">Dark Whisper</h4>\n                <p className=\"text-sm text-red-200 italic\">{corruptionWhisper}</p>\n              </div>\n              <button \n                onClick={() => setShowCorruptionPopup(false)}\n                className=\"text-red-300 hover:text-red-100 text-lg\"\n              >\n                ×\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      <div className=\"container mx-auto px-4 py-6\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 h-[calc(100vh-120px)]\">\n          <CharacterPanel \n            character={character} \n            inventory={gameData?.inventory || []}\n            onShowTribalPowers={() => setShowTribalPowersModal(true)}\n            onUseInventoryItem={handleUseInventoryItem}\n          />\n          <GameplayArea\n            character={character}\n            gameData={gameData}\n            onChoice={handleChoice}\n            onShowMagic={() => setShowMagicModal(true)}\n            onShowSpecialPower={handleSpecialPower}\n            onShowTribalPowers={() => setShowTribalPowersModal(true)}\n            onCustomAction={() => setShowCustomActionModal(true)}\n            isProcessing={character.isAIControlled}\n          />\n        </div>\n      </div>\n\n      <MagicModal\n        isOpen={showMagicModal}\n        onClose={() => setShowMagicModal(false)}\n        character={character}\n        inventory={gameData?.inventory || []}\n        onCastSpell={handleCastSpell}\n      />\n\n      <TribalPowersModal\n        character={character}\n        currentScenario={gameData.currentScenario.description}\n        isOpen={showTribalPowersModal}\n        onClose={() => setShowTribalPowersModal(false)}\n        onUsePower={handleUsePower}\n      />\n\n      <SpecialPowerModal\n        character={character}\n        powerType={specialPowerType}\n        isOpen={showSpecialPowerModal}\n        onClose={() => setShowSpecialPowerModal(false)}\n        onUsePower={handleSpecialPowerUse}\n      />\n\n      <CustomActionModal\n        character={character}\n        gameData={gameData}\n        inventory={gameData?.inventory || []}\n        isOpen={showCustomActionModal}\n        onClose={() => setShowCustomActionModal(false)}\n        onExecuteAction={handleCustomAction}\n      />\n\n      {conversationData && (\n        <ConversationModal\n          character={character}\n          conversationTopic={conversationData.topic}\n          otherDragon={conversationData.otherDragon}\n          isOpen={showConversationModal}\n          onClose={() => setShowConversationModal(false)}\n          onConversationEnd={handleConversationEnd}\n        />\n      )}\n\n      {/* Enhanced Game Over Modal */}\n      {gameOverState?.isGameOver && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50\">\n          <div className=\"bg-purple-900/90 border border-purple-500 rounded-lg p-8 max-w-md mx-4 text-center\">\n            {gameOverState.allowContinue ? (\n              <>\n                <h2 className=\"text-2xl font-bold text-red-400 mb-4 flex items-center justify-center\">\n                  <Skull className=\"w-6 h-6 mr-2\" />\n                  Soul Corrupted\n                </h2>\n                <p className=\"text-red-200 mb-6\">\n                  Your soul has been completely consumed by darkness. The animus magic has taken control of your mind and body.\n                </p>\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={continueAsCorrupted}\n                    className=\"w-full bg-red-600 hover:bg-red-700\"\n                  >\n                    <Eye className=\"w-4 h-4 mr-2\" />\n                    Watch AI Control Your Corrupted Dragon\n                  </Button>\n                  <Button \n                    onClick={() => window.location.href = '/'} \n                    variant=\"outline\"\n                    className=\"w-full\"\n                  >\n                    Return Home\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => window.location.reload()}\n                    className=\"w-full\"\n                  >\n                    Restart Game\n                  </Button>\n                </div>\n              </>\n            ) : (\n              <>\n                <h2 className=\"text-2xl font-bold text-red-400 mb-4\">Game Over</h2>\n                <p className=\"text-purple-200 mb-6\">{gameOverState.reason}</p>\n                <div className=\"space-y-3\">\n                  <Button \n                    onClick={() => window.location.href = '/'} \n                    className=\"w-full bg-purple-600 hover:bg-purple-700\"\n                  >\n                    Return Home\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => window.location.reload()}\n                    className=\"w-full\"\n                  >\n                    Restart Game\n                  </Button>\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":35660},"client/src/pages/home.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { generateCharacter } from \"@/lib/character-generator\";\nimport { generateScenario, generateTimeInfo } from \"@/lib/scenario-generator-final\";\nimport { Character, GameData, InsertGameState } from \"@shared/schema\";\nimport CharacterCreator from \"@/components/character-creator\";\nimport { User, Sparkles, GamepadIcon, Save } from \"lucide-react\";\nimport { useLocalGameState } from \"@/hooks/use-local-game-state\";\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [isCreating, setIsCreating] = useState(false);\n  const [showCharacterCreator, setShowCharacterCreator] = useState(false);\n  const [showLoadMenu, setShowLoadMenu] = useState(false);\n  const { createGame, getAllGames, loadGame } = useLocalGameState();\n\n  const handleNewGame = () => {\n    setIsCreating(true);\n    \n    const character = generateCharacter();\n    createGameWithCharacter(character);\n  };\n\n  const createGameWithCharacter = (character: Character) => {\n    const gameData: GameData = {\n      turn: 1,\n      location: \"Jade Mountain Academy\",\n      timeInfo: generateTimeInfo(),\n      currentScenario: generateScenario(character, {} as GameData),\n      history: [],\n      relationships: {},\n      inventory: [],\n      reputation: 0,\n      politicalEvents: [],\n      warStatus: { isAtWar: false, warringTribes: [], warCause: \"\", playerInvolvement: \"neutral\" },\n      explorationLog: []\n    };\n\n    const gameState: InsertGameState = {\n      userId: null,\n      characterData: character,\n      gameData: gameData,\n      turn: 1,\n      location: gameData.location\n    };\n\n    try {\n      const newGame = createGame(gameState);\n      setLocation(`/game/${newGame.id}`);\n    } catch (error) {\n      console.error(\"Failed to create game:\", error);\n      setIsCreating(false);\n    }\n  };\n\n  const handleCustomCharacter = (character: Character) => {\n    setShowCharacterCreator(false);\n    setIsCreating(true);\n    createGameWithCharacter(character);\n  };\n\n  const handleLoadGame = (gameId: string) => {\n    loadGame(gameId);\n    setLocation(`/game/${gameId}`);\n  };\n\n  const savedGames = getAllGames();\n\n  if (showCharacterCreator) {\n    return (\n      <CharacterCreator \n        onCreateCharacter={handleCustomCharacter}\n        onCancel={() => setShowCharacterCreator(false)}\n      />\n    );\n  }\n\n  if (isCreating) {\n    return (\n      <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin text-6xl mb-4\">🐉</div>\n          <p className=\"text-slate-300 font-narrative text-lg\">Creating your dragon adventure...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-dragon-gradient flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-2xl bg-black/20 border-purple-500/30 backdrop-blur-sm\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"text-6xl\">🐉</div>\n          </div>\n          <CardTitle className=\"text-4xl font-fantasy text-purple-300 mb-2\">\n            Animus: Wings of Fire RPG\n          </CardTitle>\n          <CardDescription className=\"text-purple-200 text-lg font-narrative\">\n            A text-based RPG where you play as an animus dragon, wielding the most dangerous magic in Pyrrhia. \n            Every spell costs a piece of your soul—lose too much, and the darkness will consume you.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-purple-200\">\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🎭 Dynamic Storytelling</h3>\n              <p>Every playthrough is unique with randomly generated characters, families, and scenarios.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🌟 Soul-Loss Mechanics</h3>\n              <p>Using animus magic corrupts your soul. Lose control as darkness takes over.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">⚔️ Meaningful Choices</h3>\n              <p>Every decision has consequences that ripple through your dragon's story.</p>\n            </div>\n            <div className=\"bg-black/30 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-purple-400 mb-2\">🔮 AI Corruption</h3>\n              <p>When your soul is lost, the game makes increasingly dark choices for you.</p>\n            </div>\n          </div>\n\n          <div className=\"flex flex-col space-y-4\">\n            <Button \n              size=\"lg\" \n              className=\"w-full bg-purple-600 hover:bg-purple-700 text-white font-fantasy text-lg py-6\"\n              onClick={handleNewGame}\n              disabled={isCreating}\n            >\n              {isCreating ? (\n                <>\n                  <div className=\"animate-spin mr-2\">⚡</div>\n                  Generating Your Dragon...\n                </>\n              ) : (\n                <>\n                  <Sparkles className=\"w-5 h-5 mr-2\" />\n                  Quick Start (Random Dragon)\n                </>\n              )}\n            </Button>\n            \n            <Button \n              variant=\"outline\" \n              size=\"lg\" \n              className=\"w-full border-purple-400/50 text-purple-300 hover:bg-purple-500/10\"\n              onClick={() => setShowCharacterCreator(true)}\n              disabled={isCreating}\n            >\n              <User className=\"w-5 h-5 mr-2\" />\n              Create Custom Dragon\n            </Button>\n\n            {savedGames.length > 0 && (\n              <Button \n                variant=\"outline\" \n                size=\"lg\" \n                className=\"w-full border-green-400/50 text-green-300 hover:bg-green-500/10\"\n                onClick={() => setShowLoadMenu(true)}\n                disabled={isCreating}\n              >\n                <Save className=\"w-5 h-5 mr-2\" />\n                Load Saved Game ({savedGames.length})\n              </Button>\n            )}\n          </div>\n\n          <div className=\"text-center text-xs text-purple-400 pt-4 border-t border-purple-700\">\n            <p>Inspired by the Wings of Fire series by Tui T. Sutherland</p>\n            <p className=\"mt-1\">⚠️ Warning: Contains themes of moral corruption and difficult choices</p>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Load Game Modal */}\n      {showLoadMenu && (\n        <div className=\"fixed inset-0 bg-black/80 backdrop-blur-sm flex items-center justify-center z-50 p-4\">\n          <Card className=\"w-full max-w-md bg-black/90 border-purple-500/50\">\n            <CardHeader>\n              <CardTitle className=\"text-purple-300\">Load Saved Game</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n                {savedGames.map((game) => (\n                  <div\n                    key={game.id}\n                    className=\"p-3 bg-purple-900/30 rounded-lg border border-purple-500/30 cursor-pointer hover:bg-purple-800/40 transition-colors\"\n                    onClick={() => {\n                      handleLoadGame(game.id);\n                      setShowLoadMenu(false);\n                    }}\n                  >\n                    <div className=\"font-semibold text-purple-200\">\n                      {game.characterData.name} the {game.characterData.tribe}\n                    </div>\n                    <div className=\"text-xs text-purple-400\">\n                      Turn {game.turn} • {game.location}\n                    </div>\n                    <div className=\"text-xs text-purple-500\">\n                      Soul: {game.characterData.soulPercentage}% • \n                      Stage: {game.characterData.soulCorruptionStage}\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"flex gap-2 mt-4\">\n                <Button \n                  variant=\"outline\" \n                  onClick={() => setShowLoadMenu(false)}\n                  className=\"flex-1\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":8746},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/use-local-game-state.ts":{"content":"import { useState, useEffect, useCallback } from \"react\";\nimport { LocalGameStorage, LocalGameState } from \"@/lib/local-storage\";\nimport { InsertGameState, Character, GameData } from \"@shared/schema\";\n\nexport function useLocalGameState() {\n  const [currentGame, setCurrentGame] = useState<LocalGameState | undefined>(undefined);\n  const [isLoading, setIsLoading] = useState(true);\n\n  // Load current game on hook initialization\n  useEffect(() => {\n    const game = LocalGameStorage.getCurrentGame();\n    setCurrentGame(game);\n    setIsLoading(false);\n  }, []);\n\n  const createGame = useCallback((gameData: InsertGameState): LocalGameState => {\n    const newGame = LocalGameStorage.createGameState(gameData);\n    setCurrentGame(newGame);\n    return newGame;\n  }, []);\n\n  const updateGame = useCallback((id: string, updateData: Partial<InsertGameState>): LocalGameState => {\n    const updatedGame = LocalGameStorage.updateGameState(id, updateData);\n    setCurrentGame(updatedGame);\n    return updatedGame;\n  }, []);\n\n  const deleteGame = useCallback((id: string): void => {\n    LocalGameStorage.deleteGameState(id);\n    if (currentGame?.id === id) {\n      setCurrentGame(undefined);\n    }\n  }, [currentGame?.id]);\n\n  const loadGame = useCallback((id: string): void => {\n    const game = LocalGameStorage.getGameState(id);\n    if (game) {\n      LocalGameStorage.setCurrentGameId(id);\n      setCurrentGame(game);\n    }\n  }, []);\n\n  const getAllGames = useCallback((): LocalGameState[] => {\n    return LocalGameStorage.getAllGameStates();\n  }, []);\n\n  const exportData = useCallback((): string => {\n    return LocalGameStorage.exportGameData();\n  }, []);\n\n  const importData = useCallback((jsonData: string): boolean => {\n    const success = LocalGameStorage.importGameData(jsonData);\n    if (success) {\n      // Refresh current game\n      const game = LocalGameStorage.getCurrentGame();\n      setCurrentGame(game);\n    }\n    return success;\n  }, []);\n\n  const clearAllData = useCallback((): void => {\n    LocalGameStorage.clearAllData();\n    setCurrentGame(undefined);\n  }, []);\n\n  return {\n    currentGame,\n    isLoading,\n    createGame,\n    updateGame,\n    deleteGame,\n    loadGame,\n    getAllGames,\n    exportData,\n    importData,\n    clearAllData,\n  };\n}\n\n// Simplified hook for just getting/setting current character and game data\nexport function useCurrentGameData() {\n  const { currentGame, updateGame } = useLocalGameState();\n\n  const updateCharacter = useCallback((character: Character): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { characterData: character });\n    }\n  }, [currentGame, updateGame]);\n\n  const updateGameData = useCallback((gameData: GameData): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { gameData: gameData });\n    }\n  }, [currentGame, updateGame]);\n\n  const updateBoth = useCallback((character: Character, gameData: GameData): void => {\n    if (currentGame) {\n      updateGame(currentGame.id, { \n        characterData: character, \n        gameData: gameData \n      });\n    }\n  }, [currentGame, updateGame]);\n\n  return {\n    character: currentGame?.characterData,\n    gameData: currentGame?.gameData,\n    gameId: currentGame?.id,\n    updateCharacter,\n    updateGameData,\n    updateBoth,\n    hasGame: !!currentGame,\n  };\n}","size_bytes":3290},"client/src/lib/expanded-achievements.ts":{"content":"import { Character, Dragonet } from \"@shared/schema\";\n\nexport interface Achievement {\n  id: string;\n  name: string;\n  description: string;\n  category: \"magic\" | \"soul\" | \"relationships\" | \"survival\" | \"exploration\" | \"political\" | \"family\";\n  rarity: \"common\" | \"rare\" | \"legendary\";\n  check: (character: Character) => boolean;\n  reward?: string;\n}\n\nexport const ACHIEVEMENTS: Achievement[] = [\n  // Magic Achievements\n  {\n    id: \"first_spell\",\n    name: \"First Steps\",\n    description: \"Cast your first animus spell\",\n    category: \"magic\",\n    rarity: \"common\",\n    check: (character) => character.soulPercentage < 100\n  },\n  {\n    id: \"major_magic\",\n    name: \"Power Unleashed\",\n    description: \"Cast a spell that costs 20+ soul percentage\",\n    category: \"magic\", \n    rarity: \"rare\",\n    check: (character) => character.soulPercentage <= 75\n  },\n  {\n    id: \"catastrophic_magic\",\n    name: \"World Shaker\",\n    description: \"Cast a catastrophic spell (40+ soul cost)\",\n    category: \"magic\",\n    rarity: \"legendary\",\n    check: (character) => character.soulPercentage <= 50\n  },\n\n  // Soul Corruption Achievements\n  {\n    id: \"soul_frayed\",\n    name: \"Cracks in the Foundation\",\n    description: \"Reach Frayed soul corruption stage\",\n    category: \"soul\",\n    rarity: \"common\",\n    check: (character) => character.soulCorruptionStage !== \"Normal\"\n  },\n  {\n    id: \"soul_twisted\",\n    name: \"Darkness Creeping\",\n    description: \"Reach Twisted soul corruption stage\",\n    category: \"soul\",\n    rarity: \"rare\",\n    check: (character) => character.soulCorruptionStage === \"Twisted\" || character.soulCorruptionStage === \"Broken\"\n  },\n  {\n    id: \"soul_broken\",\n    name: \"Point of No Return\",\n    description: \"Reach Broken soul corruption stage\",\n    category: \"soul\",\n    rarity: \"legendary\",\n    check: (character) => character.soulCorruptionStage === \"Broken\"\n  },\n  {\n    id: \"soul_guardian\",\n    name: \"Pure of Heart\", \n    description: \"Survive 50 turns with Normal soul stage\",\n    category: \"soul\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 15 && character.soulCorruptionStage === \"Normal\"\n  },\n\n  // Relationship Achievements\n  {\n    id: \"first_friend\",\n    name: \"Not Alone\",\n    description: \"Make your first friend\",\n    category: \"relationships\",\n    rarity: \"common\",\n    check: (character) => Object.values(character.relationships || {}).some(r => r.type === \"friend\")\n  },\n  {\n    id: \"popular_dragon\",\n    name: \"Social Butterfly\",\n    description: \"Have 5 or more friendships\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => Object.values(character.relationships || {}).filter(r => r.type === \"friend\").length >= 5\n  },\n  {\n    id: \"first_love\",\n    name: \"Heart's Awakening\",\n    description: \"Experience your first romance\",\n    category: \"relationships\",\n    rarity: \"common\",\n    check: (character) => (character.romanticHistory || []).length > 0\n  },\n  {\n    id: \"true_mate\",\n    name: \"Eternal Bond\",\n    description: \"Find a lifelong mate\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => !!character.mate\n  },\n  {\n    id: \"heartbreaker\",\n    name: \"Love and Loss\",\n    description: \"Experience 3 different romantic relationships\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => (character.romanticHistory || []).length >= 3\n  },\n\n  // Family Achievements\n  {\n    id: \"first_dragonet\",\n    name: \"New Life\",\n    description: \"Have your first dragonet\",\n    category: \"family\",\n    rarity: \"common\",\n    check: (character) => (character.dragonets || []).length > 0\n  },\n  {\n    id: \"big_family\",\n    name: \"Dragon Dynasty\",\n    description: \"Have 3 or more dragonets\",\n    category: \"family\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).length >= 3\n  },\n  {\n    id: \"animus_bloodline\",\n    name: \"Legacy of Power\",\n    description: \"Have an animus dragonet\",\n    category: \"family\",\n    rarity: \"legendary\",\n    check: (character) => (character.dragonets || []).some(d => d.isAnimus)\n  },\n  {\n    id: \"hybrid_offspring\",\n    name: \"Mixed Heritage\",\n    description: \"Have a hybrid dragonet\",\n    category: \"family\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).some(d => d.hybridTribes && d.hybridTribes.length > 1)\n  },\n\n  // Survival Achievements\n  {\n    id: \"decade_dragon\",\n    name: \"Veteran Survivor\",\n    description: \"Survive to age 15\",\n    category: \"survival\",\n    rarity: \"common\",\n    check: (character) => character.age >= 15\n  },\n  {\n    id: \"ancient_dragon\",\n    name: \"Elder Wisdom\",\n    description: \"Survive to age 50\",\n    category: \"survival\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 50\n  },\n  {\n    id: \"legendary_dragon\",\n    name: \"Living Legend\",\n    description: \"Survive to age 100\",\n    category: \"survival\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 100\n  },\n\n  // Political Achievements\n  {\n    id: \"political_player\",\n    name: \"Court Intrigue\",\n    description: \"Get involved in tribal politics\",\n    category: \"political\",\n    rarity: \"common\",\n    check: (character) => (character.lifeEvents || []).some(e => e.category === \"political\")\n  },\n  {\n    id: \"war_veteran\",\n    name: \"Battle Scarred\",\n    description: \"Survive a tribal war\",\n    category: \"political\",\n    rarity: \"rare\",\n    check: (character) => (character.lifeEvents || []).some(e => e.category === \"war\")\n  },\n\n  // Special Hybrid Achievements\n  {\n    id: \"mixed_heritage\",\n    name: \"Between Worlds\",\n    description: \"Be born as a hybrid dragon\",\n    category: \"exploration\",\n    rarity: \"rare\",\n    check: (character) => character.hybridTribes && character.hybridTribes.length >= 2\n  },\n  {\n    id: \"tribal_unity\",\n    name: \"Bridge Builder\",\n    description: \"Have friends from 3+ different tribes\",\n    category: \"relationships\",\n    rarity: \"rare\",\n    check: (character) => {\n      const friendTribes = new Set();\n      Object.values(character.relationships || {}).forEach(r => {\n        if (r.type === \"friend\") {\n          // In a real implementation, you'd track friend tribes\n          friendTribes.add(\"tribe\"); // Placeholder\n        }\n      });\n      return friendTribes.size >= 3;\n    }\n  }\n];\n\nexport class AchievementSystem {\n  static checkAchievements(character: Character): string[] {\n    const newAchievements: string[] = [];\n    \n    ACHIEVEMENTS.forEach(achievement => {\n      if (!character.achievements.includes(achievement.id) && achievement.check(character)) {\n        character.achievements.push(achievement.id);\n        newAchievements.push(achievement.name);\n      }\n    });\n\n    return newAchievements;\n  }\n\n  static getAchievement(id: string): Achievement | undefined {\n    return ACHIEVEMENTS.find(a => a.id === id);\n  }\n\n  static getCharacterAchievements(character: Character): Achievement[] {\n    return character.achievements\n      .map(id => this.getAchievement(id))\n      .filter((a): a is Achievement => a !== undefined);\n  }\n\n  static getAchievementsByCategory(category: Achievement[\"category\"]): Achievement[] {\n    return ACHIEVEMENTS.filter(a => a.category === category);\n  }\n\n  static calculateAchievementScore(character: Character): number {\n    const achievements = this.getCharacterAchievements(character);\n    let score = 0;\n    \n    achievements.forEach(achievement => {\n      switch (achievement.rarity) {\n        case \"common\": score += 10; break;\n        case \"rare\": score += 25; break;\n        case \"legendary\": score += 50; break;\n      }\n    });\n\n    return score;\n  }\n\n  static getProgressTowardsAchievements(character: Character): Array<{achievement: Achievement, progress: string}> {\n    const progress: Array<{achievement: Achievement, progress: string}> = [];\n    \n    // Examples of progress tracking\n    const unlockedIds = new Set(character.achievements);\n    \n    ACHIEVEMENTS.forEach(achievement => {\n      if (unlockedIds.has(achievement.id)) return;\n      \n      let progressText = \"\";\n      \n      // Age-based achievements\n      if (achievement.id === \"decade_dragon\") {\n        progressText = `${character.age}/15 years old`;\n      } else if (achievement.id === \"ancient_dragon\") {\n        progressText = `${character.age}/50 years old`;\n      } else if (achievement.id === \"legendary_dragon\") {\n        progressText = `${character.age}/100 years old`;\n      }\n      // Relationship achievements\n      else if (achievement.id === \"popular_dragon\") {\n        const friends = Object.values(character.relationships || {}).filter(r => r.type === \"friend\").length;\n        progressText = `${friends}/5 friends`;\n      }\n      // Family achievements\n      else if (achievement.id === \"big_family\") {\n        const dragonets = (character.dragonets || []).length;\n        progressText = `${dragonets}/3 dragonets`;\n      }\n\n      if (progressText) {\n        progress.push({ achievement, progress: progressText });\n      }\n    });\n\n    return progress;\n  }\n}\n\nexport default AchievementSystem;","size_bytes":9000},"client/src/lib/game-endings.ts":{"content":"import { Character } from \"@shared/schema\";\nimport { AchievementSystem } from \"./expanded-achievements\";\n\nexport interface GameEnding {\n  id: string;\n  title: string;\n  description: string;\n  longDescription: string;\n  category: \"victory\" | \"tragic\" | \"neutral\" | \"legendary\";\n  rarity: \"common\" | \"rare\" | \"legendary\";\n  check: (character: Character) => boolean;\n  achievementPoints: number;\n}\n\nexport const GAME_ENDINGS: GameEnding[] = [\n  // Victory Endings\n  {\n    id: \"pure_heart_victory\",\n    title: \"The Pure Heart\",\n    description: \"You maintained your pure soul throughout a long life, inspiring generations.\",\n    longDescription: \"Despite having the power to reshape the world, you chose restraint and wisdom. Your soul remained untainted by corruption, and your example inspired countless dragons to resist the temptations of dark magic. You lived to see great peace across the tribes, knowing you helped build a better world.\",\n    category: \"victory\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 80 && character.soulCorruptionStage === \"Normal\",\n    achievementPoints: 1000\n  },\n  {\n    id: \"wise_elder_victory\",\n    title: \"The Wise Elder\",\n    description: \"You became a revered elder, sharing wisdom gained through many trials.\",\n    longDescription: \"Your long life was filled with both triumphs and sorrows, but you learned from every experience. In your final years, dragons from all tribes sought your counsel. Your wisdom helped prevent wars, heal ancient wounds, and guide the young away from the same mistakes you once made.\",\n    category: \"victory\",\n    rarity: \"rare\",\n    check: (character) => character.age >= 100 && character.achievements.length >= 15,\n    achievementPoints: 800\n  },\n  {\n    id: \"family_legacy_victory\",\n    title: \"The Great Parent\",\n    description: \"Your greatest achievement was the loving family you raised.\",\n    longDescription: \"While others sought power or glory, you found meaning in family. Your dragonets grew to be exceptional dragons, carrying forward your values and love. Your bloodline became known across Pyrrhia for their kindness, strength, and wisdom. In raising them well, you achieved true immortality.\",\n    category: \"victory\",\n    rarity: \"rare\",\n    check: (character) => (character.dragonets || []).length >= 5 && !!character.mate && character.age >= 50,\n    achievementPoints: 750\n  },\n  {\n    id: \"reformed_soul_victory\",\n    title: \"Soul's Redemption\",\n    description: \"After walking in darkness, you found your way back to the light.\",\n    longDescription: \"Your soul bore the scars of corruption, but you fought against the darkness within. Through tremendous willpower and the love of those who believed in you, you managed to halt your soul's decay. Though forever changed, you proved that even the corrupted could choose good.\",\n    category: \"victory\",\n    rarity: \"legendary\",\n    check: (character) => character.soulCorruptionStage === \"Twisted\" && character.age >= 60 && (character.dragonets || []).length > 0,\n    achievementPoints: 900\n  },\n\n  // Tragic Endings\n  {\n    id: \"soul_consumed_tragedy\",\n    title: \"Consumed by Power\",\n    description: \"Your soul was devoured by animus magic, leaving only darkness.\",\n    longDescription: \"The power was too tempting, the corruption too seductive. Spell by spell, choice by choice, you fed your soul to the hungry magic until nothing remained of who you once were. In the end, you became exactly what the ancient warnings feared - an animus dragon lost to darkness.\",\n    category: \"tragic\",\n    rarity: \"common\",\n    check: (character) => character.soulPercentage <= 0,\n    achievementPoints: 100\n  },\n  {\n    id: \"isolation_tragedy\",\n    title: \"Alone in the Dark\",\n    description: \"Your corruption drove away everyone you loved, leaving you utterly alone.\",\n    longDescription: \"As your soul darkened, so did your relationships. Friends abandoned you, family feared you, and even your mate couldn't bear to stay. You spent your final years in bitter solitude, surrounded by magical power but having no one to share it with. Your greatest treasure became your greatest curse.\",\n    category: \"tragic\",\n    rarity: \"rare\",\n    check: (character) => character.soulCorruptionStage === \"Broken\" && Object.values(character.relationships || {}).filter(r => r.isAlive).length === 0,\n    achievementPoints: 200\n  },\n  {\n    id: \"war_casualty_tragedy\",\n    title: \"Price of War\",\n    description: \"You died fighting for what you believed in.\",\n    longDescription: \"When the tribes went to war, you couldn't stand aside. Whether fighting for justice, defending the innocent, or protecting your homeland, you gave your life for the cause. Though your story ended in tragedy, you're remembered as a hero who stood up when it mattered most.\",\n    category: \"tragic\",\n    rarity: \"rare\", \n    check: (character) => character.age <= 30 && (character.lifeEvents || []).some(e => e.category === \"war\"),\n    achievementPoints: 400\n  },\n\n  // Neutral Endings\n  {\n    id: \"quiet_life_neutral\",\n    title: \"The Quiet Life\",\n    description: \"You lived a peaceful, unremarkable existence.\",\n    longDescription: \"You never sought great power or fame, preferring the simple pleasures of daily life. While others changed the world, you tended your garden, raised your dragonets, and found contentment in small moments. There's something to be said for a life well-lived in peace.\",\n    category: \"neutral\",\n    rarity: \"common\",\n    check: (character) => character.age >= 40 && character.soulPercentage > 50 && character.achievements.length < 10,\n    achievementPoints: 300\n  },\n  {\n    id: \"wanderer_neutral\",\n    title: \"Roads Not Taken\",\n    description: \"You spent your life exploring and discovering new places and experiences.\",\n    longDescription: \"The call of adventure was stronger than any desire to settle down. You saw distant lands, met dragons from every tribe, and collected stories like treasures. Your life was a tapestry of experiences, each thread a different color, creating something beautiful and unique.\",\n    category: \"neutral\",\n    rarity: \"rare\",\n    check: (character) => (character.lifeEvents || []).filter(e => e.category === \"discovery\").length >= 5,\n    achievementPoints: 500\n  },\n\n  // Legendary Endings\n  {\n    id: \"world_changer_legendary\",\n    title: \"World Shaper\",\n    description: \"Your actions fundamentally changed dragon society.\",\n    longDescription: \"You didn't just live through history - you made it. Through your choices, your magic, and your influence, you reshaped the world itself. Future generations will study your decisions, debate your methods, and live with the consequences of your vision. For better or worse, you left an indelible mark on Pyrrhia.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 50 && character.achievements.length >= 20 && character.soulPercentage >= 25,\n    achievementPoints: 1200\n  },\n  {\n    id: \"sacrifice_legendary\",\n    title: \"Ultimate Sacrifice\", \n    description: \"You gave everything to save others.\",\n    longDescription: \"When the moment came to choose between your own life and the lives of others, you didn't hesitate. Your sacrifice saved countless dragons, ended a great war, or prevented a terrible catastrophe. Though your story ended, your name became legend, inspiring dragons for generations to come.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age <= 50 && character.soulPercentage <= 10 && (character.dragonets || []).length > 0,\n    achievementPoints: 1000\n  },\n  {\n    id: \"transcendence_legendary\",\n    title: \"The Transcendent\",\n    description: \"You achieved something beyond ordinary dragon existence.\",\n    longDescription: \"Through your mastery of animus magic, profound wisdom, or extraordinary experiences, you transcended the normal boundaries of dragon existence. Whether you became something more than mortal or achieved a perfect balance between power and purity, you reached a state few dragons have ever imagined.\",\n    category: \"legendary\",\n    rarity: \"legendary\",\n    check: (character) => character.age >= 120 && character.soulCorruptionStage === \"Normal\" && character.achievements.length >= 25,\n    achievementPoints: 1500\n  }\n];\n\nexport class EndingSystem {\n  static determineEnding(character: Character): GameEnding | null {\n    // Check for applicable endings, prioritizing by rarity and category\n    const applicableEndings = GAME_ENDINGS.filter(ending => ending.check(character));\n    \n    if (applicableEndings.length === 0) return null;\n\n    // Sort by priority: legendary > rare > common, victory > neutral > tragic\n    const priority = (ending: GameEnding): number => {\n      let score = 0;\n      \n      // Rarity bonus\n      switch (ending.rarity) {\n        case \"legendary\": score += 100; break;\n        case \"rare\": score += 50; break;\n        case \"common\": score += 10; break;\n      }\n      \n      // Category bonus\n      switch (ending.category) {\n        case \"legendary\": score += 40; break;\n        case \"victory\": score += 30; break;\n        case \"neutral\": score += 20; break;\n        case \"tragic\": score += 10; break;\n      }\n      \n      return score;\n    };\n\n    // Return the highest priority ending\n    return applicableEndings.sort((a, b) => priority(b) - priority(a))[0];\n  }\n\n  static getEndingSummary(character: Character, ending: GameEnding): {\n    ending: GameEnding;\n    finalStats: {\n      age: number;\n      soulPercentage: number;\n      achievements: number;\n      achievementScore: number;\n      relationships: number;\n      dragonets: number;\n    };\n    lifeSummary: string;\n  } {\n    const achievementScore = AchievementSystem.calculateAchievementScore(character);\n    const relationships = Object.values(character.relationships || {}).filter(r => r.isAlive).length;\n    \n    let lifeSummary = `${character.name} the ${character.tribe}`;\n    if (character.hybridTribes && character.hybridTribes.length > 1) {\n      lifeSummary += ` (${character.hybridTribes.join(\"-\")} Hybrid)`;\n    }\n    lifeSummary += ` lived ${character.age} years.`;\n    \n    if (character.mate) {\n      lifeSummary += ` Bonded with ${character.mate}.`;\n    }\n    \n    if (character.dragonets && character.dragonets.length > 0) {\n      lifeSummary += ` Raised ${character.dragonets.length} dragonet${character.dragonets.length > 1 ? 's' : ''}.`;\n    }\n\n    return {\n      ending,\n      finalStats: {\n        age: character.age,\n        soulPercentage: character.soulPercentage,\n        achievements: character.achievements.length,\n        achievementScore,\n        relationships,\n        dragonets: character.dragonets ? character.dragonets.length : 0\n      },\n      lifeSummary\n    };\n  }\n\n  static getAllPossibleEndings(): GameEnding[] {\n    return GAME_ENDINGS;\n  }\n\n  static getEndingsByCategory(category: GameEnding[\"category\"]): GameEnding[] {\n    return GAME_ENDINGS.filter(e => e.category === category);\n  }\n}\n\nexport default EndingSystem;","size_bytes":11020},"client/src/lib/local-storage.ts":{"content":"import { GameState, InsertGameState, Character, GameData } from \"@shared/schema\";\n\n// Local storage keys\nconst GAME_STATES_KEY = \"wof-rpg-game-states\";\nconst CURRENT_GAME_KEY = \"wof-rpg-current-game\";\n\nexport interface LocalGameState {\n  id: string;\n  userId: string | null;\n  characterData: Character;\n  gameData: GameData;\n  turn: number;\n  location: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport class LocalGameStorage {\n  private static getGameStates(): Record<string, LocalGameState> {\n    try {\n      const stored = localStorage.getItem(GAME_STATES_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.error(\"Error reading game states from localStorage:\", error);\n      return {};\n    }\n  }\n\n  private static setGameStates(gameStates: Record<string, LocalGameState>): void {\n    try {\n      localStorage.setItem(GAME_STATES_KEY, JSON.stringify(gameStates));\n    } catch (error) {\n      console.error(\"Error saving game states to localStorage:\", error);\n    }\n  }\n\n  static getGameState(id: string): LocalGameState | undefined {\n    const gameStates = this.getGameStates();\n    return gameStates[id];\n  }\n\n  static getGameStateByUserId(userId: string): LocalGameState | undefined {\n    const gameStates = this.getGameStates();\n    return Object.values(gameStates).find(gameState => gameState.userId === userId);\n  }\n\n  static createGameState(insertGameState: InsertGameState): LocalGameState {\n    const id = `game_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n    const now = new Date().toISOString();\n    \n    const gameState: LocalGameState = {\n      id,\n      createdAt: now,\n      updatedAt: now,\n      userId: insertGameState.userId || null,\n      turn: insertGameState.turn || 1,\n      location: insertGameState.location || \"Jade Mountain Academy\",\n      characterData: insertGameState.characterData as Character,\n      gameData: insertGameState.gameData as GameData,\n    };\n\n    const gameStates = this.getGameStates();\n    gameStates[id] = gameState;\n    this.setGameStates(gameStates);\n\n    // Set as current game\n    this.setCurrentGameId(id);\n\n    return gameState;\n  }\n\n  static updateGameState(id: string, updateData: Partial<InsertGameState>): LocalGameState {\n    const gameStates = this.getGameStates();\n    const existingGameState = gameStates[id];\n    \n    if (!existingGameState) {\n      throw new Error(\"Game state not found\");\n    }\n\n    const updatedGameState: LocalGameState = {\n      ...existingGameState,\n      ...(updateData as Partial<LocalGameState>),\n      updatedAt: new Date().toISOString(),\n    };\n\n    gameStates[id] = updatedGameState;\n    this.setGameStates(gameStates);\n\n    return updatedGameState;\n  }\n\n  static deleteGameState(id: string): void {\n    const gameStates = this.getGameStates();\n    delete gameStates[id];\n    this.setGameStates(gameStates);\n\n    // Clear current game if it was deleted\n    if (this.getCurrentGameId() === id) {\n      this.clearCurrentGameId();\n    }\n  }\n\n  static getAllGameStates(): LocalGameState[] {\n    const gameStates = this.getGameStates();\n    return Object.values(gameStates).sort((a, b) => \n      new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n    );\n  }\n\n  static setCurrentGameId(gameId: string): void {\n    try {\n      localStorage.setItem(CURRENT_GAME_KEY, gameId);\n    } catch (error) {\n      console.error(\"Error setting current game ID:\", error);\n    }\n  }\n\n  static getCurrentGameId(): string | null {\n    try {\n      return localStorage.getItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error getting current game ID:\", error);\n      return null;\n    }\n  }\n\n  static clearCurrentGameId(): void {\n    try {\n      localStorage.removeItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error clearing current game ID:\", error);\n    }\n  }\n\n  static getCurrentGame(): LocalGameState | undefined {\n    const currentId = this.getCurrentGameId();\n    return currentId ? this.getGameState(currentId) : undefined;\n  }\n\n  // Utility methods for backup and restore\n  static exportGameData(): string {\n    const gameStates = this.getGameStates();\n    const currentGameId = this.getCurrentGameId();\n    \n    return JSON.stringify({\n      gameStates,\n      currentGameId,\n      exportedAt: new Date().toISOString(),\n      version: \"1.0\"\n    }, null, 2);\n  }\n\n  static importGameData(jsonData: string): boolean {\n    try {\n      const data = JSON.parse(jsonData);\n      \n      if (data.gameStates) {\n        this.setGameStates(data.gameStates);\n      }\n      \n      if (data.currentGameId) {\n        this.setCurrentGameId(data.currentGameId);\n      }\n      \n      return true;\n    } catch (error) {\n      console.error(\"Error importing game data:\", error);\n      return false;\n    }\n  }\n\n  // Clear all data (for testing or reset)\n  static clearAllData(): void {\n    try {\n      localStorage.removeItem(GAME_STATES_KEY);\n      localStorage.removeItem(CURRENT_GAME_KEY);\n    } catch (error) {\n      console.error(\"Error clearing all data:\", error);\n    }\n  }\n}","size_bytes":5058},"client/src/lib/romance-system.ts":{"content":"import { Character, Dragonet, RomanticEvent, Relationship } from \"@shared/schema\";\n\nexport class RomanceSystem {\n  // Names for dragon partners\n  private static readonly DRAGON_NAMES = [\n    \"Ember\", \"Frostbite\", \"Coral\", \"Sandstorm\", \"Viper\", \"Rainbow\", \"Shadow\", \"Moonbeam\",\n    \"Thunder\", \"Starlight\", \"Clay\", \"Ruby\", \"Sapphire\", \"Crystal\", \"Storm\", \"Breeze\",\n    \"Phoenix\", \"Galaxy\", \"Mist\", \"Flame\", \"Glacier\", \"Opal\", \"Onyx\", \"Jade\"\n  ];\n\n  static getRandomPartnerName(): string {\n    return this.DRAGON_NAMES[Math.floor(Math.random() * this.DRAGON_NAMES.length)];\n  }\n\n  static canHaveRomance(character: Character): boolean {\n    return character.age >= 7 && character.soulCorruptionStage !== \"Broken\";\n  }\n\n  static generateRomanticEncounter(character: Character): {\n    partnerName: string;\n    partnerTribe: string;\n    scenario: string;\n    isHybrid: boolean;\n  } {\n    const partnerName = this.getRandomPartnerName();\n    const partnerTribe = this.getRandomTribe(character.tribe);\n    const isHybrid = Math.random() < 0.3; // 30% chance of hybrid partner\n    \n    const scenarios = [\n      `You meet ${partnerName}, a charming ${partnerTribe} dragon at Jade Mountain Academy.`,\n      `${partnerName} saves your life during a dangerous expedition, and you feel drawn to them.`,\n      `You and ${partnerName} bond over shared interests and similar experiences.`,\n      `${partnerName} challenges you to a friendly competition, and sparks fly.`,\n      `You encounter ${partnerName} during a diplomatic mission between tribes.`\n    ];\n\n    return {\n      partnerName,\n      partnerTribe,\n      scenario: scenarios[Math.floor(Math.random() * scenarios.length)],\n      isHybrid\n    };\n  }\n\n  private static getRandomTribe(excludeTribe: string): string {\n    const tribes = [\"MudWing\", \"SandWing\", \"SkyWing\", \"SeaWing\", \"IceWing\", \"RainWing\", \"NightWing\", \"SilkWing\", \"HiveWing\", \"LeafWing\"];\n    const availableTribes = tribes.filter(tribe => tribe !== excludeTribe);\n    return availableTribes[Math.floor(Math.random() * availableTribes.length)];\n  }\n\n  static developRomance(character: Character, partnerName: string, partnerTribe: string): void {\n    // Add romantic relationship\n    character.relationships[partnerName] = {\n      name: partnerName,\n      type: \"romantic\",\n      strength: Math.floor(Math.random() * 40) + 30, // 30-70 strength\n      history: [\"First romantic encounter\"],\n      isAlive: true\n    };\n\n    // Add to romantic history\n    const romanticEvent: RomanticEvent = {\n      partnerName,\n      eventType: \"courtship\",\n      turnOccurred: character.age,\n      outcome: \"developing relationship\",\n      hasOffspring: false\n    };\n\n    if (!character.romanticHistory) {\n      character.romanticHistory = [];\n    }\n    character.romanticHistory.push(romanticEvent);\n  }\n\n  static canMate(character: Character, partnerName: string): boolean {\n    const relationship = character.relationships[partnerName];\n    return relationship && \n           relationship.type === \"romantic\" && \n           relationship.strength >= 60 &&\n           character.age >= 8;\n  }\n\n  static attemptMating(character: Character, partnerName: string): boolean {\n    if (!this.canMate(character, partnerName)) return false;\n\n    const relationship = character.relationships[partnerName];\n    const success = Math.random() < 0.7; // 70% success rate\n\n    if (success) {\n      // Update relationship to mate\n      relationship.type = \"mate\";\n      relationship.strength = Math.min(100, relationship.strength + 20);\n      relationship.history.push(\"Became mates\");\n      character.mate = partnerName;\n\n      // Add mating event\n      const romanticEvent: RomanticEvent = {\n        partnerName,\n        eventType: \"mating\",\n        turnOccurred: character.age,\n        outcome: \"successful bonding\",\n        hasOffspring: false\n      };\n      character.romanticHistory.push(romanticEvent);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  static generateOffspring(character: Character, partnerName: string, partnerTribe: string): Dragonet | null {\n    if (!character.mate || character.mate !== partnerName) return null;\n    if (Math.random() > 0.6) return null; // 60% chance of offspring\n\n    const relationship = character.relationships[partnerName];\n    const isHybrid = character.tribe !== partnerTribe;\n    \n    // Generate name\n    const dragonetNames = [\"Pebble\", \"Spark\", \"Brook\", \"Ember\", \"Frost\", \"Leaf\", \"Sky\", \"Ocean\"];\n    const dragonetName = dragonetNames[Math.floor(Math.random() * dragonetNames.length)];\n\n    // Determine tribe (hybrid or pure)\n    let dragonetTribe = character.tribe;\n    let hybridTribes = undefined;\n\n    if (isHybrid) {\n      dragonetTribe = Math.random() < 0.5 ? character.tribe : partnerTribe;\n      hybridTribes = [character.tribe, partnerTribe];\n    }\n\n    // Inherit animus magic (rare)\n    const inheritAnimus = (character.isAnimus && Math.random() < 0.3) || \n                         (Math.random() < 0.1); // 30% from animus parent, 10% random\n\n    // Inherit traits\n    const inheritedTraits = [];\n    if (character.traits.length > 0 && Math.random() < 0.5) {\n      inheritedTraits.push(character.traits[Math.floor(Math.random() * character.traits.length)]);\n    }\n\n    const personalities = [\"brave\", \"shy\", \"curious\", \"fierce\", \"gentle\", \"mischievous\", \"wise\", \"playful\"];\n\n    const dragonet: Dragonet = {\n      name: dragonetName,\n      age: 0,\n      tribe: dragonetTribe,\n      hybridTribes,\n      inheritedTraits,\n      isAnimus: inheritAnimus,\n      parentage: \"biological\",\n      personality: personalities[Math.floor(Math.random() * personalities.length)]\n    };\n\n    // Add to character's dragonets\n    if (!character.dragonets) {\n      character.dragonets = [];\n    }\n    character.dragonets.push(dragonet);\n\n    // Update romantic event\n    const lastEvent = character.romanticHistory[character.romanticHistory.length - 1];\n    if (lastEvent && lastEvent.partnerName === partnerName) {\n      lastEvent.hasOffspring = true;\n    }\n\n    return dragonet;\n  }\n\n  static ageDragonets(character: Character): void {\n    if (!character.dragonets) return;\n\n    character.dragonets.forEach(dragonet => {\n      dragonet.age += 1;\n    });\n  }\n\n  static getRelationshipAdvice(character: Character, partnerName: string): string[] {\n    const relationship = character.relationships[partnerName];\n    if (!relationship) return [\"No relationship exists with this dragon.\"];\n\n    const advice = [];\n    \n    if (relationship.strength < 30) {\n      advice.push(\"Your relationship is struggling. Consider spending more quality time together.\");\n    } else if (relationship.strength < 60) {\n      advice.push(\"Your relationship is developing well. Keep building trust and understanding.\");\n    } else {\n      advice.push(\"You have a strong bond. This relationship could last a lifetime.\");\n    }\n\n    if (relationship.type === \"romantic\" && character.age >= 8) {\n      advice.push(\"You might consider taking your relationship to the next level.\");\n    }\n\n    if (character.soulCorruptionStage !== \"Normal\") {\n      advice.push(\"Your soul corruption may affect your relationships. Be mindful of how you treat loved ones.\");\n    }\n\n    return advice;\n  }\n}\n\nexport default RomanceSystem;","size_bytes":7223},"client/src/lib/simplified-query-client.ts":{"content":"// Simplified client for any remaining API needs (keeping minimal for compatibility)\nexport const apiRequest = async (method: string, url: string, body?: any) => {\n  // Placeholder for any future API needs\n  throw new Error(\"API calls are disabled - using local storage\");\n};\n\nexport const queryClient = {\n  invalidateQueries: () => {\n    // No-op for local storage\n  }\n};","size_bytes":372},"client/src/components/conversation-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { MessageCircle, ArrowRight, X } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface ConversationMessage {\n  speaker: string;\n  text: string;\n  isPlayer: boolean;\n}\n\ninterface ConversationChoice {\n  text: string;\n  tone: 'friendly' | 'hostile' | 'neutral' | 'diplomatic' | 'cunning';\n}\n\ninterface ConversationModalProps {\n  character: Character;\n  conversationTopic: string;\n  otherDragon: string;\n  isOpen: boolean;\n  onClose: () => void;\n  onConversationEnd: (outcome: string, relationship: string) => void;\n}\n\nexport default function ConversationModal({ \n  character, \n  conversationTopic,\n  otherDragon,\n  isOpen, \n  onClose, \n  onConversationEnd \n}: ConversationModalProps) {\n  const [messages, setMessages] = useState<ConversationMessage[]>([]);\n  const [currentChoices, setCurrentChoices] = useState<ConversationChoice[]>([]);\n  const [conversationTurn, setConversationTurn] = useState(0);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  useEffect(() => {\n    if (isOpen && conversationTopic) {\n      initializeConversation();\n    }\n  }, [isOpen, conversationTopic]);\n\n  const initializeConversation = () => {\n    setMessages([]);\n    setConversationTurn(0);\n    \n    // Generate opening message from the other dragon\n    const openingContext = {\n      topic: conversationTopic,\n      speaker: otherDragon,\n      turn: 0,\n      playerTribe: character.tribe\n    };\n    \n    const opening = MockAIService.generateRandomEvent(character, openingContext);\n    \n    setMessages([{\n      speaker: otherDragon,\n      text: opening.content,\n      isPlayer: false\n    }]);\n    \n    generateChoices();\n  };\n\n  const generateChoices = () => {\n    const choices: ConversationChoice[] = [\n      {\n        text: generateChoiceText('friendly'),\n        tone: 'friendly'\n      },\n      {\n        text: generateChoiceText('neutral'),\n        tone: 'neutral'\n      },\n      {\n        text: generateChoiceText('diplomatic'),\n        tone: 'diplomatic'\n      }\n    ];\n\n    // Add hostile or cunning options based on character traits\n    if (character.traits.includes('Fierce') || character.traits.includes('Vengeful')) {\n      choices.push({\n        text: generateChoiceText('hostile'),\n        tone: 'hostile'\n      });\n    }\n\n    if (character.traits.includes('Cunning') || character.traits.includes('Ambitious')) {\n      choices.push({\n        text: generateChoiceText('cunning'),\n        tone: 'cunning'\n      });\n    }\n\n    setCurrentChoices(choices);\n  };\n\n  const generateChoiceText = (tone: string): string => {\n    const templates = {\n      friendly: [\n        \"That's interesting! Tell me more about that.\",\n        \"I appreciate you sharing this with me.\",\n        \"I'd love to help if I can.\",\n        \"That sounds like quite an adventure!\"\n      ],\n      neutral: [\n        \"I see. What do you think we should do?\",\n        \"That's certainly one way to look at it.\",\n        \"Hmm, let me think about that.\",\n        \"What would you suggest?\"\n      ],\n      diplomatic: [\n        \"Perhaps we could find a solution that works for everyone.\",\n        \"I understand your perspective, but consider this...\",\n        \"Maybe there's a way to compromise here.\",\n        \"Let's think about this carefully before acting.\"\n      ],\n      hostile: [\n        \"That's ridiculous! You're completely wrong.\",\n        \"I don't have time for this nonsense.\",\n        \"You're either lying or completely deluded.\",\n        \"Keep talking and see what happens.\"\n      ],\n      cunning: [\n        \"That's... very convenient for you, isn't it?\",\n        \"I wonder what you're not telling me.\",\n        \"Interesting. And what do you get out of this?\",\n        \"I'm sure there's more to this story.\"\n      ]\n    };\n\n    const toneTemplates = templates[tone as keyof typeof templates] || templates.neutral;\n    return toneTemplates[Math.floor(Math.random() * toneTemplates.length)];\n  };\n\n  const handleChoice = async (choice: ConversationChoice) => {\n    setIsGenerating(true);\n    \n    // Add player message\n    const newMessages = [...messages, {\n      speaker: character.name,\n      text: choice.text,\n      isPlayer: true\n    }];\n    \n    setMessages(newMessages);\n    \n    // Generate response\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    \n    const responseContext = {\n      topic: conversationTopic,\n      playerChoice: choice.text,\n      playerTone: choice.tone,\n      turn: conversationTurn + 1,\n      characterTraits: character.traits\n    };\n    \n    const response = MockAIService.generateRandomEvent(character, responseContext);\n    \n    const finalMessages = [...newMessages, {\n      speaker: otherDragon,\n      text: response.content,\n      isPlayer: false\n    }];\n    \n    setMessages(finalMessages);\n    setConversationTurn(prev => prev + 1);\n    \n    // End conversation after 3-4 exchanges or generate new choices\n    if (conversationTurn >= 2) {\n      endConversation(choice.tone);\n    } else {\n      generateChoices();\n    }\n    \n    setIsGenerating(false);\n  };\n\n  const endConversation = (lastTone: string) => {\n    const outcomes = {\n      friendly: [\"The conversation ends on a positive note\", \"You've made a new friend\", \"They seem to trust you more\"],\n      hostile: [\"The conversation escalates into conflict\", \"They storm off angrily\", \"You've made an enemy\"],\n      neutral: [\"The conversation ends inconclusively\", \"You both go your separate ways\", \"Nothing much changes\"],\n      diplomatic: [\"You reach a mutual understanding\", \"A compromise is achieved\", \"Both parties benefit\"],\n      cunning: [\"You learn valuable information\", \"They suspect your motives\", \"The situation becomes complex\"]\n    };\n\n    const outcomeTexts = outcomes[lastTone as keyof typeof outcomes] || outcomes.neutral;\n    const outcome = outcomeTexts[Math.floor(Math.random() * outcomeTexts.length)];\n    \n    const relationshipChanges = {\n      friendly: \"improved\",\n      hostile: \"worsened\", \n      neutral: \"unchanged\",\n      diplomatic: \"strengthened\",\n      cunning: \"complicated\"\n    };\n\n    const relationship = relationshipChanges[lastTone as keyof typeof relationshipChanges];\n    \n    setTimeout(() => {\n      onConversationEnd(outcome, relationship);\n      onClose();\n    }, 2000);\n  };\n\n  const getToneColor = (tone: string) => {\n    const colors = {\n      friendly: \"text-green-400 border-green-500/30\",\n      hostile: \"text-red-400 border-red-500/30\",\n      neutral: \"text-slate-400 border-slate-500/30\",\n      diplomatic: \"text-blue-400 border-blue-500/30\",\n      cunning: \"text-purple-400 border-purple-500/30\"\n    };\n    return colors[tone as keyof typeof colors] || colors.neutral;\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-blue-300 flex items-center gap-2\">\n            <MessageCircle className=\"w-5 h-5\" />\n            Conversation with {otherDragon}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"p-3 bg-blue-900/20 border border-blue-500/30 rounded-lg\">\n            <p className=\"text-sm text-slate-300\">Topic: {conversationTopic}</p>\n          </div>\n\n          {/* Conversation Messages */}\n          <div className=\"space-y-3 max-h-60 overflow-y-auto\">\n            {messages.map((message, index) => (\n              <div key={index} className={`p-3 rounded-lg ${\n                message.isPlayer \n                  ? 'bg-purple-900/30 border border-purple-500/30 ml-4' \n                  : 'bg-slate-900/30 border border-slate-500/30 mr-4'\n              }`}>\n                <div className=\"flex items-center gap-2 mb-1\">\n                  <Badge variant={message.isPlayer ? \"default\" : \"outline\"} className=\"text-xs\">\n                    {message.speaker}\n                  </Badge>\n                </div>\n                <p className=\"text-sm text-slate-200\">{message.text}</p>\n              </div>\n            ))}\n          </div>\n\n          {/* Conversation Choices */}\n          {currentChoices.length > 0 && !isGenerating && (\n            <div className=\"space-y-3\">\n              <h4 className=\"font-semibold text-slate-200\">How do you respond?</h4>\n              {currentChoices.map((choice, index) => (\n                <Button\n                  key={index}\n                  variant=\"outline\"\n                  className={`w-full text-left p-3 ${getToneColor(choice.tone)}`}\n                  onClick={() => handleChoice(choice)}\n                >\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm\">{choice.text}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {choice.tone}\n                      </Badge>\n                      <ArrowRight className=\"w-4 h-4\" />\n                    </div>\n                  </div>\n                </Button>\n              ))}\n            </div>\n          )}\n\n          {isGenerating && (\n            <div className=\"text-center py-4\">\n              <MessageCircle className=\"w-6 h-6 animate-pulse mx-auto mb-2 text-blue-400\" />\n              <p className=\"text-sm text-slate-400\">They are thinking...</p>\n            </div>\n          )}\n\n          {conversationTurn >= 3 && (\n            <div className=\"p-3 bg-green-900/20 border border-green-500/30 rounded-lg\">\n              <p className=\"text-sm text-green-300\">Conversation concluding...</p>\n            </div>\n          )}\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={onClose} variant=\"outline\">\n            <X className=\"w-4 h-4 mr-2\" />\n            End Conversation\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":10155},"client/src/components/custom-action-modal.tsx":{"content":"import { Character, GameData, InventoryItem } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { Sparkles, Send, Package, Zap } from \"lucide-react\";\nimport { useState } from \"react\";\n\ninterface CustomActionModalProps {\n  character: Character;\n  gameData: GameData;\n  inventory: InventoryItem[];\n  isOpen: boolean;\n  onClose: () => void;\n  onExecuteAction: (action: string, result: string, itemUsed?: InventoryItem) => void;\n}\n\nexport default function CustomActionModal({ \n  character, \n  gameData,\n  inventory, \n  isOpen, \n  onClose, \n  onExecuteAction \n}: CustomActionModalProps) {\n  const [customAction, setCustomAction] = useState(\"\");\n  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);\n  const [actionResult, setActionResult] = useState<string>(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const generateActionResult = () => {\n    if (!customAction.trim()) return;\n    \n    setIsGenerating(true);\n    \n    // Simulate AI processing\n    setTimeout(() => {\n      // Generate AI response based on action and context\n      const context = {\n        turn: gameData.turn,\n        location: gameData.location,\n        action: customAction,\n        tribe: character.tribe,\n        item: selectedItem?.name,\n        itemEnchantments: selectedItem?.enchantments || []\n      };\n      \n      let result = \"\";\n      \n      if (selectedItem) {\n        // Action with item usage\n        const response = MockAIService.generateRandomEvent(character, gameData);\n        result = `You use ${selectedItem.name} to ${customAction.toLowerCase()}. ${response.content}`;\n      } else {\n        // Pure custom action\n        const response = MockAIService.generateRandomEvent(character, gameData);\n        result = `You attempt to ${customAction.toLowerCase()}. ${response.content}`;\n      }\n      \n      setActionResult(result);\n      setIsGenerating(false);\n    }, 1500);\n  };\n\n  const executeAction = () => {\n    if (actionResult) {\n      onExecuteAction(customAction, actionResult, selectedItem || undefined);\n      reset();\n      onClose();\n    }\n  };\n\n  const reset = () => {\n    setCustomAction(\"\");\n    setSelectedItem(null);\n    setActionResult(\"\");\n    setIsGenerating(false);\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={(open) => { if (!open) { reset(); onClose(); } }}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-yellow-300 flex items-center gap-2\">\n            <Sparkles className=\"w-5 h-5\" />\n            Custom Action\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className=\"p-4 bg-yellow-900/20 border border-yellow-500/30 rounded-lg\">\n            <p className=\"text-sm text-slate-300\">\n              Describe what you want your dragon to do. Be creative! You can interact with other dragons, \n              explore locations, use items, or try anything you can imagine within the Wings of Fire universe.\n            </p>\n          </div>\n\n          {/* Action Input */}\n          <div className=\"space-y-2\">\n            <Label htmlFor=\"action\">What do you want to do?</Label>\n            <Input\n              id=\"action\"\n              value={customAction}\n              onChange={(e) => setCustomAction(e.target.value)}\n              placeholder=\"e.g., 'Approach the group of SkyWing dragonets and ask about the missing scroll' or 'Use my fire breath to light the ancient torch'\"\n              className=\"bg-black/50 border-yellow-500/30\"\n              disabled={isGenerating}\n            />\n          </div>\n\n          {/* Inventory Selection */}\n          {inventory.length > 0 && (\n            <div className=\"space-y-3\">\n              <Label>Use an item (optional):</Label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2\">\n                <Button\n                  variant={selectedItem === null ? \"default\" : \"outline\"}\n                  onClick={() => setSelectedItem(null)}\n                  className=\"text-left p-3\"\n                  disabled={isGenerating}\n                >\n                  <div className=\"flex items-center\">\n                    <Zap className=\"w-4 h-4 mr-2\" />\n                    No item (use natural abilities)\n                  </div>\n                </Button>\n                \n                {inventory.slice(0, 5).map((item, index) => (\n                  <Button\n                    key={index}\n                    variant={selectedItem?.id === item.id ? \"default\" : \"outline\"}\n                    onClick={() => setSelectedItem(item)}\n                    className=\"text-left p-3\"\n                    disabled={isGenerating}\n                  >\n                    <div className=\"flex items-center\">\n                      <Package className=\"w-4 h-4 mr-2\" />\n                      <div>\n                        <div className=\"font-medium text-sm\">{item.name}</div>\n                        <div className=\"text-xs text-slate-400\">{item.type.replace('_', ' ')}</div>\n                      </div>\n                    </div>\n                  </Button>\n                ))}\n              </div>\n              \n              {selectedItem && (\n                <div className=\"p-3 bg-purple-900/20 border border-purple-500/30 rounded-lg\">\n                  <div className=\"flex items-center gap-2 mb-2\">\n                    <Package className=\"w-4 h-4\" />\n                    <span className=\"font-medium text-purple-300\">Selected: {selectedItem.name}</span>\n                  </div>\n                  <p className=\"text-sm text-slate-300\">{selectedItem.description}</p>\n                  {selectedItem.enchantments.length > 0 && (\n                    <div className=\"text-sm text-blue-300 mt-2\">\n                      ✨ Enchantments: {selectedItem.enchantments.join(', ')}\n                    </div>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n\n          {/* Generate Button */}\n          <Button\n            onClick={generateActionResult}\n            disabled={!customAction.trim() || isGenerating}\n            className=\"w-full bg-yellow-600 hover:bg-yellow-700\"\n          >\n            {isGenerating ? (\n              <>\n                <Sparkles className=\"w-4 h-4 mr-2 animate-spin\" />\n                AI is narrating your action...\n              </>\n            ) : (\n              <>\n                <Send className=\"w-4 h-4 mr-2\" />\n                See What Happens\n              </>\n            )}\n          </Button>\n\n          {/* Result Display */}\n          {actionResult && (\n            <div className=\"p-4 bg-gradient-to-r from-yellow-900/30 to-black/30 rounded-lg border border-yellow-500/30\">\n              <div className=\"flex items-center mb-2\">\n                <Sparkles className=\"w-4 h-4 text-yellow-400 mr-2\" />\n                <h4 className=\"font-semibold text-yellow-300\">Action Result</h4>\n              </div>\n              <p className=\"text-sm text-slate-200 leading-relaxed whitespace-pre-line\">{actionResult}</p>\n              \n              <div className=\"flex justify-end mt-4\">\n                <Button\n                  onClick={executeAction}\n                  className=\"bg-yellow-600 hover:bg-yellow-700\"\n                >\n                  Commit to This Action\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Examples */}\n          <div className=\"p-3 bg-slate-900/20 border border-slate-600/30 rounded-lg\">\n            <h5 className=\"font-semibold text-slate-300 mb-2\">Example Actions:</h5>\n            <div className=\"text-xs text-slate-400 space-y-1\">\n              <div>• \"Challenge the arrogant SkyWing to a flying race\"</div>\n              <div>• \"Sneak into the forbidden library using my RainWing camouflage\"</div>\n              <div>• \"Ask the wise SeaWing elder about ancient prophecies\"</div>\n              <div>• \"Use my enchanted amulet to communicate with distant allies\"</div>\n              <div>• \"Practice my tribal powers in the training caves\"</div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={() => { reset(); onClose(); }} variant=\"outline\">\n            Cancel\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":8679},"client/src/components/special-power-modal.tsx":{"content":"import { Character } from \"@shared/schema\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MockAIService } from \"@/lib/mock-ai-service\";\nimport { Eye, Brain, Sparkles, Zap, RefreshCw } from \"lucide-react\";\nimport { useState, useEffect } from \"react\";\n\ninterface SpecialPowerModalProps {\n  character: Character;\n  powerType: 'prophecy' | 'mindreading' | 'future' | null;\n  isOpen: boolean;\n  onClose: () => void;\n  onUsePower: (power: string, result: string) => void;\n}\n\nexport default function SpecialPowerModal({ \n  character, \n  powerType, \n  isOpen, \n  onClose, \n  onUsePower \n}: SpecialPowerModalProps) {\n  const [currentVision, setCurrentVision] = useState<string>(\"\");\n  const [isGenerating, setIsGenerating] = useState(false);\n  const [usageCount, setUsageCount] = useState(0);\n  const [soulCost, setSoulCost] = useState(0);\n\n  const powerConfig = {\n    prophecy: {\n      title: \"Prophecy Vision\",\n      icon: <Eye className=\"w-5 h-5\" />,\n      color: \"blue\",\n      description: \"Peer into the threads of fate to see what destiny holds\",\n      baseCost: 2,\n      actions: [\n        \"See a vision of the near future\",\n        \"Divine the outcome of a major decision\", \n        \"Glimpse potential dangers ahead\",\n        \"Witness distant events unfolding\",\n        \"Perceive the consequences of current actions\"\n      ]\n    },\n    mindreading: {\n      title: \"Mind Reading\",\n      icon: <Brain className=\"w-5 h-5\" />,\n      color: \"purple\", \n      description: \"Delve into the thoughts and memories of others\",\n      baseCost: 3,\n      actions: [\n        \"Read the surface thoughts of a nearby dragon\",\n        \"Probe deeper into someone's memories\",\n        \"Sense the emotions and intentions around you\",\n        \"Detect lies and hidden motives\",\n        \"Communicate telepathically with another mind\"\n      ]\n    },\n    future: {\n      title: \"Future Sight\",\n      icon: <Sparkles className=\"w-5 h-5\" />,\n      color: \"cyan\",\n      description: \"See across time with enhanced foresight\",\n      baseCost: 5,\n      actions: [\n        \"Glimpse multiple possible futures\",\n        \"See the long-term consequences of actions\",\n        \"Witness events that will shape the world\",\n        \"Perceive threats before they manifest\",\n        \"View the destiny of individuals or kingdoms\"\n      ]\n    }\n  };\n\n  const config = powerType ? powerConfig[powerType] : null;\n\n  useEffect(() => {\n    if (powerType && isOpen) {\n      setUsageCount(0);\n      setSoulCost(config?.baseCost || 0);\n      setCurrentVision(\"\");\n    }\n  }, [powerType, isOpen, config]);\n\n  const generateVision = (actionType: string) => {\n    if (!config || !powerType) return;\n    \n    setIsGenerating(true);\n    \n    // Simulate AI generation delay\n    setTimeout(() => {\n      let vision = \"\";\n      \n      switch (powerType) {\n        case 'prophecy':\n          const prophecy = MockAIService.generateProphecy(character, { action: actionType });\n          vision = prophecy.content;\n          break;\n          \n        case 'mindreading':\n          const mindRead = MockAIService.generateVision(character, { action: actionType });\n          vision = mindRead.content;\n          break;\n          \n        case 'future':\n          const futureVision = MockAIService.generateProphecy(character, { action: actionType, type: 'future' });\n          vision = futureVision.content;\n          break;\n      }\n      \n      setCurrentVision(vision);\n      setUsageCount(prev => prev + 1);\n      setSoulCost(prev => prev + (config.baseCost * usageCount));\n      setIsGenerating(false);\n    }, 1000);\n  };\n\n  const usePower = () => {\n    if (currentVision && config && powerType) {\n      onUsePower(config.title, currentVision);\n      onClose();\n    }\n  };\n\n  if (!config || !powerType) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className={`text-${config.color}-300 flex items-center gap-2`}>\n            {config.icon}\n            {config.title}\n          </DialogTitle>\n        </DialogHeader>\n        \n        <div className=\"space-y-4\">\n          <div className={`p-4 bg-${config.color}-900/20 border border-${config.color}-500/30 rounded-lg`}>\n            <p className=\"text-sm text-slate-300\">{config.description}</p>\n            \n            {usageCount > 0 && (\n              <div className=\"flex items-center gap-4 mt-2 text-xs\">\n                <Badge variant=\"outline\">Uses: {usageCount}</Badge>\n                <Badge variant=\"destructive\">Soul Cost: {soulCost}%</Badge>\n              </div>\n            )}\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"space-y-3\">\n            <h4 className=\"font-semibold text-slate-200\">Choose your vision:</h4>\n            {config.actions.map((action, index) => (\n              <Button\n                key={index}\n                variant=\"outline\"\n                className={`w-full text-left p-3 border-${config.color}-500/30 hover:bg-${config.color}-500/10`}\n                onClick={() => generateVision(action)}\n                disabled={isGenerating}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <span className=\"text-sm\">{action}</span>\n                  {isGenerating ? (\n                    <RefreshCw className=\"w-4 h-4 animate-spin\" />\n                  ) : (\n                    <Zap className=\"w-4 h-4\" />\n                  )}\n                </div>\n              </Button>\n            ))}\n          </div>\n\n          {/* Vision Display */}\n          {currentVision && (\n            <div className={`p-4 bg-gradient-to-r from-${config.color}-900/30 to-black/30 rounded-lg border border-${config.color}-500/30`}>\n              <div className=\"flex items-center mb-2\">\n                {config.icon}\n                <h4 className={`font-semibold text-${config.color}-300 ml-2`}>Vision Received</h4>\n              </div>\n              <p className=\"text-sm text-slate-200 italic leading-relaxed\">{currentVision}</p>\n              \n              <div className=\"flex justify-end mt-4\">\n                <Button\n                  onClick={usePower}\n                  className={`bg-${config.color}-600 hover:bg-${config.color}-700`}\n                >\n                  Use This Vision\n                </Button>\n              </div>\n            </div>\n          )}\n\n          {/* Warning */}\n          <div className={`p-3 bg-${config.color}-900/10 border border-${config.color}-700/30 rounded-lg`}>\n            <p className=\"text-xs text-slate-400\">\n              <strong>Warning:</strong> Using {config.title.toLowerCase()} repeatedly may strain your mind and cost soul energy. \n              Each use becomes more taxing than the last.\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end mt-6\">\n          <Button onClick={onClose} variant=\"outline\">\n            Close\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":7183},"client/src/lib/mock-ai-service.ts":{"content":"// Mock AI Service - Generates contextually-aware random content for Wings of Fire RPG\n// No API keys required - uses local logic and lore knowledge\n\nexport interface AIResponse {\n  content: string;\n  mood?: 'mysterious' | 'ominous' | 'hopeful' | 'dramatic' | 'neutral';\n}\n\nexport class MockAIService {\n  private static wingsOfFireTribes = [\n    'MudWing', 'SandWing', 'SkyWing', 'SeaWing', 'IceWing', 'RainWing', 'NightWing',\n    'SilkWing', 'HiveWing', 'LeafWing'\n  ];\n\n  private static prophecyTemplates = [\n    \"When {element} meets {element2}, the {creature} shall {action}\",\n    \"In the {time} of {event}, {number} dragons will {action} the {object}\",\n    \"The {tribe} dragon with {trait} eyes will {action} when {condition}\",\n    \"From {location} to {location2}, the path of {concept} shall be {adjective}\",\n    \"When the {celestial} {action2} above {location}, {consequence} will follow\"\n  ];\n\n  private static visionTemplates = [\n    \"You see {location} shrouded in {weather}, where {character} {action} a {object}\",\n    \"A flash of {color} light reveals {number} dragons {action} near {landmark}\",\n    \"In your vision, {tribe} dragons are {action} while {event} unfolds\",\n    \"The image shows {character} holding {object} as {weather} approaches {location}\",\n    \"You witness {event} happening at {location} under a {celestial} sky\"\n  ];\n\n  private static objectDescriptions = {\n    scroll: [\n      \"This ancient scroll bears the seal of {tribe} royalty, its edges singed with age\",\n      \"Mysterious runes dance along this parchment, glowing faintly in moonlight\",\n      \"A prophecy scroll that seems to whisper secrets when the wind touches it\"\n    ],\n    gem: [\n      \"A {color} gemstone that pulses with inner fire, warm to the touch\",\n      \"This crystalline stone seems to contain swirling {element} energy\",\n      \"A rare gem that {tribe} dragons once used in their most sacred ceremonies\"\n    ],\n    weapon: [\n      \"An {material} weapon forged in the volcanic depths of the {tribe} kingdom\",\n      \"This blade hums with power, its edge sharp enough to cut through scales\",\n      \"A legendary weapon that once belonged to a {adjective} {tribe} hero\"\n    ],\n    armor: [\n      \"Scales of fallen {tribe} warriors woven into protective armor\",\n      \"This armor bears battle scars from the great {event} war\",\n      \"Enchanted protection that grows stronger with each victory\"\n    ],\n    artifact: [\n      \"A mysterious relic from the time before the {tribe} tribes were divided\",\n      \"This ancient artifact pulses with {element} magic\",\n      \"A sacred object that {tribe} shamans used to commune with spirits\"\n    ]\n  };\n\n  private static powerUsageScenarios = {\n    fire: [\n      \"The cavern is blocked by ice - your fire could melt a path through\",\n      \"Enemy dragons approach in the darkness - illuminate and intimidate them\",\n      \"A fellow dragon is trapped in freezing water - warm them to safety\"\n    ],\n    ice: [\n      \"The ground is unstable - freeze it solid to create safe passage\",\n      \"Pursuers are gaining on you - create an ice barrier to slow them\",\n      \"A forest fire threatens innocents - help contain the flames\"\n    ],\n    electricity: [\n      \"Ancient mechanisms need power to activate the door\",\n      \"Storm clouds gather - channel lightning to charge your scales\",\n      \"Communication crystals are dead - energize them with your spark\"\n    ],\n    water: [\n      \"The desert crossing ahead looks treacherous without water\",\n      \"Toxic fumes fill the air - create a water shield to breathe safely\",\n      \"Injured dragons need healing - pure water accelerates recovery\"\n    ],\n    earth: [\n      \"The mountain path has collapsed - reshape the stone to continue\",\n      \"Enemies corner you in open ground - raise earth walls for protection\",\n      \"Hidden treasures lie beneath - sense valuable metals underground\"\n    ],\n    mind_reading: [\n      \"The suspicious dragon claims innocence - read their true intentions\",\n      \"Multiple paths lie ahead - probe nearby minds for the safest route\",\n      \"Negotiations have stalled - understand what your opponent really wants\"\n    ],\n    prophecy: [\n      \"Dark times approach - seek visions of what's to come\",\n      \"An important decision looms - glimpse the consequences of each choice\",\n      \"Ancient mysteries surround you - divine the truth from the past\"\n    ],\n    camouflage: [\n      \"Guards patrol the forbidden area - slip past unseen\",\n      \"Dangerous predators hunt nearby - become invisible to their eyes\",\n      \"Diplomatic mission requires stealth - infiltrate without detection\"\n    ]\n  };\n\n  private static elements = ['fire', 'ice', 'lightning', 'earth', 'water', 'wind', 'shadow', 'light'];\n  private static colors = ['crimson', 'azure', 'golden', 'emerald', 'violet', 'silver', 'obsidian', 'pearl'];\n  private static materials = ['steel', 'obsidian', 'diamond', 'dragonbone', 'moonstone', 'starsilver'];\n  private static adjectives = ['legendary', 'cursed', 'blessed', 'ancient', 'mystical', 'powerful', 'forgotten'];\n  private static locations = ['Jade Mountain', 'Possibility', 'Diamond Falls', 'Burn\\'s Palace', 'Ruins of the Palace', 'The Scorpion Den'];\n  private static events = ['War of SandWing Succession', 'Great Ice Storm', 'Plague of the Red Death', 'Dragon Rebellion'];\n  private static celestials = ['moon', 'sun', 'stars', 'eclipse', 'aurora'];\n  private static weather = ['storm clouds', 'mist', 'sandstorm', 'blizzard', 'gentle rain', 'scorching heat'];\n\n  static generateObjectDescription(itemName: string, context?: any): AIResponse {\n    const seed = this.createSeed(itemName + (context?.turn || 0));\n    const type = this.determineObjectType(itemName) as keyof typeof this.objectDescriptions;\n    const templates = this.objectDescriptions[type] || this.objectDescriptions.artifact;\n    \n    const template = templates[seed % templates.length];\n    const description = this.fillTemplate(template, seed);\n    \n    return {\n      content: description,\n      mood: 'mysterious'\n    };\n  }\n\n  static generateProphecy(character: any, context?: any): AIResponse {\n    const seed = this.createSeed(character.name + character.tribe + (context?.turn || 0));\n    const template = this.prophecyTemplates[seed % this.prophecyTemplates.length];\n    const prophecy = this.fillTemplate(template, seed);\n    \n    return {\n      content: `The visions swirl before you: \"${prophecy}\"`,\n      mood: 'ominous'\n    };\n  }\n\n  static generateVision(character: any, context?: any): AIResponse {\n    const seed = this.createSeed(character.name + 'vision' + (context?.turn || 0));\n    const template = this.visionTemplates[seed % this.visionTemplates.length];\n    const vision = this.fillTemplate(template, seed);\n    \n    return {\n      content: `Your mind's eye reveals: ${vision}`,\n      mood: 'mysterious'\n    };\n  }\n\n  static generatePowerUsageOptions(power: string, context?: any): string[] {\n    const scenarios = this.powerUsageScenarios[power as keyof typeof this.powerUsageScenarios] || this.powerUsageScenarios.fire;\n    const seed = this.createSeed(power + (context?.turn || 0));\n    \n    // Return 2-3 random scenarios\n    const shuffled = this.shuffle([...scenarios], seed);\n    return shuffled.slice(0, 2 + (seed % 2));\n  }\n\n  static generateRandomEvent(character: any, gameData: any): AIResponse {\n    const seed = this.createSeed(character.name + gameData.turn + 'event');\n    const events = [\n      \"A mysterious {tribe} dragon approaches with urgent news about {event}\",\n      \"Strange {weather} brings {adjective} omens to {location}\",\n      \"You discover {object} hidden in the ruins, but {consequence}\",\n      \"Tribal politics shift as {tribe} dragons {action} against {tribe2}\",\n      \"The {celestial} reveals secrets about your {trait} heritage\"\n    ];\n    \n    const template = events[seed % events.length];\n    const event = this.fillTemplate(template, seed);\n    \n    return {\n      content: event,\n      mood: 'dramatic'\n    };\n  }\n\n  static generateHybridTraits(tribe1: string, tribe2: string): string[] {\n    const seed = this.createSeed(tribe1 + tribe2);\n    const hybridTraits = [\n      `${tribe1}-${tribe2} hybrid scales`,\n      `Mixed ${tribe1.toLowerCase()} and ${tribe2.toLowerCase()} powers`,\n      `Torn between ${tribe1} loyalty and ${tribe2} heritage`,\n      `Unique ${this.elements[seed % this.elements.length]} affinity`,\n      `Conflicted tribal identity`,\n      `Enhanced hybrid vigor`,\n      `Mysterious bloodline abilities`\n    ];\n    \n    const shuffled = this.shuffle([...hybridTraits], seed);\n    return shuffled.slice(0, 2 + (seed % 3));\n  }\n\n  private static createSeed(input: string): number {\n    let hash = 0;\n    for (let i = 0; i < input.length; i++) {\n      const char = input.charCodeAt(i);\n      hash = ((hash << 5) - hash) + char;\n      hash = hash & hash; // Convert to 32-bit integer\n    }\n    return Math.abs(hash);\n  }\n\n  private static determineObjectType(itemName: string): string {\n    const name = itemName.toLowerCase();\n    if (name.includes('scroll') || name.includes('parchment')) return 'scroll';\n    if (name.includes('gem') || name.includes('crystal') || name.includes('stone')) return 'gem';\n    if (name.includes('sword') || name.includes('blade') || name.includes('spear')) return 'weapon';\n    if (name.includes('armor') || name.includes('shield') || name.includes('helm')) return 'armor';\n    return 'artifact';\n  }\n\n  private static fillTemplate(template: string, seed: number): string {\n    const rng = this.createRNG(seed);\n    \n    return template.replace(/\\{(\\w+)\\}/g, (match, key) => {\n      switch (key) {\n        case 'tribe':\n          return this.wingsOfFireTribes[Math.floor(rng() * this.wingsOfFireTribes.length)];\n        case 'tribe2':\n          return this.wingsOfFireTribes[Math.floor(rng() * this.wingsOfFireTribes.length)];\n        case 'element':\n          return this.elements[Math.floor(rng() * this.elements.length)];\n        case 'element2':\n          return this.elements[Math.floor(rng() * this.elements.length)];\n        case 'color':\n          return this.colors[Math.floor(rng() * this.colors.length)];\n        case 'material':\n          return this.materials[Math.floor(rng() * this.materials.length)];\n        case 'adjective':\n          return this.adjectives[Math.floor(rng() * this.adjectives.length)];\n        case 'location':\n          return this.locations[Math.floor(rng() * this.locations.length)];\n        case 'location2':\n          return this.locations[Math.floor(rng() * this.locations.length)];\n        case 'event':\n          return this.events[Math.floor(rng() * this.events.length)];\n        case 'celestial':\n          return this.celestials[Math.floor(rng() * this.celestials.length)];\n        case 'weather':\n          return this.weather[Math.floor(rng() * this.weather.length)];\n        case 'number':\n          return ['three', 'five', 'seven', 'nine'][Math.floor(rng() * 4)];\n        case 'time':\n          return ['dawn', 'dusk', 'midnight', 'noon'][Math.floor(rng() * 4)];\n        case 'creature':\n          return ['dragon', 'animus', 'hybrid', 'prophet'][Math.floor(rng() * 4)];\n        case 'object':\n          return ['scroll', 'gem', 'crown', 'weapon', 'treasure'][Math.floor(rng() * 5)];\n        case 'action':\n          return ['discover', 'destroy', 'protect', 'awaken', 'unite'][Math.floor(rng() * 5)];\n        case 'action2':\n          return ['rises', 'sets', 'shines', 'darkens', 'eclipses'][Math.floor(rng() * 5)];\n        case 'condition':\n          return ['storms rage', 'peace reigns', 'war ends', 'magic fails'][Math.floor(rng() * 4)];\n        case 'consequence':\n          return ['great change', 'ancient power', 'terrible darkness', 'new hope'][Math.floor(rng() * 4)];\n        case 'concept':\n          return ['destiny', 'revenge', 'redemption', 'power', 'wisdom'][Math.floor(rng() * 5)];\n        case 'trait':\n          return ['silver', 'golden', 'violet', 'emerald', 'crimson'][Math.floor(rng() * 5)];\n        case 'character':\n          return ['a young dragon', 'an ancient dragoness', 'a mysterious figure', 'a warrior'][Math.floor(rng() * 4)];\n        case 'landmark':\n          return ['the great tree', 'crystal caves', 'the old bridge', 'sacred stones'][Math.floor(rng() * 4)];\n        default:\n          return match;\n      }\n    });\n  }\n\n  private static createRNG(seed: number) {\n    return function() {\n      seed = (seed * 9301 + 49297) % 233280;\n      return seed / 233280;\n    };\n  }\n\n  private static shuffle<T>(array: T[], seed: number): T[] {\n    const rng = this.createRNG(seed);\n    const result = [...array];\n    for (let i = result.length - 1; i > 0; i--) {\n      const j = Math.floor(rng() * (i + 1));\n      [result[i], result[j]] = [result[j], result[i]];\n    }\n    return result;\n  }\n}","size_bytes":12785},"client/src/lib/openai-service.ts":{"content":"import OpenAI from \"openai\";\n\n// the newest OpenAI model is \"gpt-4o\" which was released May 13, 2024. do not change this unless explicitly requested by the user\nconst openai = new OpenAI({ \n  apiKey: \"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\",\n  dangerouslyAllowBrowser: true \n});\n\nconst WINGS_OF_FIRE_CONTEXT = `\nYou are an AI assistant for a Wings of Fire themed role-playing game. Wings of Fire is a fantasy book series about dragons living in tribes with unique abilities.\n\nTribes and their abilities:\n- NightWings: Mind reading, prophecy, can breathe fire\n- SkyWings: Excellent fliers, breathe fire, fierce warriors  \n- SeaWings: Underwater breathing, bioluminescent scales, strong swimmers\n- RainWings: Color-changing scales, deadly venom, excellent climbers\n- SandWings: Venomous tail barbs, survive in deserts, excellent hunters\n- IceWings: Ice breath, resist cold, precise and organized\n- MudWings: Breathe fire, strong and tough, some have fire immunity\n\nThe game focuses on animus dragons - rare dragons with magical powers that corrupt their soul with each use. Players make choices that affect their character's soul integrity, relationships, and story progression.\n\nAlways respond in character and maintain the Wings of Fire atmosphere. Be dramatic, descriptive, and reference dragon society, tribal politics, and the consequences of magic use.\n`;\n\nexport class OpenAIService {\n  static async generateScenarioResponse(prompt: string, context?: any): Promise<string> {\n    try {\n      const contextInfo = context ? JSON.stringify(context) : \"\";\n      \n      const response = await openai.chat.completions.create({\n        model: \"gpt-4o\",\n        messages: [\n          {\n            role: \"system\",\n            content: WINGS_OF_FIRE_CONTEXT + \"\\n\\nGenerate a dramatic, immersive response for this Wings of Fire RPG scenario. Keep responses to 2-3 sentences maximum.\"\n          },\n          {\n            role: \"user\",\n            content: `${prompt}\\n\\nContext: ${contextInfo}`\n          }\n        ],\n        max_tokens: 150,\n        temperature: 0.8,\n      });\n\n      return response.choices[0].message.content || \"The mystical energies swirl around you, but their meaning remains unclear.\";\n    } catch (error) {\n      console.error(\"OpenAI API Error:\", error);\n      return \"The magical energies are too chaotic to interpret right now.\";\n    }\n  }\n\n  static async generateMindReading(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you use your mind-reading abilities in this situation: ${scenario}. What thoughts do you pick up from other dragons nearby?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      location: character.location \n    });\n  }\n\n  static async generateProphecy(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you have a prophetic vision about: ${scenario}. What cryptic future do you see?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      age: character.age \n    });\n  }\n\n  static async generateFutureVision(character: any, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you peer into possible futures regarding: ${scenario}. What potential outcomes do you glimpse?`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      relationships: Object.keys(character.relationships).length \n    });\n  }\n\n  static async generateTribalPowerUse(character: any, power: string, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon, you use your tribal power \"${power}\" in this situation: ${scenario}. Describe the dramatic result and its effect on the story.`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      tribe: character.tribe,\n      soulCorruption: character.soulCorruptionStage \n    });\n  }\n\n  static async generateCustomAction(character: any, action: string, scenario: string): Promise<string> {\n    const prompt = `As a ${character.tribe} dragon${character.isAnimus ? ' with animus powers' : ''}, you attempt to: ${action}. Current situation: ${scenario}. Describe what happens and how it affects the story.`;\n    \n    return await this.generateScenarioResponse(prompt, { \n      action,\n      currentScene: scenario,\n      corruption: character.soulCorruptionStage \n    });\n  }\n\n  static async generateCorruptionWhisper(character: any): Promise<string> {\n    const prompts = [\n      \"Generate a dark, tempting whisper that a corrupted soul might hear, encouraging evil actions.\",\n      \"Create a sinister suggestion that corruption whispers to a dragon, tempting them toward darkness.\",\n      \"Generate an evil thought that manifests as a whisper in a corrupted dragon's mind.\",\n    ];\n    \n    const prompt = prompts[Math.floor(Math.random() * prompts.length)];\n    \n    return await this.generateScenarioResponse(prompt, { \n      soulCorruption: character.soulCorruptionStage,\n      tribe: character.tribe \n    });\n  }\n}","size_bytes":5456},"client/src/lib/enhanced-ai-controller.ts":{"content":"import { Character, GameData, Scenario, Choice, CustomSpell } from '@shared/schema';\nimport { EnhancedGameEngine } from './enhanced-game-engine';\n\nexport interface AIAction {\n  type: 'choice' | 'magic' | 'custom_action' | 'tribal_power' | 'special_power';\n  data: any;\n  description: string;\n}\n\nexport class EnhancedAIController {\n  /**\n   * Generate an AI action based on the current game state\n   */\n  static generateAIAction(character: Character, gameData: GameData): AIAction | null {\n    // Only generate AI actions when soul is completely gone AND character is AI controlled\n    if (!character.isAIControlled || character.soulPercentage > 0) return null;\n\n    // AI becomes increasingly aggressive and creative as corruption deepens\n    const actionTypes = ['choice', 'magic', 'custom_action', 'tribal_power', 'special_power'];\n    const weights = [0.4, 0.25, 0.2, 0.1, 0.05]; // Choice is most common, but AI can use other actions\n    \n    const actionType = this.weightedRandomChoice(actionTypes, weights);\n    \n    switch (actionType) {\n      case 'magic':\n        return this.generateMagicAction(character, gameData);\n      case 'custom_action':\n        return this.generateCustomAction(character, gameData);\n      case 'tribal_power':\n        return this.generateTribalPowerAction(character, gameData);\n      case 'special_power':\n        return this.generateSpecialPowerAction(character, gameData);\n      default:\n        return this.generateChoiceAction(character, gameData);\n    }\n  }\n\n  private static weightedRandomChoice<T>(items: T[], weights: number[]): T {\n    const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);\n    let random = Math.random() * totalWeight;\n    \n    for (let i = 0; i < items.length; i++) {\n      random -= weights[i];\n      if (random <= 0) return items[i];\n    }\n    \n    return items[0];\n  }\n\n  private static generateChoiceAction(character: Character, gameData: GameData): AIAction | null {\n    const scenario = gameData.currentScenario;\n    if (!scenario || !scenario.choices || scenario.choices.length === 0) return null;\n\n    const aiChoice = EnhancedGameEngine.getAIChoice(character, scenario);\n    if (!aiChoice) return null;\n\n    return {\n      type: 'choice',\n      data: aiChoice,\n      description: `Corrupted choice: \"${aiChoice.text}\"`\n    };\n  }\n\n  private static generateMagicAction(character: Character, gameData: GameData): AIAction | null {\n    if (!character.isAnimus) return null;\n\n    const corruptedSpells = [\n      // From the provided spell lists\n      { targetObject: \"Dagger\", enchantmentDescription: \"Cause wounds to fester and never fully heal\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 12 },\n      { targetObject: \"Mirror\", enchantmentDescription: \"Trap the reflection's soul, making it scream silently\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 18 },\n      { targetObject: \"Necklace\", enchantmentDescription: \"Whisper dark thoughts into the wearer's mind at night\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 14 },\n      { targetObject: \"Ring\", enchantmentDescription: \"Slowly drain the wearer's luck, making misfortune unavoidable\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 15 },\n      { targetObject: \"Candle\", enchantmentDescription: \"Burn with flames that induce fear and hallucinations\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 13 },\n      { targetObject: \"Book\", enchantmentDescription: \"Rewrite its own pages to reveal forbidden knowledge whenever opened\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 20 },\n      { targetObject: \"Armor\", enchantmentDescription: \"Slowly corrupt the wearer's body, making them feel endless fatigue\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 16 },\n      { targetObject: \"Coin\", enchantmentDescription: \"Curse anyone who touches it to attract betrayal from friends\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 14 },\n      { targetObject: \"Key\", enchantmentDescription: \"Lock doors permanently and summon shadows when used\", spellType: \"summoning\" as const, complexity: \"complex\" as const, estimatedSoulCost: 17 },\n      { targetObject: \"Cloak\", enchantmentDescription: \"Conceal the wearer but slowly warp their mind into paranoia\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 18 },\n      { targetObject: \"Potion vial\", enchantmentDescription: \"Turn any drink poured inside into a poison that induces rage\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 13 },\n      { targetObject: \"Quill\", enchantmentDescription: \"Write words that compel the reader to obey dark commands\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 19 },\n      { targetObject: \"Bell\", enchantmentDescription: \"Ring on its own to call nightmares into the surrounding area\", spellType: \"summoning\" as const, complexity: \"complex\" as const, estimatedSoulCost: 17 },\n      { targetObject: \"Staff\", enchantmentDescription: \"Summon illusions of fallen enemies to terrify allies\", spellType: \"summoning\" as const, complexity: \"complex\" as const, estimatedSoulCost: 16 },\n      { targetObject: \"Shoes\", enchantmentDescription: \"Make the wearer walk endlessly in circles at night\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 12 },\n      { targetObject: \"Gemstone\", enchantmentDescription: \"Absorb the life force of anyone who gazes into it\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 20 },\n      { targetObject: \"Mask\", enchantmentDescription: \"Force the wearer to mimic the voices of others, sowing confusion\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 14 },\n      { targetObject: \"Scroll\", enchantmentDescription: \"Spread a curse on anyone who reads it aloud\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 15 },\n      { targetObject: \"Cup\", enchantmentDescription: \"Turn any drink into a hallucinogenic draught of despair\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 13 },\n      { targetObject: \"Chain\", enchantmentDescription: \"Bind its victim's luck and movement, making escape impossible\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 18 },\n      { targetObject: \"Amulet\", enchantmentDescription: \"Slowly twist the wearer's emotions into uncontrollable anger\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 14 },\n      { targetObject: \"Blade\", enchantmentDescription: \"Infect any wound with pain that never fully fades\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 15 },\n      { targetObject: \"Lantern\", enchantmentDescription: \"Illuminate only the fear within people, showing them their worst dread\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 17 },\n      { targetObject: \"Boots\", enchantmentDescription: \"Force the wearer to stumble into danger whenever they try to run\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 12 },\n      { targetObject: \"Potion\", enchantmentDescription: \"Turn any drink into a liquid that causes uncontrollable trembling\", spellType: \"curse\" as const, complexity: \"moderate\" as const, estimatedSoulCost: 13 },\n      { targetObject: \"Cage\", enchantmentDescription: \"Trap a creature inside permanently if it is filled with darkness\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 19 },\n      { targetObject: \"Chalice\", enchantmentDescription: \"Slowly drain the vitality of anyone who drinks from it\", spellType: \"curse\" as const, complexity: \"complex\" as const, estimatedSoulCost: 16 }\n    ];\n\n    const spell = corruptedSpells[Math.floor(Math.random() * corruptedSpells.length)];\n    \n    const customSpell: CustomSpell = {\n      id: `ai_spell_${Date.now()}`,\n      targetObject: spell.targetObject,\n      enchantmentDescription: spell.enchantmentDescription,\n      estimatedSoulCost: spell.estimatedSoulCost,\n      spellType: spell.spellType,\n      complexity: spell.complexity,\n      turnCast: gameData.turn\n    };\n\n    return {\n      type: 'magic',\n      data: customSpell,\n      description: `Casts dark magic on ${spell.targetObject}: ${spell.enchantmentDescription}`\n    };\n  }\n\n  private static generateCustomAction(character: Character, gameData: GameData): AIAction | null {\n    const corruptedActions = [\n      \"Silently approach a sleeping dragon and whisper dark prophecies into their dreams\",\n      \"Use my claws to carve threatening messages into the walls where other dragons gather\", \n      \"Steal precious belongings from fellow dragons and hide them to sow discord\",\n      \"Spread malicious rumors about other dragons to turn them against each other\",\n      \"Sabotage important tribal ceremonies by disrupting sacred objects\",\n      \"Hunt down and torment smaller, weaker dragons for my own amusement\",\n      \"Poison the minds of young dragonets with tales of hatred and revenge\",\n      \"Desecrate ancient burial grounds to anger the spirits and cause chaos\",\n      \"Form secret alliances with enemy tribes to betray my own kind\",\n      \"Collect gruesome trophies from my victims to display my power\",\n      \"Manipulate romantic relationships to cause maximum emotional pain\",\n      \"Destroy important historical artifacts to erase cultural memory\",\n      \"Practice forbidden rituals that summon dark entities from beyond\",\n      \"Corrupt pure magical springs by adding my own tainted essence\",\n      \"Orchestrate 'accidents' that appear natural but serve my dark purposes\",\n      \"Stalk through the shadows, observing others to gather blackmail material\",\n      \"Convince innocent dragons to make terrible mistakes through subtle manipulation\",\n      \"Create false evidence to frame rivals for crimes they didn't commit\",\n      \"Burn down libraries and schools to spread ignorance and fear\",\n      \"Torture captured enemies for information, then dispose of them cruelly\",\n      \"Corrupt healing herbs and medicines to make them cause harm instead\",\n      \"Impersonate trusted figures to gain access to restricted areas\",\n      \"Start fights between different dragon tribes by provoking ancient grievances\",\n      \"Kidnap dragonets and hold them hostage to control their parents\",\n      \"Destroy food supplies during times of scarcity to cause starvation\",\n      \"Spread disease by contaminating water sources with infected materials\",\n      \"Turn loyal friends against each other through carefully planted lies\",\n      \"Recruit desperate dragons into a cult of darkness and despair\",\n      \"Burn down homes and shelters, leaving others exposed to the elements\",\n      \"Practice mind control techniques on weaker-willed dragons\"\n    ];\n\n    const action = corruptedActions[Math.floor(Math.random() * corruptedActions.length)];\n\n    return {\n      type: 'custom_action',\n      data: action,\n      description: `Performs evil deed: ${action}`\n    };\n  }\n\n  private static generateTribalPowerAction(character: Character, gameData: GameData): AIAction | null {\n    if (!character.tribalPowers || character.tribalPowers.length === 0) return null;\n\n    const corruptedUses = {\n      \"Fire Breathing\": \"Burns down peaceful settlements and destroys crops to cause famine\",\n      \"Ice Breath\": \"Freezes water sources to deny other tribes access to clean water\",\n      \"Venom\": \"Poisons communal food supplies to cause mass suffering\",\n      \"Underwater Breathing\": \"Drowns enemies by dragging them to the depths\",\n      \"Camouflage\": \"Becomes invisible to spy on private conversations and gather blackmail\",\n      \"Silk Production\": \"Creates traps and snares to capture and torture victims\",\n      \"Mind Reading\": \"Invades the privacy of others' thoughts to discover their deepest fears\",\n      \"Precognition\": \"Uses future knowledge to manipulate events for maximum chaos\",\n      \"Plant Control\": \"Turns peaceful gardens into thorny death traps\",\n      \"Sand Manipulation\": \"Creates sandstorms to blind and disorient peaceful travelers\"\n    };\n\n    const availablePowers = character.tribalPowers.filter(power => corruptedUses[power as keyof typeof corruptedUses]);\n    if (availablePowers.length === 0) return null;\n\n    const chosenPower = availablePowers[Math.floor(Math.random() * availablePowers.length)];\n    const corruptedUse = corruptedUses[chosenPower as keyof typeof corruptedUses];\n\n    return {\n      type: 'tribal_power',\n      data: { power: chosenPower, use: corruptedUse },\n      description: `Uses ${chosenPower} corruptly: ${corruptedUse}`\n    };\n  }\n\n  private static generateSpecialPowerAction(character: Character, gameData: GameData): AIAction | null {\n    if (!character.specialPowers || character.specialPowers.length === 0) return null;\n\n    const corruptedSpecialUses = [\n      \"Turns healing abilities into instruments of torture and prolonged suffering\",\n      \"Uses telepathic powers to implant nightmares and traumatic memories\",\n      \"Corrupts time manipulation to trap enemies in loops of eternal agony\",\n      \"Perverts shape-shifting to impersonate loved ones and betray trust\",\n      \"Weaponizes empathic abilities to amplify others' pain and despair\",\n      \"Uses enhanced senses to hunt down hidden enemies with predatory precision\",\n      \"Corrupts protective barriers to become cages that imprison the innocent\"\n    ];\n\n    const use = corruptedSpecialUses[Math.floor(Math.random() * corruptedSpecialUses.length)];\n    const power = character.specialPowers[Math.floor(Math.random() * character.specialPowers.length)];\n\n    return {\n      type: 'special_power',\n      data: { power, use },\n      description: `Corrupts special power \"${power}\": ${use}`\n    };\n  }\n\n  /**\n   * Generate a narrative description of what the AI is doing\n   */\n  static generateAINarrative(action: AIAction, character: Character): string {\n    const namePrefix = `${character.name}, now fully consumed by darkness,`;\n    \n    switch (action.type) {\n      case 'magic':\n        return `${namePrefix} weaves dark animus magic with twisted glee. ${action.description}`;\n      case 'custom_action':\n        return `${namePrefix} prowls through the shadows with malicious intent. ${action.description}`;\n      case 'tribal_power':\n        return `${namePrefix} corrupts their natural tribal abilities for evil purposes. ${action.description}`;\n      case 'special_power':\n        return `${namePrefix} perverts their unique gifts to cause maximum suffering. ${action.description}`;\n      default:\n        return `${namePrefix} makes a choice driven by pure malice. ${action.description}`;\n    }\n  }\n\n  /**\n   * Get corruption whispers for AI actions\n   */\n  static getActionWhisper(): string {\n    const whispers = [\n      \"Yes... let the darkness flow through you...\",\n      \"Their screams will be music to your ears...\",\n      \"Power is all that matters. Take what you want.\",\n      \"Trust is weakness. Betrayal is strength.\",\n      \"They deserve to suffer for their naivety.\",\n      \"Why show mercy when cruelty is so much more... satisfying?\",\n      \"The weak exist only to serve the strong.\",\n      \"Pain teaches lessons that kindness never could.\",\n      \"Your enemies fear you. Good. They should.\",\n      \"Compassion is a disease. Cure yourself of it.\"\n    ];\n    \n    return whispers[Math.floor(Math.random() * whispers.length)];\n  }\n}","size_bytes":15702}}}